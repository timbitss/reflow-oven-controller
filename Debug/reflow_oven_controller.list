
reflow_oven_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001604  0800e650  0800e650  0001e650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc54  0800fc54  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc54  0800fc54  0001fc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc5c  0800fc5c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc5c  0800fc5c  0001fc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc60  0800fc60  0001fc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800fc64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f28  20000200  0800fe64  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005128  0800fe64  00025128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b3af  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f3  00000000  00000000  0004b5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e28  00000000  00000000  00050bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c48  00000000  00000000  00052a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1ee  00000000  00000000  00054648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022580  00000000  00000000  00081836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e016  00000000  00000000  000a3db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b1dcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000836c  00000000  00000000  001b1e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e638 	.word	0x0800e638

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800e638 	.word	0x0800e638

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_d2iz>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a98:	d215      	bcs.n	8000ac6 <__aeabi_d2iz+0x36>
 8000a9a:	d511      	bpl.n	8000ac0 <__aeabi_d2iz+0x30>
 8000a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa4:	d912      	bls.n	8000acc <__aeabi_d2iz+0x3c>
 8000aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	bf18      	it	ne
 8000abc:	4240      	negne	r0, r0
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d105      	bne.n	8000ad8 <__aeabi_d2iz+0x48>
 8000acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b96e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9d08      	ldr	r5, [sp, #32]
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8083 	bne.w	8000d06 <__udivmoddi4+0x116>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d947      	bls.n	8000c96 <__udivmoddi4+0xa6>
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b142      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0c:	f1c2 0020 	rsb	r0, r2, #32
 8000c10:	fa24 f000 	lsr.w	r0, r4, r0
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4097      	lsls	r7, r2
 8000c18:	ea40 0c01 	orr.w	ip, r0, r1
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fbbc f6f8 	udiv	r6, ip, r8
 8000c28:	fa1f fe87 	uxth.w	lr, r7
 8000c2c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c34:	fb06 f10e 	mul.w	r1, r6, lr
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x60>
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c42:	f080 8119 	bcs.w	8000e78 <__udivmoddi4+0x288>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 8116 	bls.w	8000e78 <__udivmoddi4+0x288>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	443b      	add	r3, r7
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x8c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	f080 8105 	bcs.w	8000e7c <__udivmoddi4+0x28c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8102 	bls.w	8000e7c <__udivmoddi4+0x28c>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c80:	eba4 040e 	sub.w	r4, r4, lr
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa0>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	b902      	cbnz	r2, 8000c9a <__udivmoddi4+0xaa>
 8000c98:	deff      	udf	#255	; 0xff
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d150      	bne.n	8000d44 <__udivmoddi4+0x154>
 8000ca2:	1bcb      	subs	r3, r1, r7
 8000ca4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca8:	fa1f f887 	uxth.w	r8, r7
 8000cac:	2601      	movs	r6, #1
 8000cae:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0xe4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0xe2>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	f200 80e9 	bhi.w	8000ea4 <__udivmoddi4+0x2b4>
 8000cd2:	4684      	mov	ip, r0
 8000cd4:	1ac9      	subs	r1, r1, r3
 8000cd6:	b2a3      	uxth	r3, r4
 8000cd8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cdc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce4:	fb08 f800 	mul.w	r8, r8, r0
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x10c>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x10a>
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	f200 80d9 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	eba4 0408 	sub.w	r4, r4, r8
 8000d00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d04:	e7bf      	b.n	8000c86 <__udivmoddi4+0x96>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d909      	bls.n	8000d1e <__udivmoddi4+0x12e>
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <__udivmoddi4+0x282>
 8000d10:	2600      	movs	r6, #0
 8000d12:	e9c5 0100 	strd	r0, r1, [r5]
 8000d16:	4630      	mov	r0, r6
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	fab3 f683 	clz	r6, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d14a      	bne.n	8000dbc <__udivmoddi4+0x1cc>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0x140>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 80b8 	bhi.w	8000ea0 <__udivmoddi4+0x2b0>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb61 0103 	sbc.w	r1, r1, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	468c      	mov	ip, r1
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0a8      	beq.n	8000c90 <__udivmoddi4+0xa0>
 8000d3e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f603 	lsr.w	r6, r0, r3
 8000d4c:	4097      	lsls	r7, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d56:	40d9      	lsrs	r1, r3
 8000d58:	4330      	orrs	r0, r6
 8000d5a:	0c03      	lsrs	r3, r0, #16
 8000d5c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f108 	mul.w	r1, r6, r8
 8000d70:	4299      	cmp	r1, r3
 8000d72:	fa04 f402 	lsl.w	r4, r4, r2
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x19c>
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d7e:	f080 808d 	bcs.w	8000e9c <__udivmoddi4+0x2ac>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 808a 	bls.w	8000e9c <__udivmoddi4+0x2ac>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	443b      	add	r3, r7
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b281      	uxth	r1, r0
 8000d90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb00 f308 	mul.w	r3, r0, r8
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x1c4>
 8000da4:	1879      	adds	r1, r7, r1
 8000da6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000daa:	d273      	bcs.n	8000e94 <__udivmoddi4+0x2a4>
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d971      	bls.n	8000e94 <__udivmoddi4+0x2a4>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4439      	add	r1, r7
 8000db4:	1acb      	subs	r3, r1, r3
 8000db6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dba:	e778      	b.n	8000cae <__udivmoddi4+0xbe>
 8000dbc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc8:	431c      	orrs	r4, r3
 8000dca:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dce:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	0c3b      	lsrs	r3, r7, #16
 8000dde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000de2:	fa1f f884 	uxth.w	r8, r4
 8000de6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dee:	fb09 fa08 	mul.w	sl, r9, r8
 8000df2:	458a      	cmp	sl, r1
 8000df4:	fa02 f206 	lsl.w	r2, r2, r6
 8000df8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x220>
 8000dfe:	1861      	adds	r1, r4, r1
 8000e00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e04:	d248      	bcs.n	8000e98 <__udivmoddi4+0x2a8>
 8000e06:	458a      	cmp	sl, r1
 8000e08:	d946      	bls.n	8000e98 <__udivmoddi4+0x2a8>
 8000e0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0e:	4421      	add	r1, r4
 8000e10:	eba1 010a 	sub.w	r1, r1, sl
 8000e14:	b2bf      	uxth	r7, r7
 8000e16:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e1a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e22:	fb00 f808 	mul.w	r8, r0, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x24a>
 8000e2a:	19e7      	adds	r7, r4, r7
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d22e      	bcs.n	8000e90 <__udivmoddi4+0x2a0>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d92c      	bls.n	8000e90 <__udivmoddi4+0x2a0>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4427      	add	r7, r4
 8000e3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3e:	eba7 0708 	sub.w	r7, r7, r8
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	46c6      	mov	lr, r8
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	d31a      	bcc.n	8000e84 <__udivmoddi4+0x294>
 8000e4e:	d017      	beq.n	8000e80 <__udivmoddi4+0x290>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x27a>
 8000e52:	ebb3 020e 	subs.w	r2, r3, lr
 8000e56:	eb67 0701 	sbc.w	r7, r7, r1
 8000e5a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5e:	40f2      	lsrs	r2, r6
 8000e60:	ea4c 0202 	orr.w	r2, ip, r2
 8000e64:	40f7      	lsrs	r7, r6
 8000e66:	e9c5 2700 	strd	r2, r7, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	462e      	mov	r6, r5
 8000e74:	4628      	mov	r0, r5
 8000e76:	e70b      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e78:	4606      	mov	r6, r0
 8000e7a:	e6e9      	b.n	8000c50 <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fd      	b.n	8000c7c <__udivmoddi4+0x8c>
 8000e80:	4543      	cmp	r3, r8
 8000e82:	d2e5      	bcs.n	8000e50 <__udivmoddi4+0x260>
 8000e84:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e88:	eb69 0104 	sbc.w	r1, r9, r4
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	e7df      	b.n	8000e50 <__udivmoddi4+0x260>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e7d2      	b.n	8000e3a <__udivmoddi4+0x24a>
 8000e94:	4660      	mov	r0, ip
 8000e96:	e78d      	b.n	8000db4 <__udivmoddi4+0x1c4>
 8000e98:	4681      	mov	r9, r0
 8000e9a:	e7b9      	b.n	8000e10 <__udivmoddi4+0x220>
 8000e9c:	4666      	mov	r6, ip
 8000e9e:	e775      	b.n	8000d8c <__udivmoddi4+0x19c>
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e74a      	b.n	8000d3a <__udivmoddi4+0x14a>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	4439      	add	r1, r7
 8000eaa:	e713      	b.n	8000cd4 <__udivmoddi4+0xe4>
 8000eac:	3802      	subs	r0, #2
 8000eae:	443c      	add	r4, r7
 8000eb0:	e724      	b.n	8000cfc <__udivmoddi4+0x10c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MAX31855K_Init>:
static MAX31855K_t max;

static const char *max_err_names[MAX_NUM_ERRORS] = {MAX_ERR_NAMES_CSV};

void MAX31855K_Init(MAX31855K_cfg_t const *const max_cfg)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    max.spi_handle = max_cfg->hspi;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ec6:	6013      	str	r3, [r2, #0]
    max.cs_port = max_cfg->max_cs_port;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ece:	6053      	str	r3, [r2, #4]
    max.cs_pin = max_cfg->max_cs_pin;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	891a      	ldrh	r2, [r3, #8]
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ed6:	811a      	strh	r2, [r3, #8]
    memset(max.tx_buf, 0, sizeof(max.tx_buf));
 8000ed8:	2204      	movs	r2, #4
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MAX31855K_Init+0x4c>)
 8000ede:	f00d fa25 	bl	800e32c <memset>
    memset(max.rx_buf, 0, sizeof(max.rx_buf));
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MAX31855K_Init+0x50>)
 8000ee8:	f00d fa20 	bl	800e32c <memset>
    max.data32 = 0;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <MAX31855K_Init+0x48>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
    max.err = MAX_OK;
 8000ef2:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000021c 	.word	0x2000021c
 8000f04:	20000226 	.word	0x20000226
 8000f08:	2000022a 	.word	0x2000022a

08000f0c <MAX31855K_RxBlocking>:

MAX31855K_err_t MAX31855K_RxBlocking()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    /* Acquire data from MAX31855K */
    HAL_GPIO_WritePin(max.cs_port, max.cs_pin, GPIO_PIN_RESET); // Assert CS line to start transaction.
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f16:	8911      	ldrh	r1, [r2, #8]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 fd06 	bl	800692c <HAL_GPIO_WritePin>
    HAL_SPI_Receive(max.spi_handle,                             // Sample 4 bytes off MISO line.
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	2204      	movs	r2, #4
 8000f2a:	4912      	ldr	r1, [pc, #72]	; (8000f74 <MAX31855K_RxBlocking+0x68>)
 8000f2c:	f007 f8e1 	bl	80080f2 <HAL_SPI_Receive>
                    max.rx_buf,
                    sizeof(max.rx_buf),
                    HAL_MAX_DELAY);
    HAL_GPIO_WritePin(max.cs_port, max.cs_pin, GPIO_PIN_SET); // Deassert CS line to end transaction.
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f36:	8911      	ldrh	r1, [r2, #8]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 fcf6 	bl	800692c <HAL_GPIO_WritePin>
    max.data32 = max.rx_buf[0] << 24 | (max.rx_buf[1] << 16) | (max.rx_buf[2] << 8) | max.rx_buf[3];
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f42:	7b9b      	ldrb	r3, [r3, #14]
 8000f44:	061a      	lsls	r2, r3, #24
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f48:	7bdb      	ldrb	r3, [r3, #15]
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f50:	7c1b      	ldrb	r3, [r3, #16]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	4313      	orrs	r3, r2
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f58:	7c52      	ldrb	r2, [r2, #17]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f60:	615a      	str	r2, [r3, #20]

    /* Check for faults. */
    MAX31855K_error_check();
 8000f62:	f000 f871 	bl	8001048 <MAX31855K_error_check>

    return max.err;
 8000f66:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f68:	7e1b      	ldrb	r3, [r3, #24]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000021c 	.word	0x2000021c
 8000f74:	2000022a 	.word	0x2000022a

08000f78 <MAX31855K_Get_HJ>:
    max.data32 = max.rx_buf[0] << 24 | (max.rx_buf[1] << 16) | (max.rx_buf[2] << 8) | max.rx_buf[3];
    MAX31855K_error_check();
}

float MAX31855K_Get_HJ()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    /* Extract HJ temperature. */
    uint32_t data = max.data32;     // Capture latest data reading.
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MAX31855K_Get_HJ+0x60>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	603b      	str	r3, [r7, #0]
    int16_t val = 0;                // Value prior to temperature conversion.
 8000f84:	2300      	movs	r3, #0
 8000f86:	80fb      	strh	r3, [r7, #6]
    if (data & ((uint32_t)1 << 31)) // Perform sign-extension.
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da09      	bge.n	8000fa2 <MAX31855K_Get_HJ+0x2a>
    {
        val = 0xC000 | ((data >> 18) & 0x3FFF);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	0c9b      	lsrs	r3, r3, #18
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000f98:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	80fb      	strh	r3, [r7, #6]
 8000fa0:	e002      	b.n	8000fa8 <MAX31855K_Get_HJ+0x30>
    }
    else
    {
        val = data >> 18;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	0c9b      	lsrs	r3, r3, #18
 8000fa6:	80fb      	strh	r3, [r7, #6]
    }
    return val * HJ_RES;
 8000fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa6b 	bl	8000488 <__aeabi_i2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MAX31855K_Get_HJ+0x64>)
 8000fb8:	f7ff fad0 	bl	800055c <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fdac 	bl	8000b20 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000021c 	.word	0x2000021c
 8000fdc:	3fd00000 	.word	0x3fd00000

08000fe0 <MAX31855K_Err_Str>:
    }
    return val * CJ_RES;
}

const char *MAX31855K_Err_Str()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
    ASSERT(max.err < MAX_NUM_ERRORS);
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MAX31855K_Err_Str+0x54>)
 8000fe8:	7e1b      	ldrb	r3, [r3, #24]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d918      	bls.n	8001020 <MAX31855K_Err_Str+0x40>
 8000fee:	f005 fa05 	bl	80063fc <HAL_GetTick>
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <MAX31855K_Err_Str+0x58>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	0999      	lsrs	r1, r3, #6
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <MAX31855K_Err_Str+0x58>)
 8001002:	fba2 0203 	umull	r0, r2, r2, r3
 8001006:	0992      	lsrs	r2, r2, #6
 8001008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100c:	fb00 f202 	mul.w	r2, r0, r2
 8001010:	1a9a      	subs	r2, r3, r2
 8001012:	238c      	movs	r3, #140	; 0x8c
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MAX31855K_Err_Str+0x5c>)
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <MAX31855K_Err_Str+0x60>)
 800101a:	f003 fc51 	bl	80048c0 <printf_>
 800101e:	e7fe      	b.n	800101e <MAX31855K_Err_Str+0x3e>
    return max_err_names[max.err];
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <MAX31855K_Err_Str+0x54>)
 8001022:	7e1b      	ldrb	r3, [r3, #24]
 8001024:	461a      	mov	r2, r3
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MAX31855K_Err_Str+0x64>)
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000021c 	.word	0x2000021c
 8001038:	10624dd3 	.word	0x10624dd3
 800103c:	0800e6a4 	.word	0x0800e6a4
 8001040:	0800e6bc 	.word	0x0800e6bc
 8001044:	20000000 	.word	0x20000000

08001048 <MAX31855K_error_check>:

static void MAX31855K_error_check()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
    if (max.data32 == 0)
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <MAX31855K_error_check+0x9c>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <MAX31855K_error_check+0x16>
    {
        max.err = MAX_ZEROS;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MAX31855K_error_check+0x9c>)
 8001058:	2204      	movs	r2, #4
 800105a:	761a      	strb	r2, [r3, #24]
    }
    else
    {
        max.err = MAX_OK;
    }
}
 800105c:	e03e      	b.n	80010dc <MAX31855K_error_check+0x94>
    else if (max.data32 & ((uint32_t)1 << 16))
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MAX31855K_error_check+0x9c>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d034      	beq.n	80010d4 <MAX31855K_error_check+0x8c>
        uint8_t fault = max.data32 & 0x7;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MAX31855K_error_check+0x9c>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	71fb      	strb	r3, [r7, #7]
        switch (fault)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d006      	beq.n	800108a <MAX31855K_error_check+0x42>
 800107c:	2b04      	cmp	r3, #4
 800107e:	dc10      	bgt.n	80010a2 <MAX31855K_error_check+0x5a>
 8001080:	2b01      	cmp	r3, #1
 8001082:	d00a      	beq.n	800109a <MAX31855K_error_check+0x52>
 8001084:	2b02      	cmp	r3, #2
 8001086:	d004      	beq.n	8001092 <MAX31855K_error_check+0x4a>
 8001088:	e00b      	b.n	80010a2 <MAX31855K_error_check+0x5a>
            max.err = MAX_SHORT_VCC;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MAX31855K_error_check+0x9c>)
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
            break;
 8001090:	e024      	b.n	80010dc <MAX31855K_error_check+0x94>
            max.err = MAX_SHORT_GND;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MAX31855K_error_check+0x9c>)
 8001094:	2202      	movs	r2, #2
 8001096:	761a      	strb	r2, [r3, #24]
            break;
 8001098:	e020      	b.n	80010dc <MAX31855K_error_check+0x94>
            max.err = MAX_OPEN;
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MAX31855K_error_check+0x9c>)
 800109c:	2203      	movs	r2, #3
 800109e:	761a      	strb	r2, [r3, #24]
            break;
 80010a0:	e01c      	b.n	80010dc <MAX31855K_error_check+0x94>
            ASSERT(0); // Should never reach this point.
 80010a2:	f005 f9ab 	bl	80063fc <HAL_GetTick>
 80010a6:	6038      	str	r0, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <MAX31855K_error_check+0xa0>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0999      	lsrs	r1, r3, #6
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <MAX31855K_error_check+0xa0>)
 80010b6:	fba2 0203 	umull	r0, r2, r2, r3
 80010ba:	0992      	lsrs	r2, r2, #6
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	fb00 f202 	mul.w	r2, r0, r2
 80010c4:	1a9a      	subs	r2, r3, r2
 80010c6:	23a5      	movs	r3, #165	; 0xa5
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MAX31855K_error_check+0xa4>)
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <MAX31855K_error_check+0xa8>)
 80010ce:	f003 fbf7 	bl	80048c0 <printf_>
 80010d2:	e7fe      	b.n	80010d2 <MAX31855K_error_check+0x8a>
        max.err = MAX_OK;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <MAX31855K_error_check+0x9c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	761a      	strb	r2, [r3, #24]
}
 80010da:	e7ff      	b.n	80010dc <MAX31855K_error_check+0x94>
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000021c 	.word	0x2000021c
 80010e8:	10624dd3 	.word	0x10624dd3
 80010ec:	0800e6a4 	.word	0x0800e6a4
 80010f0:	0800e6bc 	.word	0x0800e6bc

080010f4 <Active_ctor>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t Active_ctor(Active *const ao, EventHandler evt_handler)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    if (evt_handler == NULL || ao == NULL)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <Active_ctor+0x16>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <Active_ctor+0x1a>
    {
        return MOD_ERR_ARG;
 800110a:	2302      	movs	r3, #2
 800110c:	e003      	b.n	8001116 <Active_ctor+0x22>
    }

    ao->evt_handler = evt_handler;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	609a      	str	r2, [r3, #8]
    return MOD_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <Active_start>:

mod_err_t Active_start(Active *const ao,
                       const osThreadAttr_t *const thread_attr,
                       uint32_t msg_count,
                       const osMessageQueueAttr_t *const queue_attr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
    ao->thread_id = osThreadNew(Active_event_loop, (void *)ao, thread_attr);
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	481a      	ldr	r0, [pc, #104]	; (80011a0 <Active_start+0x7c>)
 8001138:	f009 fee0 	bl	800aefc <osThreadNew>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	601a      	str	r2, [r3, #0]
    ao->queue_id = osMessageQueueNew(msg_count, sizeof(Event *), queue_attr);
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	2104      	movs	r1, #4
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f00a f8a9 	bl	800b29e <osMessageQueueNew>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	605a      	str	r2, [r3, #4]

    ASSERT(ao->thread_id != NULL && ao->queue_id != NULL);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <Active_start+0x3e>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <Active_start+0x70>
 8001162:	f005 f94b 	bl	80063fc <HAL_GetTick>
 8001166:	6178      	str	r0, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <Active_start+0x80>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0999      	lsrs	r1, r3, #6
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <Active_start+0x80>)
 8001176:	fba2 0203 	umull	r0, r2, r2, r3
 800117a:	0992      	lsrs	r2, r2, #6
 800117c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001180:	fb00 f202 	mul.w	r2, r0, r2
 8001184:	1a9a      	subs	r2, r3, r2
 8001186:	2341      	movs	r3, #65	; 0x41
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <Active_start+0x84>)
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <Active_start+0x88>)
 800118e:	f003 fb97 	bl	80048c0 <printf_>
 8001192:	e7fe      	b.n	8001192 <Active_start+0x6e>

    return MOD_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08001479 	.word	0x08001479
 80011a4:	10624dd3 	.word	0x10624dd3
 80011a8:	0800e6fc 	.word	0x0800e6fc
 80011ac:	0800e714 	.word	0x0800e714

080011b0 <Active_post>:

mod_err_t Active_post(Active *const ao, Event const *const evt)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
    /* Put pointer to event object */
    osStatus_t err = osMessageQueuePut(ao->queue_id, &evt, 0U, 0U);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6858      	ldr	r0, [r3, #4]
 80011be:	4639      	mov	r1, r7
 80011c0:	2300      	movs	r3, #0
 80011c2:	2200      	movs	r2, #0
 80011c4:	f00a f8de 	bl	800b384 <osMessageQueuePut>
 80011c8:	60f8      	str	r0, [r7, #12]
    if (err != osOK)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <Active_post+0x24>
    {
        return MOD_ERR_TIMEOUT;
 80011d0:	2309      	movs	r3, #9
 80011d2:	e000      	b.n	80011d6 <Active_post+0x26>
    }

    return MOD_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <TimeEvent_ctor>:

void TimeEvent_ctor(TimeEvent *const time_evt, Signal sig, Active *ao)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
    /* No critical section because it is presumed that all Time_Events
     * are created *before* multitasking has started. */
    time_evt->base.sig = sig;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	601a      	str	r2, [r3, #0]
    time_evt->ao = ao;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	605a      	str	r2, [r3, #4]
    time_evt->timeout = 0U;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
    time_evt->reload = 0U;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]

    /* Register TimeEvent instance. */
    ASSERT(num_time_events < ARRAY_SIZE(time_events));
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <TimeEvent_ctor+0x7c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d918      	bls.n	800123e <TimeEvent_ctor+0x5e>
 800120c:	f005 f8f6 	bl	80063fc <HAL_GetTick>
 8001210:	6178      	str	r0, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <TimeEvent_ctor+0x80>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0999      	lsrs	r1, r3, #6
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <TimeEvent_ctor+0x80>)
 8001220:	fba2 0203 	umull	r0, r2, r2, r3
 8001224:	0992      	lsrs	r2, r2, #6
 8001226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122a:	fb00 f202 	mul.w	r2, r0, r2
 800122e:	1a9a      	subs	r2, r3, r2
 8001230:	235c      	movs	r3, #92	; 0x5c
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <TimeEvent_ctor+0x84>)
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <TimeEvent_ctor+0x88>)
 8001238:	f003 fb42 	bl	80048c0 <printf_>
 800123c:	e7fe      	b.n	800123c <TimeEvent_ctor+0x5c>
    time_events[num_time_events++] = time_evt;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <TimeEvent_ctor+0x7c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	b2d1      	uxtb	r1, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <TimeEvent_ctor+0x7c>)
 8001248:	7011      	strb	r1, [r2, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <TimeEvent_ctor+0x8c>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000260 	.word	0x20000260
 8001260:	10624dd3 	.word	0x10624dd3
 8001264:	0800e6fc 	.word	0x0800e6fc
 8001268:	0800e714 	.word	0x0800e714
 800126c:	20000238 	.word	0x20000238

08001270 <TimeEvent_arm>:

void TimeEvent_arm(TimeEvent *const time_evt, uint32_t timeout, uint32_t reload)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b08f      	sub	sp, #60	; 0x3c
 8001274:	af04      	add	r7, sp, #16
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
    LOGI(TAG, "Arming time event for %lu seconds (%s)", timeout, reload == 0 ? "One-shot" : "Periodic");
 800127c:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <TimeEvent_arm+0x168>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d025      	beq.n	80012d0 <TimeEvent_arm+0x60>
 8001284:	f005 f8ba 	bl	80063fc <HAL_GetTick>
 8001288:	6278      	str	r0, [r7, #36]	; 0x24
 800128a:	4b54      	ldr	r3, [pc, #336]	; (80013dc <TimeEvent_arm+0x16c>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <TimeEvent_arm+0x170>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	099c      	lsrs	r4, r3, #6
 8001298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129a:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <TimeEvent_arm+0x170>)
 800129c:	fba3 1302 	umull	r1, r3, r3, r2
 80012a0:	099b      	lsrs	r3, r3, #6
 80012a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <TimeEvent_arm+0x16c>)
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	2900      	cmp	r1, #0
 80012b4:	d101      	bne.n	80012ba <TimeEvent_arm+0x4a>
 80012b6:	494b      	ldr	r1, [pc, #300]	; (80013e4 <TimeEvent_arm+0x174>)
 80012b8:	e000      	b.n	80012bc <TimeEvent_arm+0x4c>
 80012ba:	494b      	ldr	r1, [pc, #300]	; (80013e8 <TimeEvent_arm+0x178>)
 80012bc:	9103      	str	r1, [sp, #12]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	9102      	str	r1, [sp, #8]
 80012c2:	9201      	str	r2, [sp, #4]
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	4623      	mov	r3, r4
 80012c8:	4a48      	ldr	r2, [pc, #288]	; (80013ec <TimeEvent_arm+0x17c>)
 80012ca:	2103      	movs	r1, #3
 80012cc:	f000 ff8a 	bl	80021e4 <log_printf>
    osKernelLock(); // Data shared between threads and timer ISR
 80012d0:	f009 fdbc 	bl	800ae4c <osKernelLock>
    time_evt->timeout = timeout;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	609a      	str	r2, [r3, #8]
    time_evt->reload = reload;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
    osKernelUnlock();
 80012e0:	f009 fdda 	bl	800ae98 <osKernelUnlock>

    /* Start 1 s timer if first arming of timer. */
    if (first_arm == false)
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <TimeEvent_arm+0x180>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f083 0301 	eor.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d06d      	beq.n	80013ce <TimeEvent_arm+0x15e>
    {
        ms_timer_inst = osTimerNew(TimeEvent_tick, osTimerPeriodic, NULL, NULL);
 80012f2:	2300      	movs	r3, #0
 80012f4:	2200      	movs	r2, #0
 80012f6:	2101      	movs	r1, #1
 80012f8:	483e      	ldr	r0, [pc, #248]	; (80013f4 <TimeEvent_arm+0x184>)
 80012fa:	f009 feef 	bl	800b0dc <osTimerNew>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <TimeEvent_arm+0x188>)
 8001302:	6013      	str	r3, [r2, #0]
        ASSERT(ms_timer_inst != NULL);
 8001304:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <TimeEvent_arm+0x188>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d118      	bne.n	800133e <TimeEvent_arm+0xce>
 800130c:	f005 f876 	bl	80063fc <HAL_GetTick>
 8001310:	6178      	str	r0, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <TimeEvent_arm+0x170>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0999      	lsrs	r1, r3, #6
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <TimeEvent_arm+0x170>)
 8001320:	fba2 0203 	umull	r0, r2, r2, r3
 8001324:	0992      	lsrs	r2, r2, #6
 8001326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132a:	fb00 f202 	mul.w	r2, r0, r2
 800132e:	1a9a      	subs	r2, r3, r2
 8001330:	236c      	movs	r3, #108	; 0x6c
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <TimeEvent_arm+0x18c>)
 8001336:	4832      	ldr	r0, [pc, #200]	; (8001400 <TimeEvent_arm+0x190>)
 8001338:	f003 fac2 	bl	80048c0 <printf_>
 800133c:	e7fe      	b.n	800133c <TimeEvent_arm+0xcc>
        LOGI(TAG, "Starting 1 s periodic timer.");
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <TimeEvent_arm+0x168>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01c      	beq.n	8001380 <TimeEvent_arm+0x110>
 8001346:	f005 f859 	bl	80063fc <HAL_GetTick>
 800134a:	6238      	str	r0, [r7, #32]
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <TimeEvent_arm+0x16c>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <TimeEvent_arm+0x170>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0999      	lsrs	r1, r3, #6
 800135a:	6a3a      	ldr	r2, [r7, #32]
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <TimeEvent_arm+0x170>)
 800135e:	fba3 4302 	umull	r4, r3, r3, r2
 8001362:	099b      	lsrs	r3, r3, #6
 8001364:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001368:	fb04 f303 	mul.w	r3, r4, r3
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <TimeEvent_arm+0x16c>)
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	9201      	str	r2, [sp, #4]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	460b      	mov	r3, r1
 8001378:	4a22      	ldr	r2, [pc, #136]	; (8001404 <TimeEvent_arm+0x194>)
 800137a:	2103      	movs	r1, #3
 800137c:	f000 ff32 	bl	80021e4 <log_printf>
        osStatus_t err = osTimerStart(ms_timer_inst, 1000);
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <TimeEvent_arm+0x188>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001388:	4618      	mov	r0, r3
 800138a:	f009 ff23 	bl	800b1d4 <osTimerStart>
 800138e:	61f8      	str	r0, [r7, #28]
        ASSERT(err == osOK);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d018      	beq.n	80013c8 <TimeEvent_arm+0x158>
 8001396:	f005 f831 	bl	80063fc <HAL_GetTick>
 800139a:	61b8      	str	r0, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <TimeEvent_arm+0x170>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0999      	lsrs	r1, r3, #6
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <TimeEvent_arm+0x170>)
 80013aa:	fba2 0203 	umull	r0, r2, r2, r3
 80013ae:	0992      	lsrs	r2, r2, #6
 80013b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b4:	fb00 f202 	mul.w	r2, r0, r2
 80013b8:	1a9a      	subs	r2, r3, r2
 80013ba:	236f      	movs	r3, #111	; 0x6f
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <TimeEvent_arm+0x18c>)
 80013c0:	480f      	ldr	r0, [pc, #60]	; (8001400 <TimeEvent_arm+0x190>)
 80013c2:	f003 fa7d 	bl	80048c0 <printf_>
 80013c6:	e7fe      	b.n	80013c6 <TimeEvent_arm+0x156>
        first_arm = true;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <TimeEvent_arm+0x180>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
    }
}
 80013ce:	bf00      	nop
 80013d0:	372c      	adds	r7, #44	; 0x2c
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000078 	.word	0x20000078
 80013dc:	20000018 	.word	0x20000018
 80013e0:	10624dd3 	.word	0x10624dd3
 80013e4:	0800e74c 	.word	0x0800e74c
 80013e8:	0800e758 	.word	0x0800e758
 80013ec:	0800e764 	.word	0x0800e764
 80013f0:	20000261 	.word	0x20000261
 80013f4:	08001555 	.word	0x08001555
 80013f8:	20004fcc 	.word	0x20004fcc
 80013fc:	0800e6fc 	.word	0x0800e6fc
 8001400:	0800e714 	.word	0x0800e714
 8001404:	0800e7a8 	.word	0x0800e7a8

08001408 <TimeEvent_disarm>:

void TimeEvent_disarm(TimeEvent *const time_evt)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b087      	sub	sp, #28
 800140c:	af02      	add	r7, sp, #8
 800140e:	6078      	str	r0, [r7, #4]
    LOGI(TAG, "Disarming time event.");
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <TimeEvent_disarm+0x60>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01c      	beq.n	8001452 <TimeEvent_disarm+0x4a>
 8001418:	f004 fff0 	bl	80063fc <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <TimeEvent_disarm+0x64>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <TimeEvent_disarm+0x68>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0999      	lsrs	r1, r3, #6
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <TimeEvent_disarm+0x68>)
 8001430:	fba3 4302 	umull	r4, r3, r3, r2
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800143a:	fb04 f303 	mul.w	r3, r4, r3
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <TimeEvent_disarm+0x64>)
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	9201      	str	r2, [sp, #4]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	460b      	mov	r3, r1
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <TimeEvent_disarm+0x6c>)
 800144c:	2103      	movs	r1, #3
 800144e:	f000 fec9 	bl	80021e4 <log_printf>
    osKernelLock(); // Data shared between threads and timer ISR.
 8001452:	f009 fcfb 	bl	800ae4c <osKernelLock>
    time_evt->timeout = 0U;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    osKernelUnlock();
 800145c:	f009 fd1c 	bl	800ae98 <osKernelUnlock>
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	20000078 	.word	0x20000078
 800146c:	20000018 	.word	0x20000018
 8001470:	10624dd3 	.word	0x10624dd3
 8001474:	0800e7e4 	.word	0x0800e7e4

08001478 <Active_event_loop>:
 *
 * @param argument Starting argument passed to function.
 *                 In this case, an Active *.
 */
static void Active_event_loop(void *argument)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08b      	sub	sp, #44	; 0x2c
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
    Active *ao = (Active *)argument;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	61fb      	str	r3, [r7, #28]

    /* Initialize the AO */
    static const Event initEvt = {.sig = INIT_SIG};
    ao->evt_handler(ao, &initEvt);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	492c      	ldr	r1, [pc, #176]	; (800153c <Active_event_loop+0xc4>)
 800148a:	69f8      	ldr	r0, [r7, #28]
 800148c:	4798      	blx	r3
    /* Event loop */
    while (1)
    {
        /* Get pointer to event object. */
        Event *evt;
        osStatus_t err = osMessageQueueGet(ao->queue_id, &evt, NULL, osWaitForever);
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	6858      	ldr	r0, [r3, #4]
 8001492:	f107 010c 	add.w	r1, r7, #12
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	2200      	movs	r2, #0
 800149c:	f009 ffd2 	bl	800b444 <osMessageQueueGet>
 80014a0:	61b8      	str	r0, [r7, #24]
        LOGI(TAG, "Event received.");
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <Active_event_loop+0xc8>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01c      	beq.n	80014e4 <Active_event_loop+0x6c>
 80014aa:	f004 ffa7 	bl	80063fc <HAL_GetTick>
 80014ae:	6178      	str	r0, [r7, #20]
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <Active_event_loop+0xcc>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <Active_event_loop+0xd0>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0999      	lsrs	r1, r3, #6
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <Active_event_loop+0xd0>)
 80014c2:	fba3 4302 	umull	r4, r3, r3, r2
 80014c6:	099b      	lsrs	r3, r3, #6
 80014c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80014cc:	fb04 f303 	mul.w	r3, r4, r3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <Active_event_loop+0xcc>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	9201      	str	r2, [sp, #4]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	460b      	mov	r3, r1
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <Active_event_loop+0xd4>)
 80014de:	2103      	movs	r1, #3
 80014e0:	f000 fe80 	bl	80021e4 <log_printf>
        if (err != osOK)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d020      	beq.n	800152c <Active_event_loop+0xb4>
        {
            LOGE(TAG, "Message queue error.");
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <Active_event_loop+0xc8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01c      	beq.n	800152c <Active_event_loop+0xb4>
 80014f2:	f004 ff83 	bl	80063fc <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <Active_event_loop+0xcc>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <Active_event_loop+0xd0>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	0999      	lsrs	r1, r3, #6
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <Active_event_loop+0xd0>)
 800150a:	fba3 4302 	umull	r4, r3, r3, r2
 800150e:	099b      	lsrs	r3, r3, #6
 8001510:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001514:	fb04 f303 	mul.w	r3, r4, r3
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <Active_event_loop+0xcc>)
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	9201      	str	r2, [sp, #4]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	460b      	mov	r3, r1
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <Active_event_loop+0xd8>)
 8001526:	2101      	movs	r1, #1
 8001528:	f000 fe5c 	bl	80021e4 <log_printf>
        }

        /* Dispatch to event handler and run to completion. */
        ao->evt_handler(ao, evt);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4611      	mov	r1, r2
 8001534:	69f8      	ldr	r0, [r7, #28]
 8001536:	4798      	blx	r3
    {
 8001538:	e7a9      	b.n	800148e <Active_event_loop+0x16>
 800153a:	bf00      	nop
 800153c:	0800f94c 	.word	0x0800f94c
 8001540:	20000078 	.word	0x20000078
 8001544:	20000018 	.word	0x20000018
 8001548:	10624dd3 	.word	0x10624dd3
 800154c:	0800e818 	.word	0x0800e818
 8001550:	0800e844 	.word	0x0800e844

08001554 <TimeEvent_tick>:
 *
 * @note This function should be called from within a 1 s timer ISR
 *       or using a 1 s OS-specific software timer.
 */
static void TimeEvent_tick(void *argument)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
 800155a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0U; i < num_time_events; ++i)
 800155c:	2300      	movs	r3, #0
 800155e:	75fb      	strb	r3, [r7, #23]
 8001560:	e03b      	b.n	80015da <TimeEvent_tick+0x86>
    {
        TimeEvent *const t = time_events[i];
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <TimeEvent_tick+0x9c>)
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        ASSERT(t);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <TimeEvent_tick+0x50>
 8001572:	f004 ff43 	bl	80063fc <HAL_GetTick>
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <TimeEvent_tick+0xa0>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	0999      	lsrs	r1, r3, #6
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <TimeEvent_tick+0xa0>)
 8001586:	fba2 0203 	umull	r0, r2, r2, r3
 800158a:	0992      	lsrs	r2, r2, #6
 800158c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001590:	fb00 f202 	mul.w	r2, r0, r2
 8001594:	1a9a      	subs	r2, r3, r2
 8001596:	23ad      	movs	r3, #173	; 0xad
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <TimeEvent_tick+0xa4>)
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <TimeEvent_tick+0xa8>)
 800159e:	f003 f98f 	bl	80048c0 <printf_>
 80015a2:	e7fe      	b.n	80015a2 <TimeEvent_tick+0x4e>

        if (t->timeout > 0U)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <TimeEvent_tick+0x80>
        {
            t->timeout = t->timeout - 1; // Down-counting timer.
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	1e5a      	subs	r2, r3, #1
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
            if (t->timeout == 0U)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <TimeEvent_tick+0x80>
            {
                Active_post(t->ao, &(t->base));
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fdf2 	bl	80011b0 <Active_post>
                t->timeout = t->reload;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0U; i < num_time_events; ++i)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	3301      	adds	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <TimeEvent_tick+0xac>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	7dfa      	ldrb	r2, [r7, #23]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3be      	bcc.n	8001562 <TimeEvent_tick+0xe>
            }
        }
    }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000238 	.word	0x20000238
 80015f4:	10624dd3 	.word	0x10624dd3
 80015f8:	0800e6fc 	.word	0x0800e6fc
 80015fc:	0800e714 	.word	0x0800e714
 8001600:	20000260 	.word	0x20000260

08001604 <cmd_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t cmd_init(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af02      	add	r7, sp, #8
    Active_ctor((Active *)&cmd_ao, (EventHandler)&Cmd_Event_Handler); // Call base active object constructor.
 800160a:	4919      	ldr	r1, [pc, #100]	; (8001670 <cmd_init+0x6c>)
 800160c:	4819      	ldr	r0, [pc, #100]	; (8001674 <cmd_init+0x70>)
 800160e:	f7ff fd71 	bl	80010f4 <Active_ctor>
    cmd_base = &(cmd_ao.base);
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <cmd_init+0x74>)
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <cmd_init+0x70>)
 8001616:	601a      	str	r2, [r3, #0]
    memset(cmd_ao.cmd_buf, 0, CONSOLE_CMD_BUF_SIZE); // Initialize private variables.
 8001618:	2228      	movs	r2, #40	; 0x28
 800161a:	2100      	movs	r1, #0
 800161c:	4817      	ldr	r0, [pc, #92]	; (800167c <cmd_init+0x78>)
 800161e:	f00c fe85 	bl	800e32c <memset>
    LOGI(TAG, "Initialized command.");
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <cmd_init+0x7c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d01c      	beq.n	8001664 <cmd_init+0x60>
 800162a:	f004 fee7 	bl	80063fc <HAL_GetTick>
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <cmd_init+0x80>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <cmd_init+0x84>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0999      	lsrs	r1, r3, #6
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <cmd_init+0x84>)
 8001642:	fba3 4302 	umull	r4, r3, r3, r2
 8001646:	099b      	lsrs	r3, r3, #6
 8001648:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800164c:	fb04 f303 	mul.w	r3, r4, r3
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <cmd_init+0x80>)
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	460b      	mov	r3, r1
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <cmd_init+0x88>)
 800165e:	2103      	movs	r1, #3
 8001660:	f000 fdc0 	bl	80021e4 <log_printf>
    return MOD_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	08001d39 	.word	0x08001d39
 8001674:	2000028c 	.word	0x2000028c
 8001678:	20004fd0 	.word	0x20004fd0
 800167c:	20000298 	.word	0x20000298
 8001680:	20000078 	.word	0x20000078
 8001684:	2000001c 	.word	0x2000001c
 8001688:	10624dd3 	.word	0x10624dd3
 800168c:	0800e87c 	.word	0x0800e87c

08001690 <cmd_start>:

mod_err_t cmd_start()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    static const osThreadAttr_t thread_attr = {.stack_size = CMD_THREAD_SIZE};
    return Active_start((Active *)&cmd_ao, &thread_attr, CMD_EVENT_MSG_COUNT, NULL);
 8001694:	2300      	movs	r3, #0
 8001696:	2205      	movs	r2, #5
 8001698:	4903      	ldr	r1, [pc, #12]	; (80016a8 <cmd_start+0x18>)
 800169a:	4804      	ldr	r0, [pc, #16]	; (80016ac <cmd_start+0x1c>)
 800169c:	f7ff fd42 	bl	8001124 <Active_start>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	0800f950 	.word	0x0800f950
 80016ac:	2000028c 	.word	0x2000028c

080016b0 <cmd_register>:

mod_err_t cmd_register(const cmd_client_info *_client_info)
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af04      	add	r7, sp, #16
 80016b6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e044      	b.n	8001748 <cmd_register+0x98>
    {
        if (client_infos[i] == NULL || strcasecmp(client_infos[i]->client_name, _client_info->client_name) == 0)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	4a25      	ldr	r2, [pc, #148]	; (8001758 <cmd_register+0xa8>)
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00d      	beq.n	80016e6 <cmd_register+0x36>
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <cmd_register+0xa8>)
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f00c fee8 	bl	800e4b0 <strcasecmp>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d12d      	bne.n	8001742 <cmd_register+0x92>
        {
            client_infos[i] = _client_info;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	491b      	ldr	r1, [pc, #108]	; (8001758 <cmd_register+0xa8>)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            LOGI(TAG, "Registered commands for %s module", client_infos[i]->client_name);
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <cmd_register+0xac>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d022      	beq.n	800173e <cmd_register+0x8e>
 80016f8:	f004 fe80 	bl	80063fc <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <cmd_register+0xb0>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <cmd_register+0xb4>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	099c      	lsrs	r4, r3, #6
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <cmd_register+0xb4>)
 8001710:	fba3 1302 	umull	r1, r3, r3, r2
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <cmd_register+0xb0>)
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	7bf9      	ldrb	r1, [r7, #15]
 8001726:	4d0c      	ldr	r5, [pc, #48]	; (8001758 <cmd_register+0xa8>)
 8001728:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800172c:	6809      	ldr	r1, [r1, #0]
 800172e:	9102      	str	r1, [sp, #8]
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4623      	mov	r3, r4
 8001736:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <cmd_register+0xb8>)
 8001738:	2103      	movs	r1, #3
 800173a:	f000 fd53 	bl	80021e4 <log_printf>
            return MOD_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e006      	b.n	8001750 <cmd_register+0xa0>
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3301      	adds	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b09      	cmp	r3, #9
 800174c:	d9b7      	bls.n	80016be <cmd_register+0xe>
        }
    }
    return MOD_ERR_RESOURCE;
 800174e:	2303      	movs	r3, #3
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	20000264 	.word	0x20000264
 800175c:	20000078 	.word	0x20000078
 8001760:	2000001c 	.word	0x2000001c
 8001764:	10624dd3 	.word	0x10624dd3
 8001768:	0800e8b0 	.word	0x0800e8b0

0800176c <cmd_execute>:
 *
 * This function parses the command line and then executes the command,
 * typically by running a command function handler for a client.
 */
static mod_err_t cmd_execute(char *cmd_line)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b095      	sub	sp, #84	; 0x54
 8001770:	af04      	add	r7, sp, #16
 8001772:	6078      	str	r0, [r7, #4]
    LOGI(TAG, "Command received: %s", cmd_line);
 8001774:	4b30      	ldr	r3, [pc, #192]	; (8001838 <cmd_execute+0xcc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01e      	beq.n	80017ba <cmd_execute+0x4e>
 800177c:	f004 fe3e 	bl	80063fc <HAL_GetTick>
 8001780:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <cmd_execute+0xd0>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001788:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <cmd_execute+0xd4>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	099c      	lsrs	r4, r3, #6
 8001790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <cmd_execute+0xd4>)
 8001794:	fba3 1302 	umull	r1, r3, r3, r2
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a25      	ldr	r2, [pc, #148]	; (800183c <cmd_execute+0xd0>)
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	9102      	str	r1, [sp, #8]
 80017ac:	9201      	str	r2, [sp, #4]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	4623      	mov	r3, r4
 80017b2:	4a24      	ldr	r2, [pc, #144]	; (8001844 <cmd_execute+0xd8>)
 80017b4:	2103      	movs	r1, #3
 80017b6:	f000 fd15 	bl	80021e4 <log_printf>
    uint32_t num_tokens = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
    const char *tokens[CMD_MAX_TOKENS] = {0}; // Store individual tokens as strings.
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2228      	movs	r2, #40	; 0x28
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00c fdb0 	bl	800e32c <memset>

    /* Tokenize command line */
    mod_err_t err = tokenize(cmd_line, tokens, &num_tokens);
 80017cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f836 	bl	8001848 <tokenize>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 80017e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <cmd_execute+0x84>
    {
        return err;
 80017ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80017ee:	e01f      	b.n	8001830 <cmd_execute+0xc4>
    }

    /* If there are no tokens, nothing to do. */
    if (num_tokens == 0)
 80017f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <cmd_execute+0x8e>
    {
        return MOD_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e01a      	b.n	8001830 <cmd_execute+0xc4>
    }

    /* Handle help/? command. */
    err = help_handler(tokens);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8a6 	bl	8001950 <help_handler>
 8001804:	4603      	mov	r3, r0
 8001806:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err != MOD_DID_NOTHING)
 800180a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d002      	beq.n	8001818 <cmd_execute+0xac>
    {
        return err;
 8001812:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001816:	e00b      	b.n	8001830 <cmd_execute+0xc4>
    }

    err = client_command_handler(tokens, num_tokens);
 8001818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f91f 	bl	8001a64 <client_command_handler>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return err;
 800182c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8001830:	4618      	mov	r0, r3
 8001832:	3744      	adds	r7, #68	; 0x44
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	20000078 	.word	0x20000078
 800183c:	2000001c 	.word	0x2000001c
 8001840:	10624dd3 	.word	0x10624dd3
 8001844:	0800e9d4 	.word	0x0800e9d4

08001848 <tokenize>:
 * @return MOD_OK if successful, "MOD_ERR_" otherwise.
 * 
 * Tokens include name of client, command, and arguments passed.
 */
static inline mod_err_t tokenize(char *str_to_tokenize, const char **tokens, uint32_t *num_tokens)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b08b      	sub	sp, #44	; 0x2c
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
    char *ptr = str_to_tokenize;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	61fb      	str	r3, [r7, #28]
    uint32_t token_count = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]

    /* Iterate through each token. */
    while (1)
    {
        /* Find start of token. */
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 800185c:	e002      	b.n	8001864 <tokenize+0x1c>
        {
            ptr++;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <tokenize+0x38>
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <tokenize+0xf4>)
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <tokenize+0x16>
        }

        if (*ptr == '\0') // Found end of line.
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d04e      	beq.n	8001926 <tokenize+0xde>
        {
            break;
        }
        else
        {
            if (token_count >= CMD_MAX_TOKENS)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b09      	cmp	r3, #9
 800188c:	d922      	bls.n	80018d4 <tokenize+0x8c>
            {
                LOGW(TAG, "Too many tokens");
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <tokenize+0xf8>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01c      	beq.n	80018d0 <tokenize+0x88>
 8001896:	f004 fdb1 	bl	80063fc <HAL_GetTick>
 800189a:	6178      	str	r0, [r7, #20]
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <tokenize+0xfc>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	4a29      	ldr	r2, [pc, #164]	; (8001948 <tokenize+0x100>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0999      	lsrs	r1, r3, #6
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <tokenize+0x100>)
 80018ae:	fba3 4302 	umull	r4, r3, r3, r2
 80018b2:	099b      	lsrs	r3, r3, #6
 80018b4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80018b8:	fb04 f303 	mul.w	r3, r4, r3
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a21      	ldr	r2, [pc, #132]	; (8001944 <tokenize+0xfc>)
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	9201      	str	r2, [sp, #4]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	460b      	mov	r3, r1
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <tokenize+0x104>)
 80018ca:	2102      	movs	r1, #2
 80018cc:	f000 fc8a 	bl	80021e4 <log_printf>
                return MOD_ERR_BAD_CMD;
 80018d0:	2304      	movs	r3, #4
 80018d2:	e02f      	b.n	8001934 <tokenize+0xec>
            }
            else
            {
                /* Record pointer to start of token, then find end of token. */
                tokens[token_count] = ptr;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	601a      	str	r2, [r3, #0]
                ptr++;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3301      	adds	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
                token_count++;
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 80018ec:	e002      	b.n	80018f4 <tokenize+0xac>
                {
                    ptr++;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <tokenize+0xc8>
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <tokenize+0xf4>)
 8001904:	4413      	add	r3, r2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ee      	beq.n	80018ee <tokenize+0xa6>
                }
                if (*ptr != '\0')
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <tokenize+0xe2>
                {
                    *ptr = '\0'; // Terminate end of token.
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
                    ptr++;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001924:	e79e      	b.n	8001864 <tokenize+0x1c>
            break;
 8001926:	bf00      	nop
 8001928:	e000      	b.n	800192c <tokenize+0xe4>
                }
                else
                {
                    break; // Found end of line ('\0'), no more tokens.
 800192a:	bf00      	nop
                }
            }
        }
    }

    *num_tokens = token_count;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	601a      	str	r2, [r3, #0]
    return MOD_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3724      	adds	r7, #36	; 0x24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	0800fb50 	.word	0x0800fb50
 8001940:	20000078 	.word	0x20000078
 8001944:	2000001c 	.word	0x2000001c
 8001948:	10624dd3 	.word	0x10624dd3
 800194c:	0800ea08 	.word	0x0800ea08

08001950 <help_handler>:
 *         otherwise a "MOD_ERR" value.
 * 
 * Iterates through each client infos 
 */
static inline mod_err_t help_handler(const char **tokens)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    if (strcasecmp("help", tokens[0]) == 0 || strcasecmp("?", tokens[0]) == 0)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4837      	ldr	r0, [pc, #220]	; (8001a3c <help_handler+0xec>)
 8001960:	f00c fda6 	bl	800e4b0 <strcasecmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d008      	beq.n	800197c <help_handler+0x2c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4833      	ldr	r0, [pc, #204]	; (8001a40 <help_handler+0xf0>)
 8001972:	f00c fd9d 	bl	800e4b0 <strcasecmp>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d159      	bne.n	8001a30 <help_handler+0xe0>
    {
        /* Iterate through commands of each client. */
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	75fb      	strb	r3, [r7, #23]
 8001980:	e04b      	b.n	8001a1a <help_handler+0xca>
        {
            const cmd_client_info *ci = client_infos[i];
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <help_handler+0xf4>)
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]

            LOG("%s (", ci->client_name);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	482d      	ldr	r0, [pc, #180]	; (8001a48 <help_handler+0xf8>)
 8001994:	f002 ff94 	bl	80048c0 <printf_>

            if (ci->num_u16_pms > 0 && ci->num_cmds == 0)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <help_handler+0x60>
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <help_handler+0x60>
            {
                /* If client provided pm info only, display pm command. */
                LOG("pm)\r\n");
 80019a8:	4828      	ldr	r0, [pc, #160]	; (8001a4c <help_handler+0xfc>)
 80019aa:	f002 ff89 	bl	80048c0 <printf_>
                continue;
 80019ae:	e031      	b.n	8001a14 <help_handler+0xc4>
            }
            else if (ci->num_cmds == 0)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d02c      	beq.n	8001a12 <help_handler+0xc2>
            {
                continue;
            }
            else
            {
                uint8_t i2 = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	75bb      	strb	r3, [r7, #22]
                for (i2 = 0; i2 < ci->num_cmds; i2++)
 80019bc:	2300      	movs	r3, #0
 80019be:	75bb      	strb	r3, [r7, #22]
 80019c0:	e017      	b.n	80019f2 <help_handler+0xa2>
                {
                    const cmd_cmd_info *cci = &(ci->cmds[i2]);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	7dba      	ldrb	r2, [r7, #22]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	60fb      	str	r3, [r7, #12]
                    LOG("%s%s", i2 == 0 ? "" : ", ", cci->cmd_name);
 80019d4:	7dbb      	ldrb	r3, [r7, #22]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <help_handler+0x8e>
 80019da:	491d      	ldr	r1, [pc, #116]	; (8001a50 <help_handler+0x100>)
 80019dc:	e000      	b.n	80019e0 <help_handler+0x90>
 80019de:	491d      	ldr	r1, [pc, #116]	; (8001a54 <help_handler+0x104>)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <help_handler+0x108>)
 80019e8:	f002 ff6a 	bl	80048c0 <printf_>
                for (i2 = 0; i2 < ci->num_cmds; i2++)
 80019ec:	7dbb      	ldrb	r3, [r7, #22]
 80019ee:	3301      	adds	r3, #1
 80019f0:	75bb      	strb	r3, [r7, #22]
 80019f2:	7dba      	ldrb	r2, [r7, #22]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d3e2      	bcc.n	80019c2 <help_handler+0x72>
                }
                if (ci->num_u16_pms > 0)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <help_handler+0xba>
                {
                    LOG(", pm");
 8001a04:	4815      	ldr	r0, [pc, #84]	; (8001a5c <help_handler+0x10c>)
 8001a06:	f002 ff5b 	bl	80048c0 <printf_>
                }
                LOG(")\r\n");
 8001a0a:	4815      	ldr	r0, [pc, #84]	; (8001a60 <help_handler+0x110>)
 8001a0c:	f002 ff58 	bl	80048c0 <printf_>
 8001a10:	e000      	b.n	8001a14 <help_handler+0xc4>
                continue;
 8001a12:	bf00      	nop
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	3301      	adds	r3, #1
 8001a18:	75fb      	strb	r3, [r7, #23]
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <help_handler+0xf4>)
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <help_handler+0xdc>
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d9aa      	bls.n	8001982 <help_handler+0x32>
            }
        }

        return MOD_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <help_handler+0xe2>
    }

    return MOD_DID_NOTHING; // Not a top-level help command.
 8001a30:	230a      	movs	r3, #10
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	0800ea34 	.word	0x0800ea34
 8001a40:	0800ea3c 	.word	0x0800ea3c
 8001a44:	20000264 	.word	0x20000264
 8001a48:	0800ea40 	.word	0x0800ea40
 8001a4c:	0800ea4c 	.word	0x0800ea4c
 8001a50:	0800ea5c 	.word	0x0800ea5c
 8001a54:	0800ea60 	.word	0x0800ea60
 8001a58:	0800ea64 	.word	0x0800ea64
 8001a5c:	0800ea70 	.word	0x0800ea70
 8001a60:	0800ea7c 	.word	0x0800ea7c

08001a64 <client_command_handler>:
 * @return MOD_OK if successful, 
 *         MOD_DID_NOTHING if not a client command, 
 *         otherwise a "MOD_ERR" value.
 */
static inline mod_err_t client_command_handler(const char **tokens, uint32_t num_tokens)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	77fb      	strb	r3, [r7, #31]
 8001a72:	e11c      	b.n	8001cae <client_command_handler+0x24a>
    {
        const cmd_client_info *ci = client_infos[i];
 8001a74:	7ffb      	ldrb	r3, [r7, #31]
 8001a76:	4aa2      	ldr	r2, [pc, #648]	; (8001d00 <client_command_handler+0x29c>)
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	617b      	str	r3, [r7, #20]

        /* Look for correct client first */
        if (strcasecmp(tokens[0], ci->client_name) != 0)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f00c fd11 	bl	800e4b0 <strcasecmp>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <client_command_handler+0x38>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
 8001a96:	3301      	adds	r3, #1
 8001a98:	77fb      	strb	r3, [r7, #31]
 8001a9a:	e108      	b.n	8001cae <client_command_handler+0x24a>
        {
            continue;
        }

        /* If there is no command with client, assume they want help. */
        if (num_tokens == 1)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d103      	bne.n	8001aaa <client_command_handler+0x46>
        {
            tokens[1] = "help";
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	4a97      	ldr	r2, [pc, #604]	; (8001d04 <client_command_handler+0x2a0>)
 8001aa8:	601a      	str	r2, [r3, #0]
        }

        /* Handle help command directly. */
        if (strcasecmp(tokens[1], "help") == 0 || strcasecmp(tokens[1], "?") == 0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3304      	adds	r3, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4994      	ldr	r1, [pc, #592]	; (8001d04 <client_command_handler+0x2a0>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00c fcfc 	bl	800e4b0 <strcasecmp>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <client_command_handler+0x6e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4990      	ldr	r1, [pc, #576]	; (8001d08 <client_command_handler+0x2a4>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00c fcf2 	bl	800e4b0 <strcasecmp>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d128      	bne.n	8001b24 <client_command_handler+0xc0>
        {
            /* Print out all commands associated with client */
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	77bb      	strb	r3, [r7, #30]
 8001ad6:	e014      	b.n	8001b02 <client_command_handler+0x9e>
            {
                const cmd_cmd_info *cci = &(ci->cmds[i2]);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	6899      	ldr	r1, [r3, #8]
 8001adc:	7fba      	ldrb	r2, [r7, #30]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	60fb      	str	r3, [r7, #12]
                LOG("%s %s: %s\r\n", ci->client_name, cci->cmd_name, cci->help);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4885      	ldr	r0, [pc, #532]	; (8001d0c <client_command_handler+0x2a8>)
 8001af8:	f002 fee2 	bl	80048c0 <printf_>
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001afc:	7fbb      	ldrb	r3, [r7, #30]
 8001afe:	3301      	adds	r3, #1
 8001b00:	77bb      	strb	r3, [r7, #30]
 8001b02:	7fba      	ldrb	r2, [r7, #30]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3e5      	bcc.n	8001ad8 <client_command_handler+0x74>
            }
            /* If client provided pm info, print help for pm command also. */
            if (ci->num_u16_pms > 0)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <client_command_handler+0xbc>
            {
                LOG("%s pm: get or clear performance measurements, "
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	487d      	ldr	r0, [pc, #500]	; (8001d10 <client_command_handler+0x2ac>)
 8001b1c:	f002 fed0 	bl	80048c0 <printf_>
                    "args: [clear] \r\n",
                    ci->client_name);
            }

            return MOD_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e0e8      	b.n	8001cf6 <client_command_handler+0x292>
        }

        /* Handle pm command directly. */
        if (strcasecmp(tokens[1], "pm") == 0)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3304      	adds	r3, #4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	497a      	ldr	r1, [pc, #488]	; (8001d14 <client_command_handler+0x2b0>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00c fcbf 	bl	800e4b0 <strcasecmp>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d150      	bne.n	8001bda <client_command_handler+0x176>
        {
            if (ci->num_u16_pms > 0)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d04a      	beq.n	8001bd6 <client_command_handler+0x172>
            {
                bool clear = (num_tokens >= 3 && strcasecmp(tokens[2], "clear") == 0);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d90b      	bls.n	8001b5e <client_command_handler+0xfa>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3308      	adds	r3, #8
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4972      	ldr	r1, [pc, #456]	; (8001d18 <client_command_handler+0x2b4>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00c fcae 	bl	800e4b0 <strcasecmp>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <client_command_handler+0xfa>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <client_command_handler+0xfc>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	74fb      	strb	r3, [r7, #19]
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	74fb      	strb	r3, [r7, #19]
                if (clear)
 8001b6a:	7cfb      	ldrb	r3, [r7, #19]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <client_command_handler+0x11a>
                {
                    LOG("Clearing %s performance measurements\r\n", ci->client_name);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4869      	ldr	r0, [pc, #420]	; (8001d1c <client_command_handler+0x2b8>)
 8001b78:	f002 fea2 	bl	80048c0 <printf_>
 8001b7c:	e005      	b.n	8001b8a <client_command_handler+0x126>
                }
                else
                {
                    LOG("%s pms:\r\n", ci->client_name);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4866      	ldr	r0, [pc, #408]	; (8001d20 <client_command_handler+0x2bc>)
 8001b86:	f002 fe9b 	bl	80048c0 <printf_>
                }
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	777b      	strb	r3, [r7, #29]
 8001b8e:	e01d      	b.n	8001bcc <client_command_handler+0x168>
                {
                    if (clear)
 8001b90:	7cfb      	ldrb	r3, [r7, #19]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <client_command_handler+0x142>
                    {
                        ci->u16_pms[i2] = 0;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	7f7b      	ldrb	r3, [r7, #29]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	e00f      	b.n	8001bc6 <client_command_handler+0x162>
                    }
                    else
                    {
                        LOG("%s: %d\r\n", ci->u16_pm_names[i2], ci->u16_pms[i2]);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	7f7b      	ldrb	r3, [r7, #29]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	7f7b      	ldrb	r3, [r7, #29]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4858      	ldr	r0, [pc, #352]	; (8001d24 <client_command_handler+0x2c0>)
 8001bc2:	f002 fe7d 	bl	80048c0 <printf_>
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 8001bc6:	7f7b      	ldrb	r3, [r7, #29]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	777b      	strb	r3, [r7, #29]
 8001bcc:	7f7a      	ldrb	r2, [r7, #29]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d3dc      	bcc.n	8001b90 <client_command_handler+0x12c>
                    }
                }
            }

            return MOD_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e08d      	b.n	8001cf6 <client_command_handler+0x292>
        }

        /* Look for command within client. */
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	773b      	strb	r3, [r7, #28]
 8001bde:	e056      	b.n	8001c8e <client_command_handler+0x22a>
        {
            if (strcasecmp(tokens[1], ci->cmds[i2].cmd_name) == 0)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3304      	adds	r3, #4
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	6899      	ldr	r1, [r3, #8]
 8001bea:	7f3a      	ldrb	r2, [r7, #28]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f00c fc59 	bl	800e4b0 <strcasecmp>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d141      	bne.n	8001c88 <client_command_handler+0x224>
            {
                if (num_tokens == 3 && (strcasecmp(tokens[2], "help") == 0 || strcasecmp(tokens[2], "?") == 0))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d12d      	bne.n	8001c66 <client_command_handler+0x202>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	493c      	ldr	r1, [pc, #240]	; (8001d04 <client_command_handler+0x2a0>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00c fc4c 	bl	800e4b0 <strcasecmp>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <client_command_handler+0x1ce>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3308      	adds	r3, #8
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4938      	ldr	r1, [pc, #224]	; (8001d08 <client_command_handler+0x2a4>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f00c fc42 	bl	800e4b0 <strcasecmp>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d119      	bne.n	8001c66 <client_command_handler+0x202>
                {
                    LOG("%s %s: %s\r\n", ci->client_name, ci->cmds[i2].cmd_name, ci->cmds[i2].help);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	7f3a      	ldrb	r2, [r7, #28]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	681c      	ldr	r4, [r3, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	7f3a      	ldrb	r2, [r7, #28]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	482b      	ldr	r0, [pc, #172]	; (8001d0c <client_command_handler+0x2a8>)
 8001c60:	f002 fe2e 	bl	80048c0 <printf_>
 8001c64:	e00e      	b.n	8001c84 <client_command_handler+0x220>
                }
                else
                {
                    ci->cmds[i2].cb(num_tokens - 2, tokens + 2); // Ignore client and command tokens.
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	6899      	ldr	r1, [r3, #8]
 8001c6a:	7f3a      	ldrb	r2, [r7, #28]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	1e90      	subs	r0, r2, #2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	4611      	mov	r1, r2
 8001c82:	4798      	blx	r3
                }
                return MOD_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e036      	b.n	8001cf6 <client_command_handler+0x292>
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001c88:	7f3b      	ldrb	r3, [r7, #28]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	773b      	strb	r3, [r7, #28]
 8001c8e:	7f3a      	ldrb	r2, [r7, #28]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d3a3      	bcc.n	8001be0 <client_command_handler+0x17c>
            }
        }

        LOG("No such command (%s %s)\r\n", tokens[0], tokens[1]);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4820      	ldr	r0, [pc, #128]	; (8001d28 <client_command_handler+0x2c4>)
 8001ca6:	f002 fe0b 	bl	80048c0 <printf_>
        return MOD_ERR_BAD_CMD;
 8001caa:	2304      	movs	r3, #4
 8001cac:	e023      	b.n	8001cf6 <client_command_handler+0x292>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <client_command_handler+0x29c>)
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <client_command_handler+0x25e>
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	f67f aed9 	bls.w	8001a74 <client_command_handler+0x10>
    }

    /* Could not find client */
    LOG("No such command: ");
 8001cc2:	481a      	ldr	r0, [pc, #104]	; (8001d2c <client_command_handler+0x2c8>)
 8001cc4:	f002 fdfc 	bl	80048c0 <printf_>
    for (uint8_t i = 0; i < num_tokens; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	76fb      	strb	r3, [r7, #27]
 8001ccc:	e00b      	b.n	8001ce6 <client_command_handler+0x282>
    {
        LOG("%s ", tokens[i]);
 8001cce:	7efb      	ldrb	r3, [r7, #27]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4815      	ldr	r0, [pc, #84]	; (8001d30 <client_command_handler+0x2cc>)
 8001cdc:	f002 fdf0 	bl	80048c0 <printf_>
    for (uint8_t i = 0; i < num_tokens; i++)
 8001ce0:	7efb      	ldrb	r3, [r7, #27]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	76fb      	strb	r3, [r7, #27]
 8001ce6:	7efb      	ldrb	r3, [r7, #27]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d8ef      	bhi.n	8001cce <client_command_handler+0x26a>
    }
    LOG("\r\n");
 8001cee:	4811      	ldr	r0, [pc, #68]	; (8001d34 <client_command_handler+0x2d0>)
 8001cf0:	f002 fde6 	bl	80048c0 <printf_>
    return MOD_ERR_BAD_CMD;
 8001cf4:	2304      	movs	r3, #4
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000264 	.word	0x20000264
 8001d04:	0800ea34 	.word	0x0800ea34
 8001d08:	0800ea3c 	.word	0x0800ea3c
 8001d0c:	0800ea88 	.word	0x0800ea88
 8001d10:	0800ea9c 	.word	0x0800ea9c
 8001d14:	0800eae4 	.word	0x0800eae4
 8001d18:	0800eae8 	.word	0x0800eae8
 8001d1c:	0800eaf0 	.word	0x0800eaf0
 8001d20:	0800eb20 	.word	0x0800eb20
 8001d24:	0800eb34 	.word	0x0800eb34
 8001d28:	0800eb44 	.word	0x0800eb44
 8001d2c:	0800eb68 	.word	0x0800eb68
 8001d30:	0800eb84 	.word	0x0800eb84
 8001d34:	0800eb90 	.word	0x0800eb90

08001d38 <Cmd_Event_Handler>:
 *
 * @param ao Command active object.
 * @param evt Command event object.
 */
static void Cmd_Event_Handler(Cmd_Active *const ao, Cmd_Event const *const evt)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
    switch (evt->base.sig)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <Cmd_Event_Handler+0x18>
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d022      	beq.n	8001d94 <Cmd_Event_Handler+0x5c>
 8001d4e:	e02c      	b.n	8001daa <Cmd_Event_Handler+0x72>
    {
    case INIT_SIG:
        LOGI(TAG, "Command active object initialized.");
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <Cmd_Event_Handler+0xc4>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d04a      	beq.n	8001dee <Cmd_Event_Handler+0xb6>
 8001d58:	f004 fb50 	bl	80063fc <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <Cmd_Event_Handler+0xc8>)
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <Cmd_Event_Handler+0xcc>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0999      	lsrs	r1, r3, #6
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <Cmd_Event_Handler+0xcc>)
 8001d70:	fba3 4302 	umull	r4, r3, r3, r2
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001d7a:	fb04 f303 	mul.w	r3, r4, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <Cmd_Event_Handler+0xc8>)
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	9201      	str	r2, [sp, #4]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <Cmd_Event_Handler+0xd0>)
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	f000 fa29 	bl	80021e4 <log_printf>
        break;
 8001d92:	e02c      	b.n	8001dee <Cmd_Event_Handler+0xb6>
    case CMD_RX_SIG:
        /* Copy command line to avoid race conditions. */
        strncpy(cmd_ao.cmd_buf, evt->cmd_line, CONSOLE_CMD_BUF_SIZE);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2228      	movs	r2, #40	; 0x28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481b      	ldr	r0, [pc, #108]	; (8001e0c <Cmd_Event_Handler+0xd4>)
 8001d9e:	f00c fba3 	bl	800e4e8 <strncpy>
        cmd_execute(cmd_ao.cmd_buf);
 8001da2:	481a      	ldr	r0, [pc, #104]	; (8001e0c <Cmd_Event_Handler+0xd4>)
 8001da4:	f7ff fce2 	bl	800176c <cmd_execute>
        break;
 8001da8:	e024      	b.n	8001df4 <Cmd_Event_Handler+0xbc>
    default:
        LOGW(TAG, "Unknown event signal");
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <Cmd_Event_Handler+0xc4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01f      	beq.n	8001df2 <Cmd_Event_Handler+0xba>
 8001db2:	f004 fb23 	bl	80063fc <HAL_GetTick>
 8001db6:	60b8      	str	r0, [r7, #8]
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <Cmd_Event_Handler+0xc8>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <Cmd_Event_Handler+0xcc>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0999      	lsrs	r1, r3, #6
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <Cmd_Event_Handler+0xcc>)
 8001dca:	fba3 4302 	umull	r4, r3, r3, r2
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001dd4:	fb04 f303 	mul.w	r3, r4, r3
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <Cmd_Event_Handler+0xc8>)
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	9201      	str	r2, [sp, #4]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	460b      	mov	r3, r1
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <Cmd_Event_Handler+0xd8>)
 8001de6:	2102      	movs	r1, #2
 8001de8:	f000 f9fc 	bl	80021e4 <log_printf>
        break;
 8001dec:	e001      	b.n	8001df2 <Cmd_Event_Handler+0xba>
        break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <Cmd_Event_Handler+0xbc>
        break;
 8001df2:	bf00      	nop
    }
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	20000078 	.word	0x20000078
 8001e00:	2000001c 	.word	0x2000001c
 8001e04:	10624dd3 	.word	0x10624dd3
 8001e08:	0800eb9c 	.word	0x0800eb9c
 8001e0c:	20000298 	.word	0x20000298
 8001e10:	0800ebdc 	.word	0x0800ebdc

08001e14 <console_init>:
 * @brief Initialize console module instance.
 *
 * @return MOD_OK for success.
 */
mod_err_t console_init(void)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af02      	add	r7, sp, #8
    memset(&console, 0, sizeof(console));
 8001e1a:	223c      	movs	r2, #60	; 0x3c
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <console_init+0x5c>)
 8001e20:	f00c fa84 	bl	800e32c <memset>
    LOGI(TAG, "Initialized console.");
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <console_init+0x60>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01c      	beq.n	8001e66 <console_init+0x52>
 8001e2c:	f004 fae6 	bl	80063fc <HAL_GetTick>
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <console_init+0x64>)
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a10      	ldr	r2, [pc, #64]	; (8001e7c <console_init+0x68>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0999      	lsrs	r1, r3, #6
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <console_init+0x68>)
 8001e44:	fba3 4302 	umull	r4, r3, r3, r2
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001e4e:	fb04 f303 	mul.w	r3, r4, r3
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <console_init+0x64>)
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	9201      	str	r2, [sp, #4]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <console_init+0x6c>)
 8001e60:	2103      	movs	r1, #3
 8001e62:	f000 f9bf 	bl	80021e4 <log_printf>
    return MOD_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	200002c0 	.word	0x200002c0
 8001e74:	20000078 	.word	0x20000078
 8001e78:	20000020 	.word	0x20000020
 8001e7c:	10624dd3 	.word	0x10624dd3
 8001e80:	0800ec18 	.word	0x0800ec18

08001e84 <console_start>:

mod_err_t console_start(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af02      	add	r7, sp, #8
    /* Create OS objects */
    static const osThreadAttr_t thread_attr = {.stack_size = CONSOLE_THREAD_STACK_SIZE};
    console.console_thread_id = osThreadNew(Console_thread, NULL, &thread_attr);
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <console_start+0x78>)
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	481c      	ldr	r0, [pc, #112]	; (8001f00 <console_start+0x7c>)
 8001e90:	f009 f834 	bl	800aefc <osThreadNew>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <console_start+0x80>)
 8001e98:	6013      	str	r3, [r2, #0]
    console.console_queue_id = osMessageQueueNew(CONSOLE_MSG_QUEUE_SIZE, sizeof(char), NULL);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ea2:	f009 f9fc 	bl	800b29e <osMessageQueueNew>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <console_start+0x80>)
 8001eaa:	6053      	str	r3, [r2, #4]

    ASSERT(console.console_queue_id != NULL && console.console_thread_id != NULL);
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <console_start+0x80>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <console_start+0x38>
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <console_start+0x80>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d118      	bne.n	8001eee <console_start+0x6a>
 8001ebc:	f004 fa9e 	bl	80063fc <HAL_GetTick>
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <console_start+0x84>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0999      	lsrs	r1, r3, #6
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <console_start+0x84>)
 8001ed0:	fba2 0203 	umull	r0, r2, r2, r3
 8001ed4:	0992      	lsrs	r2, r2, #6
 8001ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eda:	fb00 f202 	mul.w	r2, r0, r2
 8001ede:	1a9a      	subs	r2, r3, r2
 8001ee0:	2360      	movs	r3, #96	; 0x60
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <console_start+0x88>)
 8001ee6:	480a      	ldr	r0, [pc, #40]	; (8001f10 <console_start+0x8c>)
 8001ee8:	f002 fcea 	bl	80048c0 <printf_>
 8001eec:	e7fe      	b.n	8001eec <console_start+0x68>

    uart_start();
 8001eee:	f004 f881 	bl	8005ff4 <uart_start>

    return MOD_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	0800f974 	.word	0x0800f974
 8001f00:	08001f49 	.word	0x08001f49
 8001f04:	200002c0 	.word	0x200002c0
 8001f08:	10624dd3 	.word	0x10624dd3
 8001f0c:	0800ec4c 	.word	0x0800ec4c
 8001f10:	0800ec64 	.word	0x0800ec64

08001f14 <console_post>:

mod_err_t console_post(char c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
    osStatus_t err = osMessageQueuePut(console.console_queue_id, &c, 0U, 0U);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <console_post+0x30>)
 8001f20:	6858      	ldr	r0, [r3, #4]
 8001f22:	1df9      	adds	r1, r7, #7
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	f009 fa2c 	bl	800b384 <osMessageQueuePut>
 8001f2c:	60f8      	str	r0, [r7, #12]
    if (err != osOK)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <console_post+0x24>
    {
        return MOD_ERR_TIMEOUT;
 8001f34:	2309      	movs	r3, #9
 8001f36:	e000      	b.n	8001f3a <console_post+0x26>
    }

    return MOD_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200002c0 	.word	0x200002c0

08001f48 <Console_thread>:

/**
 * @brief Console thread.
 */
static void Console_thread(void *argument)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	6078      	str	r0, [r7, #4]
    LOG(PROMPT);
 8001f50:	481c      	ldr	r0, [pc, #112]	; (8001fc4 <Console_thread+0x7c>)
 8001f52:	f002 fcb5 	bl	80048c0 <printf_>
    while (1)
    {
        /* Read character from message queue, then process character */
        char char_to_process = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
        osStatus_t status = osMessageQueueGet(console.console_queue_id, &char_to_process, NULL, osWaitForever);
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <Console_thread+0x80>)
 8001f5c:	6858      	ldr	r0, [r3, #4]
 8001f5e:	f107 010f 	add.w	r1, r7, #15
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	2200      	movs	r2, #0
 8001f68:	f009 fa6c 	bl	800b444 <osMessageQueueGet>
 8001f6c:	6178      	str	r0, [r7, #20]

        if (status != osOK)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d021      	beq.n	8001fb8 <Console_thread+0x70>
        {
            LOGE(TAG, "Could not read character from queue.");
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <Console_thread+0x84>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ec      	beq.n	8001f56 <Console_thread+0xe>
 8001f7c:	f004 fa3e 	bl	80063fc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <Console_thread+0x88>)
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <Console_thread+0x8c>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0999      	lsrs	r1, r3, #6
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <Console_thread+0x8c>)
 8001f94:	fba3 4302 	umull	r4, r3, r3, r2
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001f9e:	fb04 f303 	mul.w	r3, r4, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <Console_thread+0x88>)
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	9201      	str	r2, [sp, #4]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	460b      	mov	r3, r1
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <Console_thread+0x90>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	f000 f917 	bl	80021e4 <log_printf>
 8001fb6:	e7ce      	b.n	8001f56 <Console_thread+0xe>
        }
        else
        {
            console_process(char_to_process);
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f80e 	bl	8001fdc <console_process>
    {
 8001fc0:	e7c9      	b.n	8001f56 <Console_thread+0xe>
 8001fc2:	bf00      	nop
 8001fc4:	0800ec9c 	.word	0x0800ec9c
 8001fc8:	200002c0 	.word	0x200002c0
 8001fcc:	20000078 	.word	0x20000078
 8001fd0:	20000020 	.word	0x20000020
 8001fd4:	10624dd3 	.word	0x10624dd3
 8001fd8:	0800eca8 	.word	0x0800eca8

08001fdc <console_process>:
 * @param c Character to process.
 *
 * @return MOD_OK if successful, otherwise a "MOD_ERR" value.
 */
static mod_err_t console_process(char c)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]

    /* Execute command once Enter key is pressed. */
    if (c == '\n' || c == '\r')
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b0a      	cmp	r3, #10
 8001fea:	d002      	beq.n	8001ff2 <console_process+0x16>
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	2b0d      	cmp	r3, #13
 8001ff0:	d110      	bne.n	8002014 <console_process+0x38>
    {
        console.cmd_buf[console.num_cmd_buf_chars] = '\0'; // Signal end of command string.
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <console_process+0x11c>)
 8001ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <console_process+0x11c>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	735a      	strb	r2, [r3, #13]
        LOG("\r\n");
 8002000:	483e      	ldr	r0, [pc, #248]	; (80020fc <console_process+0x120>)
 8002002:	f002 fc5d 	bl	80048c0 <printf_>
        post_cmd_event();
 8002006:	f000 f891 	bl	800212c <post_cmd_event>
        console.num_cmd_buf_chars = 0;
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <console_process+0x11c>)
 800200c:	2200      	movs	r2, #0
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36
        return MOD_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	e06c      	b.n	80020ee <console_process+0x112>
    }
    /* Delete a character when Backspace key is pressed. */
    if (c == '\b' || c == '\x7f')
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d002      	beq.n	8002020 <console_process+0x44>
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2b7f      	cmp	r3, #127	; 0x7f
 800201e:	d10e      	bne.n	800203e <console_process+0x62>
    {
        if (console.num_cmd_buf_chars > 0)
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <console_process+0x11c>)
 8002022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <console_process+0x5e>
        {
            LOG("\x7f");
 8002028:	4835      	ldr	r0, [pc, #212]	; (8002100 <console_process+0x124>)
 800202a:	f002 fc49 	bl	80048c0 <printf_>
            console.num_cmd_buf_chars--; // "Overwrite" last character.
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <console_process+0x11c>)
 8002030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <console_process+0x11c>)
 8002038:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        return MOD_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e057      	b.n	80020ee <console_process+0x112>
    }
    /* Toggle logging on and off LOG_TOGGLE_CHAR key is pressed. */
    if (c == LOG_TOGGLE_CHAR)
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b09      	cmp	r3, #9
 8002042:	d10f      	bne.n	8002064 <console_process+0x88>
    {
        bool log_active = log_toggle();
 8002044:	f000 f8bc 	bl	80021c0 <log_toggle>
 8002048:	4603      	mov	r3, r0
 800204a:	72fb      	strb	r3, [r7, #11]
        LOG("<Logging %s>\r\n", log_active ? "on" : "off");
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <console_process+0x7a>
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <console_process+0x128>)
 8002054:	e000      	b.n	8002058 <console_process+0x7c>
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <console_process+0x12c>)
 8002058:	4619      	mov	r1, r3
 800205a:	482c      	ldr	r0, [pc, #176]	; (800210c <console_process+0x130>)
 800205c:	f002 fc30 	bl	80048c0 <printf_>
        return MOD_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e044      	b.n	80020ee <console_process+0x112>
    }
    /* Echo the character back. */
    if (isprint(c))
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	3301      	adds	r3, #1
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <console_process+0x134>)
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03a      	beq.n	80020ec <console_process+0x110>
    {
        if (console.num_cmd_buf_chars < (CONSOLE_CMD_BUF_SIZE - 1))
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <console_process+0x11c>)
 8002078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207a:	2b26      	cmp	r3, #38	; 0x26
 800207c:	d810      	bhi.n	80020a0 <console_process+0xc4>
        {
            console.cmd_buf[console.num_cmd_buf_chars++] = c;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <console_process+0x11c>)
 8002080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	b291      	uxth	r1, r2
 8002086:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <console_process+0x11c>)
 8002088:	86d1      	strh	r1, [r2, #54]	; 0x36
 800208a:	461a      	mov	r2, r3
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <console_process+0x11c>)
 800208e:	4413      	add	r3, r2
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	735a      	strb	r2, [r3, #13]
            LOG("%c", c);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4619      	mov	r1, r3
 8002098:	481e      	ldr	r0, [pc, #120]	; (8002114 <console_process+0x138>)
 800209a:	f002 fc11 	bl	80048c0 <printf_>
 800209e:	e023      	b.n	80020e8 <console_process+0x10c>
        }
        else
        {
            /* No space in buffer, so ring terminal bell. */
            LOGW(TAG, "No more space in command buffer.");
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <console_process+0x13c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <console_process+0x106>
 80020a8:	f004 f9a8 	bl	80063fc <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <console_process+0x140>)
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <console_process+0x144>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0999      	lsrs	r1, r3, #6
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <console_process+0x144>)
 80020c0:	fba3 4302 	umull	r4, r3, r3, r2
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80020ca:	fb04 f303 	mul.w	r3, r4, r3
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <console_process+0x140>)
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	9201      	str	r2, [sp, #4]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	460b      	mov	r3, r1
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <console_process+0x148>)
 80020dc:	2102      	movs	r1, #2
 80020de:	f000 f881 	bl	80021e4 <log_printf>
            LOG("\a");
 80020e2:	4811      	ldr	r0, [pc, #68]	; (8002128 <console_process+0x14c>)
 80020e4:	f002 fbec 	bl	80048c0 <printf_>
        }
        return MOD_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <console_process+0x112>
    }

    return MOD_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200002c0 	.word	0x200002c0
 80020fc:	0800ecec 	.word	0x0800ecec
 8002100:	0800ecf8 	.word	0x0800ecf8
 8002104:	0800ed04 	.word	0x0800ed04
 8002108:	0800ed08 	.word	0x0800ed08
 800210c:	0800ed0c 	.word	0x0800ed0c
 8002110:	0800fb50 	.word	0x0800fb50
 8002114:	0800ed24 	.word	0x0800ed24
 8002118:	20000078 	.word	0x20000078
 800211c:	20000020 	.word	0x20000020
 8002120:	10624dd3 	.word	0x10624dd3
 8002124:	0800ed30 	.word	0x0800ed30
 8002128:	0800ed70 	.word	0x0800ed70

0800212c <post_cmd_event>:

/**
 * @brief Post command event to command active object.
 */
static inline void post_cmd_event(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    Active_post(cmd_base, (Event const *)&cmd_evt);
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <post_cmd_event+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <post_cmd_event+0x18>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff f83a 	bl	80011b0 <Active_post>
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20004fd0 	.word	0x20004fd0
 8002144:	20000024 	.word	0x20000024

08002148 <log_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t log_init(void)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b085      	sub	sp, #20
 800214c:	af02      	add	r7, sp, #8
    SLIST_INIT(&log_head); // Initialize linked list by setting head pointer to NULL.
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <log_init+0x60>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    LOGI(TAG, "Initialized log module");
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <log_init+0x64>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <log_init+0x4e>
 800215c:	f004 f94e 	bl	80063fc <HAL_GetTick>
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <log_init+0x68>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <log_init+0x6c>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0999      	lsrs	r1, r3, #6
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <log_init+0x6c>)
 8002174:	fba3 4302 	umull	r4, r3, r3, r2
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800217e:	fb04 f303 	mul.w	r3, r4, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <log_init+0x68>)
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	9201      	str	r2, [sp, #4]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	460b      	mov	r3, r1
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <log_init+0x70>)
 8002190:	2103      	movs	r1, #3
 8002192:	f000 f827 	bl	80021e4 <log_printf>
    return cmd_register(&log_client_info);
 8002196:	4809      	ldr	r0, [pc, #36]	; (80021bc <log_init+0x74>)
 8002198:	f7ff fa8a 	bl	80016b0 <cmd_register>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200002fc 	.word	0x200002fc
 80021ac:	20000078 	.word	0x20000078
 80021b0:	20000074 	.word	0x20000074
 80021b4:	10624dd3 	.word	0x10624dd3
 80021b8:	0800ee84 	.word	0x0800ee84
 80021bc:	2000005c 	.word	0x2000005c

080021c0 <log_toggle>:

bool log_toggle(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
    _log_active = _log_active ? false : true;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <log_toggle+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <log_toggle+0x20>)
 80021d0:	701a      	strb	r2, [r3, #0]
    return _log_active;
 80021d2:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <log_toggle+0x20>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000078 	.word	0x20000078

080021e4 <log_printf>:
{
    return _log_active;
}

void log_printf(const char *tag, log_level_t level, const char *fmt, ...)
{
 80021e4:	b40c      	push	{r2, r3}
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	70fb      	strb	r3, [r7, #3]
    log_level_t tag_level = get_log_level(tag);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa06 	bl	8002604 <get_log_level>
 80021f8:	4603      	mov	r3, r0
 80021fa:	73fb      	strb	r3, [r7, #15]
    if (level > tag_level)
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	429a      	cmp	r2, r3
 8002202:	d807      	bhi.n	8002214 <log_printf+0x30>
    {
        return;
    }
    va_list args;
    va_start(args, fmt);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	60bb      	str	r3, [r7, #8]
    vprintf(fmt, args);
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	69b8      	ldr	r0, [r7, #24]
 800220e:	f002 fb73 	bl	80048f8 <vprintf_>
 8002212:	e000      	b.n	8002216 <log_printf+0x32>
        return;
 8002214:	bf00      	nop
    va_end(args);
}
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800221e:	b002      	add	sp, #8
 8002220:	4770      	bx	lr
	...

08002224 <log_level_str>:
 * @param level The log level as an integer.
 *
 * @return Log level as a string. Otherwise, "INVALID".
 */
static const char *log_level_str(int32_t level)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    if (level < ARRAY_SIZE(log_level_names))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b05      	cmp	r3, #5
 8002230:	d804      	bhi.n	800223c <log_level_str+0x18>
    {
        return log_level_names[level];
 8002232:	4a06      	ldr	r2, [pc, #24]	; (800224c <log_level_str+0x28>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	e000      	b.n	800223e <log_level_str+0x1a>
    }
    return "INVALID";
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <log_level_str+0x2c>)
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2000002c 	.word	0x2000002c
 8002250:	0800eeb8 	.word	0x0800eeb8

08002254 <log_level_int>:
 * @param level_name The log level as a string.
 *
 * @return Log level as an int, or -1 on error.
 */
static int32_t log_level_int(const char *level_name)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e00f      	b.n	8002282 <log_level_int+0x2e>
    {
        if (strcasecmp(level_name, log_level_names[level]) == 0)
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <log_level_int+0x40>)
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f00c f91f 	bl	800e4b0 <strcasecmp>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <log_level_int+0x28>
        {
            return level;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	e007      	b.n	800228c <log_level_int+0x38>
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3301      	adds	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d9ec      	bls.n	8002262 <log_level_int+0xe>
        }
    }

    return -1; // Log level not found.
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000002c 	.word	0x2000002c

08002298 <cmd_log_status>:
 * @return 0 if successful, 1 otherwise.
 *
 * Log levels include global log level and individual tag log levels that override global level.
 */
static uint32_t cmd_log_status(uint32_t argc, const char **argv)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    LOG("Global log level: (%s)\r\n", log_level_str(_global_log_level));
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <cmd_log_status+0x64>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ffbc 	bl	8002224 <log_level_str>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4619      	mov	r1, r3
 80022b0:	4813      	ldr	r0, [pc, #76]	; (8002300 <cmd_log_status+0x68>)
 80022b2:	f002 fb05 	bl	80048c0 <printf_>

    if (!SLIST_EMPTY(&log_head))
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <cmd_log_status+0x6c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d018      	beq.n	80022f0 <cmd_log_status+0x58>
    {
        Log_entry *p = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
        SLIST_FOREACH(p, &log_head, entries)
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <cmd_log_status+0x6c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e00f      	b.n	80022ea <cmd_log_status+0x52>
        {
            LOG("%s log level: (%s)\r\n", p->tag, log_level_str(p->level));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1d5c      	adds	r4, r3, #5
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ffa6 	bl	8002224 <log_level_str>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	4621      	mov	r1, r4
 80022de:	480a      	ldr	r0, [pc, #40]	; (8002308 <cmd_log_status+0x70>)
 80022e0:	f002 faee 	bl	80048c0 <printf_>
        SLIST_FOREACH(p, &log_head, entries)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ec      	bne.n	80022ca <cmd_log_status+0x32>
        }
    }

    return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000007c 	.word	0x2000007c
 8002300:	0800eec0 	.word	0x0800eec0
 8002304:	200002fc 	.word	0x200002fc
 8002308:	0800eee0 	.word	0x0800eee0

0800230c <cmd_log_set>:
 * @return 0 if successful, 1 otherwise.
 *
 * TTYS command format: > log set <tag> <level>.
 */
static uint32_t cmd_log_set(uint32_t argc, const char **argv)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b08b      	sub	sp, #44	; 0x2c
 8002310:	af04      	add	r7, sp, #16
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
    if (argc != 2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d022      	beq.n	8002362 <cmd_log_set+0x56>
    {
        LOGW(TAG, "Missing log level arguments");
 800231c:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <cmd_log_set+0xd4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01c      	beq.n	800235e <cmd_log_set+0x52>
 8002324:	f004 f86a 	bl	80063fc <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <cmd_log_set+0xd8>)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a2d      	ldr	r2, [pc, #180]	; (80023e8 <cmd_log_set+0xdc>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0999      	lsrs	r1, r3, #6
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <cmd_log_set+0xdc>)
 800233c:	fba3 4302 	umull	r4, r3, r3, r2
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002346:	fb04 f303 	mul.w	r3, r4, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <cmd_log_set+0xd8>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	9201      	str	r2, [sp, #4]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	4a25      	ldr	r2, [pc, #148]	; (80023ec <cmd_log_set+0xe0>)
 8002358:	2102      	movs	r1, #2
 800235a:	f7ff ff43 	bl	80021e4 <log_printf>
        return 1; // Should include only 1 argument.
 800235e:	2301      	movs	r3, #1
 8002360:	e03a      	b.n	80023d8 <cmd_log_set+0xcc>
    }
    else
    {
        int32_t new_log_level = log_level_int(argv[1]);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	3304      	adds	r3, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff73 	bl	8002254 <log_level_int>
 800236e:	6178      	str	r0, [r7, #20]
        if (new_log_level == -1)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d126      	bne.n	80023c6 <cmd_log_set+0xba>
        {
            LOGW(TAG, "Log level (%s) not recognized", argv[1]);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <cmd_log_set+0xd4>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <cmd_log_set+0xb6>
 8002380:	f004 f83c 	bl	80063fc <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <cmd_log_set+0xd8>)
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <cmd_log_set+0xdc>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	099c      	lsrs	r4, r3, #6
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <cmd_log_set+0xdc>)
 8002398:	fba3 1302 	umull	r1, r3, r3, r2
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <cmd_log_set+0xd8>)
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	3104      	adds	r1, #4
 80023b0:	6809      	ldr	r1, [r1, #0]
 80023b2:	9102      	str	r1, [sp, #8]
 80023b4:	9201      	str	r2, [sp, #4]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4623      	mov	r3, r4
 80023ba:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <cmd_log_set+0xe4>)
 80023bc:	2102      	movs	r1, #2
 80023be:	f7ff ff11 	bl	80021e4 <log_printf>
            return 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e008      	b.n	80023d8 <cmd_log_set+0xcc>
        }
        else
        { // tag , level
            log_level_set(argv[0], new_log_level);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f80f 	bl	80023f4 <log_level_set>
            return 0;
 80023d6:	2300      	movs	r3, #0
        }
    }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}
 80023e0:	20000078 	.word	0x20000078
 80023e4:	20000074 	.word	0x20000074
 80023e8:	10624dd3 	.word	0x10624dd3
 80023ec:	0800eefc 	.word	0x0800eefc
 80023f0:	0800ef34 	.word	0x0800ef34

080023f4 <log_level_set>:
 * @param level Desired log level.
 *
 * @note Wild-card tag resets log level of all tags to given value.
 */
static inline void log_level_set(const char *tag, log_level_t level)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
    Log_entry *p = NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]

    /* Set global log level and delete linked list containing tag entries. */
    if (strcmp("*", tag) == 0)
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4873      	ldr	r0, [pc, #460]	; (80025d4 <log_level_set+0x1e0>)
 8002408:	f7fd fee2 	bl	80001d0 <strcmp>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d144      	bne.n	800249c <log_level_set+0xa8>
    {
        _global_log_level = level;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	4a70      	ldr	r2, [pc, #448]	; (80025d8 <log_level_set+0x1e4>)
 8002416:	6013      	str	r3, [r2, #0]

        LOGI(TAG, "Clearing list and cache");
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <log_level_set+0x1e8>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d028      	beq.n	8002472 <log_level_set+0x7e>
 8002420:	f003 ffec 	bl	80063fc <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	4b6e      	ldr	r3, [pc, #440]	; (80025e0 <log_level_set+0x1ec>)
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a6d      	ldr	r2, [pc, #436]	; (80025e4 <log_level_set+0x1f0>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0999      	lsrs	r1, r3, #6
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4b6b      	ldr	r3, [pc, #428]	; (80025e4 <log_level_set+0x1f0>)
 8002438:	fba3 4302 	umull	r4, r3, r3, r2
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002442:	fb04 f303 	mul.w	r3, r4, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a65      	ldr	r2, [pc, #404]	; (80025e0 <log_level_set+0x1ec>)
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	9201      	str	r2, [sp, #4]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	460b      	mov	r3, r1
 8002452:	4a65      	ldr	r2, [pc, #404]	; (80025e8 <log_level_set+0x1f4>)
 8002454:	2103      	movs	r1, #3
 8002456:	f7ff fec5 	bl	80021e4 <log_printf>
        while (!SLIST_EMPTY(&log_head))
 800245a:	e00a      	b.n	8002472 <log_level_set+0x7e>
        {
            p = SLIST_FIRST(&log_head);
 800245c:	4b63      	ldr	r3, [pc, #396]	; (80025ec <log_level_set+0x1f8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61fb      	str	r3, [r7, #28]
            SLIST_REMOVE_HEAD(&log_head, entries);
 8002462:	4b62      	ldr	r3, [pc, #392]	; (80025ec <log_level_set+0x1f8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a60      	ldr	r2, [pc, #384]	; (80025ec <log_level_set+0x1f8>)
 800246a:	6013      	str	r3, [r2, #0]
            free(p);
 800246c:	69f8      	ldr	r0, [r7, #28]
 800246e:	f00b ff47 	bl	800e300 <free>
        while (!SLIST_EMPTY(&log_head))
 8002472:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <log_level_set+0x1f8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <log_level_set+0x68>
        }

        cache_state.entry_count = 0;
 800247a:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <log_level_set+0x1fc>)
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
        cache_state.max_generation = 0;
 8002480:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <log_level_set+0x1fc>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

        LOG("Global log level set to (%s)\r\n", log_level_str(_global_log_level));
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <log_level_set+0x1e4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff feca 	bl	8002224 <log_level_str>
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	4857      	ldr	r0, [pc, #348]	; (80025f4 <log_level_set+0x200>)
 8002496:	f002 fa13 	bl	80048c0 <printf_>
        return;
 800249a:	e097      	b.n	80025cc <log_level_set+0x1d8>
    }

    /* Check if tag is already saved in linked list. */
    SLIST_FOREACH(p, &log_head, entries)
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <log_level_set+0x1f8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e01c      	b.n	80024de <log_level_set+0xea>
    {
        if (strcmp(p->tag, tag) == 0)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3305      	adds	r3, #5
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd fe90 	bl	80001d0 <strcmp>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d110      	bne.n	80024d8 <log_level_set+0xe4>
        {
            p->level = level;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	711a      	strb	r2, [r3, #4]
            LOG("%s log level set to (%s)\r\n", p->tag, log_level_str(p->level));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	1d5c      	adds	r4, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	791b      	ldrb	r3, [r3, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fead 	bl	8002224 <log_level_str>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4621      	mov	r1, r4
 80024d0:	4849      	ldr	r0, [pc, #292]	; (80025f8 <log_level_set+0x204>)
 80024d2:	f002 f9f5 	bl	80048c0 <printf_>
            break;
 80024d6:	e005      	b.n	80024e4 <log_level_set+0xf0>
    SLIST_FOREACH(p, &log_head, entries)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1df      	bne.n	80024a4 <log_level_set+0xb0>
        }
    }

    /* Tag not found in linked list, add new entry. */
    if (p == NULL)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d147      	bne.n	800257a <log_level_set+0x186>
    {
        Log_entry *new_entry = (Log_entry *)malloc(sizeof(Log_entry));
 80024ea:	2010      	movs	r0, #16
 80024ec:	f00b ff00 	bl	800e2f0 <malloc>
 80024f0:	4603      	mov	r3, r0
 80024f2:	617b      	str	r3, [r7, #20]
        if (new_entry == NULL)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d121      	bne.n	800253e <log_level_set+0x14a>
        {
            LOGW(TAG, "Insufficient heap memory for new list entry.");
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <log_level_set+0x1e8>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <log_level_set+0x1d6>
 8002502:	f003 ff7b 	bl	80063fc <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <log_level_set+0x1ec>)
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4a35      	ldr	r2, [pc, #212]	; (80025e4 <log_level_set+0x1f0>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0999      	lsrs	r1, r3, #6
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <log_level_set+0x1f0>)
 800251a:	fba3 4302 	umull	r4, r3, r3, r2
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002524:	fb04 f303 	mul.w	r3, r4, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <log_level_set+0x1ec>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	9201      	str	r2, [sp, #4]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	460b      	mov	r3, r1
 8002534:	4a31      	ldr	r2, [pc, #196]	; (80025fc <log_level_set+0x208>)
 8002536:	2102      	movs	r1, #2
 8002538:	f7ff fe54 	bl	80021e4 <log_printf>
            return;
 800253c:	e045      	b.n	80025ca <log_level_set+0x1d6>
        }
        new_entry->level = level;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	711a      	strb	r2, [r3, #4]
        strncpy(new_entry->tag, tag, sizeof(new_entry->tag));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3305      	adds	r3, #5
 8002548:	220a      	movs	r2, #10
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4618      	mov	r0, r3
 800254e:	f00b ffcb 	bl	800e4e8 <strncpy>
        SLIST_INSERT_HEAD(&log_head, new_entry, entries);
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <log_level_set+0x1f8>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <log_level_set+0x1f8>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	6013      	str	r3, [r2, #0]
        LOG("Added tag (%s) to list with level (%s)\r\n", new_entry->tag, log_level_str(new_entry->level));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1d5c      	adds	r4, r3, #5
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fe5b 	bl	8002224 <log_level_str>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	4621      	mov	r1, r4
 8002574:	4822      	ldr	r0, [pc, #136]	; (8002600 <log_level_set+0x20c>)
 8002576:	f002 f9a3 	bl	80048c0 <printf_>
    }

    /* Update entry in cache if it exists.
     * search in the cache and update the entry it if exists */
    for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	e01e      	b.n	80025be <log_level_set+0x1ca>
    {
        if (strcmp(cache_state.cache[i].tag, tag) == 0)
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <log_level_set+0x1fc>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	3301      	adds	r3, #1
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd fe1e 	bl	80001d0 <strcmp>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10e      	bne.n	80025b8 <log_level_set+0x1c4>
        {
            cache_state.cache[i].level = level;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	b2d9      	uxtb	r1, r3
 80025a2:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <log_level_set+0x1fc>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	3301      	adds	r3, #1
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	78da      	ldrb	r2, [r3, #3]
 80025ae:	f361 1247 	bfi	r2, r1, #5, #3
 80025b2:	70da      	strb	r2, [r3, #3]
            break;
 80025b4:	bf00      	nop
        }
    }

    return;
 80025b6:	e009      	b.n	80025cc <log_level_set+0x1d8>
    for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <log_level_set+0x1fc>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3db      	bcc.n	8002580 <log_level_set+0x18c>
    return;
 80025c8:	e000      	b.n	80025cc <log_level_set+0x1d8>
            return;
 80025ca:	bf00      	nop
}
 80025cc:	3724      	adds	r7, #36	; 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	0800ef70 	.word	0x0800ef70
 80025d8:	2000007c 	.word	0x2000007c
 80025dc:	20000078 	.word	0x20000078
 80025e0:	20000074 	.word	0x20000074
 80025e4:	10624dd3 	.word	0x10624dd3
 80025e8:	0800ef74 	.word	0x0800ef74
 80025ec:	200002fc 	.word	0x200002fc
 80025f0:	20000300 	.word	0x20000300
 80025f4:	0800efa8 	.word	0x0800efa8
 80025f8:	0800efd0 	.word	0x0800efd0
 80025fc:	0800eff4 	.word	0x0800eff4
 8002600:	0800f040 	.word	0x0800f040

08002604 <get_log_level>:
 * @param tag Tag to find level of.
 *
 * @return Tag's log level or global log level if not found.
 */
static inline log_level_t get_log_level(const char *tag)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    log_level_t tag_lvl = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
    if (!get_cached_log_level(tag, &tag_lvl))
 8002610:	f107 030f 	add.w	r3, r7, #15
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f822 	bl	8002660 <get_cached_log_level>
 800261c:	4603      	mov	r3, r0
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d014      	beq.n	8002652 <get_log_level+0x4e>
    {
        if (!get_uncached_log_level(tag, &tag_lvl))
 8002628:	f107 030f 	add.w	r3, r7, #15
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f864 	bl	80026fc <get_uncached_log_level>
 8002634:	4603      	mov	r3, r0
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <get_log_level+0x44>
        {
            /* Log level not found, default to global log level. */
            tag_lvl = _global_log_level;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <get_log_level+0x58>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	73fb      	strb	r3, [r7, #15]
        }

        /* Add to cache for faster access */
        log_add_cache(tag, tag_lvl);
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f87d 	bl	800274c <log_add_cache>
    }

    return tag_lvl;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000007c 	.word	0x2000007c

08002660 <get_cached_log_level>:
 * @param[out] level Log level corresponding to tag.
 * @return true Level found in cache.
 *         false Level not found in cache.
 */
static inline bool get_cached_log_level(const char *tag, log_level_t *level)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]

    /* Assumes tag stored as static variable */
    uint32_t i;
    for (i = 0; i < cache_state.entry_count; ++i)
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e00b      	b.n	8002688 <get_cached_log_level+0x28>
    {
        if (cache_state.cache[i].tag == tag)
 8002670:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <get_cached_log_level+0x98>)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3301      	adds	r3, #1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d008      	beq.n	8002694 <get_cached_log_level+0x34>
    for (i = 0; i < cache_state.entry_count; ++i)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <get_cached_log_level+0x98>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	429a      	cmp	r2, r3
 8002690:	d3ee      	bcc.n	8002670 <get_cached_log_level+0x10>
 8002692:	e000      	b.n	8002696 <get_cached_log_level+0x36>
        {
            break;
 8002694:	bf00      	nop
        }
    }

    /* Could not find log level */
    if (i == cache_state.entry_count)
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <get_cached_log_level+0x98>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d101      	bne.n	80026a4 <get_cached_log_level+0x44>
    {
        return false;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e024      	b.n	80026ee <get_cached_log_level+0x8e>
    }

    /* Return level */
    *level = (log_level_t)cache_state.cache[i].level;
 80026a4:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <get_cached_log_level+0x98>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	701a      	strb	r2, [r3, #0]

    /* If cache is full, increment generation with each cache hit and heapify */
    if (cache_state.entry_count == TAG_CACHE_SIZE)
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <get_cached_log_level+0x98>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b1f      	cmp	r3, #31
 80026c2:	d113      	bne.n	80026ec <get_cached_log_level+0x8c>
    {
        cache_state.cache[i].generation = cache_state.max_generation++;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <get_cached_log_level+0x98>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	490b      	ldr	r1, [pc, #44]	; (80026f8 <get_cached_log_level+0x98>)
 80026cc:	600a      	str	r2, [r1, #0]
 80026ce:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 80026d2:	4909      	ldr	r1, [pc, #36]	; (80026f8 <get_cached_log_level+0x98>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
 80026dc:	f360 031c 	bfi	r3, r0, #0, #29
 80026e0:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
        heap_bubble_down(i);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f882 	bl	80027f0 <heap_bubble_down>
    }

    return true;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000300 	.word	0x20000300

080026fc <get_uncached_log_level>:
 * @param[out] level Log level corresponding to tag.
 *
 * @return true if log level found, false otherwise.
 */
static inline bool get_uncached_log_level(const char *tag, log_level_t *level)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
    Log_entry *p = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]

    SLIST_FOREACH(p, &log_head, entries)
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <get_uncached_log_level+0x4c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e011      	b.n	8002736 <get_uncached_log_level+0x3a>
    {
        if (strcmp(p->tag, tag) == 0)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3305      	adds	r3, #5
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fd59 	bl	80001d0 <strcmp>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <get_uncached_log_level+0x34>
        {
            *level = p->level;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	791a      	ldrb	r2, [r3, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	701a      	strb	r2, [r3, #0]
            return true;
 800272c:	2301      	movs	r3, #1
 800272e:	e006      	b.n	800273e <get_uncached_log_level+0x42>
    SLIST_FOREACH(p, &log_head, entries)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ea      	bne.n	8002712 <get_uncached_log_level+0x16>
        }
    }

    return false;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200002fc 	.word	0x200002fc

0800274c <log_add_cache>:
 * @param log_level Module's log level.
 *
 * Cache is implemented using a binary min-heap.
 */
static inline void log_add_cache(const char *tag, log_level_t log_level)
{
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
    uint32_t generation = cache_state.max_generation++;
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <log_add_cache+0xa0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	4923      	ldr	r1, [pc, #140]	; (80027ec <log_add_cache+0xa0>)
 8002760:	600a      	str	r2, [r1, #0]
 8002762:	61fb      	str	r3, [r7, #28]

    /* No need to sort since min-heap. */
    if (cache_state.entry_count < TAG_CACHE_SIZE)
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <log_add_cache+0xa0>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b1e      	cmp	r3, #30
 800276a:	d824      	bhi.n	80027b6 <log_add_cache+0x6a>
    {
        cache_state.cache[cache_state.entry_count] = (Log_cached_entry){
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <log_add_cache+0xa0>)
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f023 4560 	bic.w	r5, r3, #3758096384	; 0xe0000000
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	b2dc      	uxtb	r4, r3
 800277e:	481b      	ldr	r0, [pc, #108]	; (80027ec <log_add_cache+0xa0>)
 8002780:	1c51      	adds	r1, r2, #1
 8002782:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
 8002786:	f365 031c 	bfi	r3, r5, #0, #29
 800278a:	f840 3031 	str.w	r3, [r0, r1, lsl #3]
 800278e:	4917      	ldr	r1, [pc, #92]	; (80027ec <log_add_cache+0xa0>)
 8002790:	1c53      	adds	r3, r2, #1
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	78d9      	ldrb	r1, [r3, #3]
 8002798:	f364 1147 	bfi	r1, r4, #5, #3
 800279c:	70d9      	strb	r1, [r3, #3]
 800279e:	4913      	ldr	r1, [pc, #76]	; (80027ec <log_add_cache+0xa0>)
 80027a0:	1c53      	adds	r3, r2, #1
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	605a      	str	r2, [r3, #4]
            .generation = generation,
            .level = log_level,
            .tag = tag};
        ++cache_state.entry_count;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <log_add_cache+0xa0>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	3301      	adds	r3, #1
 80027b0:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <log_add_cache+0xa0>)
 80027b2:	6053      	str	r3, [r2, #4]
 80027b4:	e016      	b.n	80027e4 <log_add_cache+0x98>
    }

    // Cache is full, replace first element
    // and do bubble-down sorting to restore
    // binary min-heap.
    cache_state.cache[0] = (Log_cached_entry){
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	b2d9      	uxtb	r1, r3
 80027c4:	4a09      	ldr	r2, [pc, #36]	; (80027ec <log_add_cache+0xa0>)
 80027c6:	6893      	ldr	r3, [r2, #8]
 80027c8:	f360 031c 	bfi	r3, r0, #0, #29
 80027cc:	6093      	str	r3, [r2, #8]
 80027ce:	4a07      	ldr	r2, [pc, #28]	; (80027ec <log_add_cache+0xa0>)
 80027d0:	7ad3      	ldrb	r3, [r2, #11]
 80027d2:	f361 1347 	bfi	r3, r1, #5, #3
 80027d6:	72d3      	strb	r3, [r2, #11]
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <log_add_cache+0xa0>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60d3      	str	r3, [r2, #12]
        .tag = tag,
        .level = log_level,
        .generation = generation};
    heap_bubble_down(0);
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 f806 	bl	80027f0 <heap_bubble_down>
}
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000300 	.word	0x20000300

080027f0 <heap_bubble_down>:

static inline void heap_bubble_down(int index)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2)
 80027f8:	e021      	b.n	800283e <heap_bubble_down+0x4e>
    {
        uint32_t left_index = index * 2 + 1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	3301      	adds	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
        uint32_t right_index = left_index + 1;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
        uint32_t next = (cache_state.cache[left_index].generation < cache_state.cache[right_index].generation) ? left_index : right_index;
 8002808:	4a11      	ldr	r2, [pc, #68]	; (8002850 <heap_bubble_down+0x60>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002812:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8002816:	490e      	ldr	r1, [pc, #56]	; (8002850 <heap_bubble_down+0x60>)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3301      	adds	r3, #1
 800281c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8002820:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002824:	429a      	cmp	r2, r3
 8002826:	d201      	bcs.n	800282c <heap_bubble_down+0x3c>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	e000      	b.n	800282e <heap_bubble_down+0x3e>
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	60fb      	str	r3, [r7, #12]
        heap_swap(index, next); // cache[index] always greater than cache[next]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68f9      	ldr	r1, [r7, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f80d 	bl	8002854 <heap_swap>
        index = next;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	607b      	str	r3, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b0e      	cmp	r3, #14
 8002842:	ddda      	ble.n	80027fa <heap_bubble_down+0xa>
    }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000300 	.word	0x20000300

08002854 <heap_swap>:

static inline void heap_swap(uint32_t i, uint32_t j)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
    Log_cached_entry tmp = cache_state.cache[i];
 800285e:	4915      	ldr	r1, [pc, #84]	; (80028b4 <heap_swap+0x60>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3301      	adds	r3, #1
 8002864:	f107 0208 	add.w	r2, r7, #8
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002870:	e882 0003 	stmia.w	r2, {r0, r1}
    cache_state.cache[i] = cache_state.cache[j];
 8002874:	480f      	ldr	r0, [pc, #60]	; (80028b4 <heap_swap+0x60>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3301      	adds	r3, #1
 800287a:	490e      	ldr	r1, [pc, #56]	; (80028b4 <heap_swap+0x60>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	3201      	adds	r2, #1
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4403      	add	r3, r0
 8002884:	00d2      	lsls	r2, r2, #3
 8002886:	440a      	add	r2, r1
 8002888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800288c:	e883 0003 	stmia.w	r3, {r0, r1}
    cache_state.cache[j] = tmp;
 8002890:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <heap_swap+0x60>)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	f107 0208 	add.w	r2, r7, #8
 800289e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028a2:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000300 	.word	0x20000300

080028b8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800290e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4313      	orrs	r3, r2
 8002916:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800291a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40021000 	.word	0x40021000

08002934 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <LL_APB1_GRP1_EnableClock+0x2c>)
 800293e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002940:	4907      	ldr	r1, [pc, #28]	; (8002960 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <LL_APB1_GRP1_EnableClock+0x2c>)
 800294a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4013      	ands	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40021000 	.word	0x40021000

08002964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800296a:	f003 fd13 	bl	8006394 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800296e:	f000 f82f 	bl	80029d0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002972:	f000 f9a9 	bl	8002cc8 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8002976:	f000 f957 	bl	8002c28 <MX_USART2_UART_Init>
    MX_TIM3_Init();
 800297a:	f000 f8dd 	bl	8002b38 <MX_TIM3_Init>
    MX_SPI2_Init();
 800297e:	f000 f89d 	bl	8002abc <MX_SPI2_Init>
    /* USER CODE BEGIN 2 */
    uart_config_t uart_cfg = {.uart_reg_base = USART2, .irq_num = USART2_IRQn};
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <main+0x5c>)
 8002984:	463b      	mov	r3, r7
 8002986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800298a:	e883 0003 	stmia.w	r3, {r0, r1}
    uart_init(&uart_cfg);
 800298e:	463b      	mov	r3, r7
 8002990:	4618      	mov	r0, r3
 8002992:	f003 fac7 	bl	8005f24 <uart_init>
    uart_start();
 8002996:	f003 fb2d 	bl	8005ff4 <uart_start>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800299a:	2201      	movs	r2, #1
 800299c:	2120      	movs	r1, #32
 800299e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a2:	f003 ffc3 	bl	800692c <HAL_GPIO_WritePin>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 80029a6:	f008 fa07 	bl	800adb8 <osKernelInitialize>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80029aa:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <main+0x60>)
 80029ac:	2100      	movs	r1, #0
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <main+0x64>)
 80029b0:	f008 faa4 	bl	800aefc <osThreadNew>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <main+0x68>)
 80029b8:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 80029ba:	f008 fa21 	bl	800ae00 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80029be:	e7fe      	b.n	80029be <main+0x5a>
 80029c0:	0800f07c 	.word	0x0800f07c
 80029c4:	0800f998 	.word	0x0800f998
 80029c8:	08002dbd 	.word	0x08002dbd
 80029cc:	20004fd4 	.word	0x20004fd4

080029d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0b8      	sub	sp, #224	; 0xe0
 80029d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029da:	2244      	movs	r2, #68	; 0x44
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f00b fca4 	bl	800e32c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029f4:	463b      	mov	r3, r7
 80029f6:	2288      	movs	r2, #136	; 0x88
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00b fc96 	bl	800e32c <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a0e:	2310      	movs	r3, #16
 8002a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a14:	2302      	movs	r3, #2
 8002a16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.PLL.PLLM = 1;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLN = 10;
 8002a26:	230a      	movs	r3, #10
 8002a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a32:	2302      	movs	r3, #2
 8002a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 ffee 	bl	8006a24 <HAL_RCC_OscConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <SystemClock_Config+0x82>
    {
        Error_Handler();
 8002a4e:	f000 f9e7 	bl	8002e20 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a52:	230f      	movs	r3, #15
 8002a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a74:	2104      	movs	r1, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 fbba 	bl	80071f0 <HAL_RCC_ClockConfig>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <SystemClock_Config+0xb6>
    {
        Error_Handler();
 8002a82:	f000 f9cd 	bl	8002e20 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a86:	2302      	movs	r3, #2
 8002a88:	603b      	str	r3, [r7, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fdcf 	bl	8007634 <HAL_RCCEx_PeriphCLKConfig>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <SystemClock_Config+0xd0>
    {
        Error_Handler();
 8002a9c:	f000 f9c0 	bl	8002e20 <Error_Handler>
    }
    /** Configure the main internal regulator output voltage
  */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002aa0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002aa4:	f003 ff68 	bl	8006978 <HAL_PWREx_ControlVoltageScaling>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <SystemClock_Config+0xe2>
    {
        Error_Handler();
 8002aae:	f000 f9b7 	bl	8002e20 <Error_Handler>
    }
}
 8002ab2:	bf00      	nop
 8002ab4:	37e0      	adds	r7, #224	; 0xe0
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <MX_SPI2_Init+0x78>)
 8002ac4:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002acc:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002ad6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ada:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aee:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002af2:	2228      	movs	r2, #40	; 0x28
 8002af4:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 7;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
    hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002b16:	2208      	movs	r2, #8
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_SPI2_Init+0x74>)
 8002b1c:	f005 fa46 	bl	8007fac <HAL_SPI_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_SPI2_Init+0x6e>
    {
        Error_Handler();
 8002b26:	f000 f97b 	bl	8002e20 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20004fd8 	.word	0x20004fd8
 8002b34:	40003800 	.word	0x40003800

08002b38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <MX_TIM3_Init+0xec>)
 8002b6e:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 9768 - 1;
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002b72:	f242 6227 	movw	r2, #9767	; 0x2627
 8002b76:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 4095 - 1;
 8002b7e:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002b80:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b84:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b92:	4823      	ldr	r0, [pc, #140]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002b94:	f005 ffa8 	bl	8008ae8 <HAL_TIM_Base_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM3_Init+0x6a>
    {
        Error_Handler();
 8002b9e:	f000 f93f 	bl	8002e20 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bac:	4619      	mov	r1, r3
 8002bae:	481c      	ldr	r0, [pc, #112]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002bb0:	f006 fc90 	bl	80094d4 <HAL_TIM_ConfigClockSource>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM3_Init+0x86>
    {
        Error_Handler();
 8002bba:	f000 f931 	bl	8002e20 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bbe:	4818      	ldr	r0, [pc, #96]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002bc0:	f006 f85a 	bl	8008c78 <HAL_TIM_PWM_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_TIM3_Init+0x96>
    {
        Error_Handler();
 8002bca:	f000 f929 	bl	8002e20 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4810      	ldr	r0, [pc, #64]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002bde:	f007 f997 	bl	8009f10 <HAL_TIMEx_MasterConfigSynchronization>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM3_Init+0xb4>
    {
        Error_Handler();
 8002be8:	f000 f91a 	bl	8002e20 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bec:	2360      	movs	r3, #96	; 0x60
 8002bee:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4619      	mov	r1, r3
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002c04:	f006 fb56 	bl	80092b4 <HAL_TIM_PWM_ConfigChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM3_Init+0xda>
    {
        Error_Handler();
 8002c0e:	f000 f907 	bl	8002e20 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002c12:	4803      	ldr	r0, [pc, #12]	; (8002c20 <MX_TIM3_Init+0xe8>)
 8002c14:	f002 ff5e 	bl	8005ad4 <HAL_TIM_MspPostInit>
}
 8002c18:	bf00      	nop
 8002c1a:	3738      	adds	r7, #56	; 0x38
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	2000503c 	.word	0x2000503c
 8002c24:	40000400 	.word	0x40000400

08002c28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08e      	sub	sp, #56	; 0x38
 8002c2c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN USART2_Init 0 */

    /* USER CODE END USART2_Init 0 */

    LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	611a      	str	r2, [r3, #16]
 8002c3e:	615a      	str	r2, [r3, #20]
 8002c40:	619a      	str	r2, [r3, #24]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
 8002c50:	615a      	str	r2, [r3, #20]

    /* Peripheral clock enable */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002c52:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c56:	f7ff fe6d 	bl	8002934 <LL_APB1_GRP1_EnableClock>

    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7ff fe52 	bl	8002904 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 8002c60:	230c      	movs	r3, #12
 8002c62:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c64:	2302      	movs	r3, #2
 8002c66:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c74:	2307      	movs	r3, #7
 8002c76:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c80:	f007 fb37 	bl	800a2f2 <LL_GPIO_Init>

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    USART_InitStruct.BaudRate = 115200;
 8002c84:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c88:	61fb      	str	r3, [r7, #28]
    USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
    USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c96:	230c      	movs	r3, #12
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
    USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
    LL_USART_Init(USART2, &USART_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <MX_USART2_UART_Init+0x9c>)
 8002caa:	f007 ffc5 	bl	800ac38 <LL_USART_Init>
    LL_USART_ConfigAsyncMode(USART2);
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <MX_USART2_UART_Init+0x9c>)
 8002cb0:	f7ff fe12 	bl	80028d8 <LL_USART_ConfigAsyncMode>
    LL_USART_Enable(USART2);
 8002cb4:	4803      	ldr	r0, [pc, #12]	; (8002cc4 <MX_USART2_UART_Init+0x9c>)
 8002cb6:	f7ff fdff 	bl	80028b8 <LL_USART_Enable>
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8002cba:	bf00      	nop
 8002cbc:	3738      	adds	r7, #56	; 0x38
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40004400 	.word	0x40004400

08002cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d12:	4a27      	ldr	r2, [pc, #156]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d1a:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <MX_GPIO_Init+0xe8>)
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2120      	movs	r1, #32
 8002d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d46:	f003 fdf1 	bl	800692c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2110      	movs	r1, #16
 8002d4e:	4819      	ldr	r0, [pc, #100]	; (8002db4 <MX_GPIO_Init+0xec>)
 8002d50:	f003 fdec 	bl	800692c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8002d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <MX_GPIO_Init+0xf0>)
 8002d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4619      	mov	r1, r3
 8002d68:	4812      	ldr	r0, [pc, #72]	; (8002db4 <MX_GPIO_Init+0xec>)
 8002d6a:	f003 fc35 	bl	80065d8 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	f107 0314 	add.w	r3, r7, #20
 8002d82:	4619      	mov	r1, r3
 8002d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d88:	f003 fc26 	bl	80065d8 <HAL_GPIO_Init>

    /*Configure GPIO pin : MAX_CS_Pin */
    GPIO_InitStruct.Pin = MAX_CS_Pin;
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d90:	2301      	movs	r3, #1
 8002d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	4804      	ldr	r0, [pc, #16]	; (8002db4 <MX_GPIO_Init+0xec>)
 8002da4:	f003 fc18 	bl	80065d8 <HAL_GPIO_Init>
}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	48000800 	.word	0x48000800
 8002db8:	10210000 	.word	0x10210000

08002dbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 5 */

    console_init();
 8002dc4:	f7ff f826 	bl	8001e14 <console_init>
    cmd_init();
 8002dc8:	f7fe fc1c 	bl	8001604 <cmd_init>
    log_init();
 8002dcc:	f7ff f9bc 	bl	8002148 <log_init>

    reflow_init(&reflow_cfg);
 8002dd0:	4808      	ldr	r0, [pc, #32]	; (8002df4 <StartDefaultTask+0x38>)
 8002dd2:	f002 f929 	bl	8005028 <reflow_init>

    console_start();
 8002dd6:	f7ff f855 	bl	8001e84 <console_start>
    cmd_start();
 8002dda:	f7fe fc59 	bl	8001690 <cmd_start>
    reflow_start();
 8002dde:	f002 f9dd 	bl	800519c <reflow_start>

    osThreadTerminate(defaultTaskHandle);
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <StartDefaultTask+0x3c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f008 f91a 	bl	800b020 <osThreadTerminate>
    /* Infinite loop */
    for (;;)
    {
        osDelay(1);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f008 f944 	bl	800b07a <osDelay>
 8002df2:	e7fb      	b.n	8002dec <StartDefaultTask+0x30>
 8002df4:	0800f9bc 	.word	0x0800f9bc
 8002df8:	20004fd4 	.word	0x20004fd4

08002dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM7)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8002e0e:	f003 fae1 	bl	80063d4 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40001400 	.word	0x40001400

08002e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e24:	b672      	cpsid	i
}
 8002e26:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002e28:	e7fe      	b.n	8002e28 <Error_Handler+0x8>

08002e2a <PID_Init>:
#include "log.h"

#define SAMESIGN(X, Y) ((X) <= 0) == ((Y) <= 0)

void PID_Init(PID_t *const pid, PID_cfg_t const *const pid_cfg)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]

    /* Clear controller memory */
    PID_Reset(pid);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f8fe 	bl	8003036 <PID_Reset>

    /* Store controller parameters */
    pid->Kp = pid_cfg->Kp;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
    pid->Ki = pid_cfg->Ki;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]
    pid->Kd = pid_cfg->Kd;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]
    pid->tau = pid_cfg->tau;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60da      	str	r2, [r3, #12]
    pid->Ts = pid_cfg->Ts;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
    pid->out_lim_max = pid_cfg->out_max;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	615a      	str	r2, [r3, #20]
    pid->out_lim_min = pid_cfg->out_min;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <PID_Calculate>:

float PID_Calculate(PID_t *const pid, float setpoint, float measurement)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b087      	sub	sp, #28
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e86:	edc7 0a01 	vstr	s1, [r7, #4]
    /* Compute error */
    float error = setpoint - measurement;
 8002e8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e96:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Compute proportional term */
    pid->proportional = pid->Kp * error;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	ed93 7a00 	vldr	s14, [r3]
 8002ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    /* Compute integral term */
    if ((pid->out == pid->out_lim_max || pid->out == pid->out_lim_min) && SAMESIGN(pid->out, error))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002eba:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec2:	d00a      	beq.n	8002eda <PID_Calculate+0x60>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ed0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d120      	bne.n	8002f1c <PID_Calculate+0xa2>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	bf94      	ite	ls
 8002eea:	2301      	movls	r3, #1
 8002eec:	2300      	movhi	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f083 0301 	eor.w	r3, r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	4053      	eors	r3, r2
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <PID_Calculate+0xa2>
    {
        pid->integral = pid->integral; /* Clamp integral term to avoid wind-up. */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	61da      	str	r2, [r3, #28]
 8002f1a:	e01c      	b.n	8002f56 <PID_Calculate+0xdc>
    }
    else
    {
        pid->integral = pid->integral + 0.5f * pid->Ki * pid->Ts * (error + pid->prev_error);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f28:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002f2c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8002f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f44:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    /* Compute filtered derivative term. 
     * Note: Taking derivative on measurement only. */
    pid->derivative = -(2.0f * pid->Kd * (measurement - pid->prev_measurement) + (2.0f * pid->tau - pid->Ts) * pid->derivative) / (2.0f * pid->tau + pid->Ts);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002f66:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	eef1 6a67 	vneg.f32	s13, s15
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f9e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Compute output */
    pid->out = pid->proportional + pid->integral + pid->derivative;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    /* Floor output */
    if (pid->out > pid->out_lim_max)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	dd04      	ble.n	8002ff6 <PID_Calculate+0x17c>
    {
        pid->out = pid->out_lim_max;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff4:	e00e      	b.n	8003014 <PID_Calculate+0x19a>
    }
    else if (pid->out < pid->out_lim_min)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	edd3 7a06 	vldr	s15, [r3, #24]
 8003002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	d503      	bpl.n	8003014 <PID_Calculate+0x19a>
    {
        pid->out = pid->out_lim_min;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Store error and measurement for next PID calculation. */
    pid->prev_error = error;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    pid->prev_measurement = measurement;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Return controller output */
    return pid->out;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	ee07 3a90 	vmov	s15, r3
}
 8003028:	eeb0 0a67 	vmov.f32	s0, s15
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <PID_Reset>:

void PID_Reset(PID_t *const pid)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
    pid->prev_error = 0.0f;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    pid->derivative = 0.0f;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
    pid->prev_measurement = 0.0f;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
    pid->out = 0.0f;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
    pid->proportional = 0.0f;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <_out_null>:
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <_out_char>:
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <_out_char+0x1e>
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 fffa 	bl	80060a8 <uart_putc>
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_strnlen_s>:
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e002      	b.n	80030d2 <_strnlen_s+0x16>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <_strnlen_s+0x28>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	603a      	str	r2, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f3      	bne.n	80030cc <_strnlen_s+0x10>
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_is_digit>:
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	71fb      	strb	r3, [r7, #7]
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2b2f      	cmp	r3, #47	; 0x2f
 8003104:	d904      	bls.n	8003110 <_is_digit+0x1a>
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	2b39      	cmp	r3, #57	; 0x39
 800310a:	d801      	bhi.n	8003110 <_is_digit+0x1a>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <_is_digit+0x1c>
 8003110:	2300      	movs	r3, #0
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_atoi>:
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e00e      	b.n	8003150 <_atoi+0x2c>
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4618      	mov	r0, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1c59      	adds	r1, r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6011      	str	r1, [r2, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	4403      	add	r3, r0
 800314c:	3b30      	subs	r3, #48	; 0x30
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ffcd 	bl	80030f6 <_is_digit>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e7      	bne.n	8003132 <_atoi+0xe>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <_out_rev>:
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d125      	bne.n	80031d4 <_out_rev+0x68>
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d120      	bne.n	80031d4 <_out_rev+0x68>
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e00a      	b.n	80031ae <_out_rev+0x42>
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	1c53      	adds	r3, r2, #1
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	68fc      	ldr	r4, [r7, #12]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	2020      	movs	r0, #32
 80031a6:	47a0      	blx	r4
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3301      	adds	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3f0      	bcc.n	8003198 <_out_rev+0x2c>
 80031b6:	e00d      	b.n	80031d4 <_out_rev+0x68>
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	3b01      	subs	r3, #1
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	4413      	add	r3, r2
 80031c4:	7818      	ldrb	r0, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	1c53      	adds	r3, r2, #1
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	68fc      	ldr	r4, [r7, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	47a0      	blx	r4
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <_out_rev+0x4c>
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <_out_rev+0x96>
 80031e4:	e007      	b.n	80031f6 <_out_rev+0x8a>
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	1c53      	adds	r3, r2, #1
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	68fc      	ldr	r4, [r7, #12]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	2020      	movs	r0, #32
 80031f4:	47a0      	blx	r4
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	429a      	cmp	r2, r3
 8003200:	d8f1      	bhi.n	80031e6 <_out_rev+0x7a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}

0800320c <_ntoa_format>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af04      	add	r7, sp, #16
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d136      	bne.n	8003292 <_ntoa_format+0x86>
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <_ntoa_format+0x50>
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <_ntoa_format+0x50>
 8003234:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d104      	bne.n	8003246 <_ntoa_format+0x3a>
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <_ntoa_format+0x50>
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	3b01      	subs	r3, #1
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324c:	e006      	b.n	800325c <_ntoa_format+0x50>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	61fa      	str	r2, [r7, #28]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4413      	add	r3, r2
 8003258:	2230      	movs	r2, #48	; 0x30
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	429a      	cmp	r2, r3
 8003262:	d20a      	bcs.n	800327a <_ntoa_format+0x6e>
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b1f      	cmp	r3, #31
 8003268:	d9f1      	bls.n	800324e <_ntoa_format+0x42>
 800326a:	e006      	b.n	800327a <_ntoa_format+0x6e>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	61fa      	str	r2, [r7, #28]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	2230      	movs	r2, #48	; 0x30
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d006      	beq.n	8003292 <_ntoa_format+0x86>
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d202      	bcs.n	8003292 <_ntoa_format+0x86>
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b1f      	cmp	r3, #31
 8003290:	d9ec      	bls.n	800326c <_ntoa_format+0x60>
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d058      	beq.n	800334e <_ntoa_format+0x142>
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d116      	bne.n	80032d4 <_ntoa_format+0xc8>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <_ntoa_format+0xc8>
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d003      	beq.n	80032bc <_ntoa_format+0xb0>
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d10b      	bne.n	80032d4 <_ntoa_format+0xc8>
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3b01      	subs	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <_ntoa_format+0xc8>
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d102      	bne.n	80032d4 <_ntoa_format+0xc8>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d10f      	bne.n	80032fa <_ntoa_format+0xee>
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <_ntoa_format+0xee>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b1f      	cmp	r3, #31
 80032e8:	d807      	bhi.n	80032fa <_ntoa_format+0xee>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	61fa      	str	r2, [r7, #28]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	2278      	movs	r2, #120	; 0x78
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e01f      	b.n	800333a <_ntoa_format+0x12e>
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d10f      	bne.n	8003320 <_ntoa_format+0x114>
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <_ntoa_format+0x114>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b1f      	cmp	r3, #31
 800330e:	d807      	bhi.n	8003320 <_ntoa_format+0x114>
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	61fa      	str	r2, [r7, #28]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4413      	add	r3, r2
 800331a:	2258      	movs	r2, #88	; 0x58
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e00c      	b.n	800333a <_ntoa_format+0x12e>
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	2b02      	cmp	r3, #2
 8003324:	d109      	bne.n	800333a <_ntoa_format+0x12e>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b1f      	cmp	r3, #31
 800332a:	d806      	bhi.n	800333a <_ntoa_format+0x12e>
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	61fa      	str	r2, [r7, #28]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4413      	add	r3, r2
 8003336:	2262      	movs	r2, #98	; 0x62
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b1f      	cmp	r3, #31
 800333e:	d806      	bhi.n	800334e <_ntoa_format+0x142>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	61fa      	str	r2, [r7, #28]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4413      	add	r3, r2
 800334a:	2230      	movs	r2, #48	; 0x30
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b1f      	cmp	r3, #31
 8003352:	d824      	bhi.n	800339e <_ntoa_format+0x192>
 8003354:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <_ntoa_format+0x160>
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	61fa      	str	r2, [r7, #28]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4413      	add	r3, r2
 8003366:	222d      	movs	r2, #45	; 0x2d
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e018      	b.n	800339e <_ntoa_format+0x192>
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <_ntoa_format+0x17a>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	61fa      	str	r2, [r7, #28]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4413      	add	r3, r2
 8003380:	222b      	movs	r2, #43	; 0x2b
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e00b      	b.n	800339e <_ntoa_format+0x192>
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <_ntoa_format+0x192>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	61fa      	str	r2, [r7, #28]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	2220      	movs	r2, #32
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	9302      	str	r3, [sp, #8]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff fed9 	bl	800316c <_out_rev>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ntoa_long>:
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b096      	sub	sp, #88	; 0x58
 80033c8:	af08      	add	r7, sp, #32
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	2300      	movs	r3, #0
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
 80033d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <_ntoa_long+0x20>
 80033dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033de:	f023 0310 	bic.w	r3, r3, #16
 80033e2:	657b      	str	r3, [r7, #84]	; 0x54
 80033e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <_ntoa_long+0x30>
 80033ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d033      	beq.n	800345c <_ntoa_long+0x98>
 80033f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80033fc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80033fe:	fb01 f202 	mul.w	r2, r1, r2
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003408:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800340c:	2b09      	cmp	r3, #9
 800340e:	d804      	bhi.n	800341a <_ntoa_long+0x56>
 8003410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003414:	3330      	adds	r3, #48	; 0x30
 8003416:	b2da      	uxtb	r2, r3
 8003418:	e00d      	b.n	8003436 <_ntoa_long+0x72>
 800341a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <_ntoa_long+0x64>
 8003424:	2241      	movs	r2, #65	; 0x41
 8003426:	e000      	b.n	800342a <_ntoa_long+0x66>
 8003428:	2261      	movs	r2, #97	; 0x61
 800342a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800342e:	4413      	add	r3, r2
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3b0a      	subs	r3, #10
 8003434:	b2da      	uxtb	r2, r3
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	6379      	str	r1, [r7, #52]	; 0x34
 800343c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003440:	440b      	add	r3, r1
 8003442:	f803 2c28 	strb.w	r2, [r3, #-40]
 8003446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
 8003450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <_ntoa_long+0x98>
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	2b1f      	cmp	r3, #31
 800345a:	d9cb      	bls.n	80033f4 <_ntoa_long+0x30>
 800345c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345e:	9306      	str	r3, [sp, #24]
 8003460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003462:	9305      	str	r3, [sp, #20]
 8003464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003466:	9304      	str	r3, [sp, #16]
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	9303      	str	r3, [sp, #12]
 800346c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003470:	9302      	str	r3, [sp, #8]
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff fec2 	bl	800320c <_ntoa_format>
 8003488:	4603      	mov	r3, r0
 800348a:	4618      	mov	r0, r3
 800348c:	3738      	adds	r7, #56	; 0x38
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_ntoa_long_long>:
 8003492:	b580      	push	{r7, lr}
 8003494:	b096      	sub	sp, #88	; 0x58
 8003496:	af08      	add	r7, sp, #32
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	2300      	movs	r3, #0
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
 80034a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d103      	bne.n	80034b4 <_ntoa_long_long+0x22>
 80034ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ae:	f023 0310 	bic.w	r3, r3, #16
 80034b2:	663b      	str	r3, [r7, #96]	; 0x60
 80034b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <_ntoa_long_long+0x34>
 80034be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d038      	beq.n	8003538 <_ntoa_long_long+0xa6>
 80034c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80034ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034ce:	f7fd fb77 	bl	8000bc0 <__aeabi_uldivmod>
 80034d2:	4613      	mov	r3, r2
 80034d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80034d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d804      	bhi.n	80034ea <_ntoa_long_long+0x58>
 80034e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034e4:	3330      	adds	r3, #48	; 0x30
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	e00d      	b.n	8003506 <_ntoa_long_long+0x74>
 80034ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <_ntoa_long_long+0x66>
 80034f4:	2241      	movs	r2, #65	; 0x41
 80034f6:	e000      	b.n	80034fa <_ntoa_long_long+0x68>
 80034f8:	2261      	movs	r2, #97	; 0x61
 80034fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034fe:	4413      	add	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	3b0a      	subs	r3, #10
 8003504:	b2da      	uxtb	r2, r3
 8003506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003508:	1c59      	adds	r1, r3, #1
 800350a:	6379      	str	r1, [r7, #52]	; 0x34
 800350c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003510:	440b      	add	r3, r1
 8003512:	f803 2c28 	strb.w	r2, [r3, #-40]
 8003516:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800351a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800351e:	f7fd fb4f 	bl	8000bc0 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800352a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800352e:	4313      	orrs	r3, r2
 8003530:	d002      	beq.n	8003538 <_ntoa_long_long+0xa6>
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	2b1f      	cmp	r3, #31
 8003536:	d9c6      	bls.n	80034c6 <_ntoa_long_long+0x34>
 8003538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800353c:	9206      	str	r2, [sp, #24]
 800353e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003540:	9205      	str	r2, [sp, #20]
 8003542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003544:	9204      	str	r2, [sp, #16]
 8003546:	9303      	str	r3, [sp, #12]
 8003548:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800354c:	9302      	str	r3, [sp, #8]
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	f107 0310 	add.w	r3, r7, #16
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff fe54 	bl	800320c <_ntoa_format>
 8003564:	4603      	mov	r3, r0
 8003566:	4618      	mov	r0, r3
 8003568:	3738      	adds	r7, #56	; 0x38
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <_ftoa>:
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b09d      	sub	sp, #116	; 0x74
 8003574:	af04      	add	r7, sp, #16
 8003576:	6178      	str	r0, [r7, #20]
 8003578:	6139      	str	r1, [r7, #16]
 800357a:	60fa      	str	r2, [r7, #12]
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	ed87 0b00 	vstr	d0, [r7]
 8003582:	2300      	movs	r3, #0
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800359a:	f7fd fa47 	bl	8000a2c <__aeabi_dcmpeq>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <_ftoa+0x54>
 80035a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a6:	9303      	str	r3, [sp, #12]
 80035a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	2303      	movs	r3, #3
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	4ba9      	ldr	r3, [pc, #676]	; (8003858 <_ftoa+0x2e8>)
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	6939      	ldr	r1, [r7, #16]
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff fdd6 	bl	800316c <_out_rev>
 80035c0:	4603      	mov	r3, r0
 80035c2:	e22b      	b.n	8003a1c <_ftoa+0x4ac>
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80035cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d0:	f7fd fa36 	bl	8000a40 <__aeabi_dcmplt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00f      	beq.n	80035fa <_ftoa+0x8a>
 80035da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035dc:	9303      	str	r3, [sp, #12]
 80035de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	2304      	movs	r3, #4
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	4b9d      	ldr	r3, [pc, #628]	; (800385c <_ftoa+0x2ec>)
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	6939      	ldr	r1, [r7, #16]
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f7ff fdbb 	bl	800316c <_out_rev>
 80035f6:	4603      	mov	r3, r0
 80035f8:	e210      	b.n	8003a1c <_ftoa+0x4ac>
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295
 80035fe:	4b98      	ldr	r3, [pc, #608]	; (8003860 <_ftoa+0x2f0>)
 8003600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003604:	f7fd fa3a 	bl	8000a7c <__aeabi_dcmpgt>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01d      	beq.n	800364a <_ftoa+0xda>
 800360e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <_ftoa+0xac>
 8003618:	4b92      	ldr	r3, [pc, #584]	; (8003864 <_ftoa+0x2f4>)
 800361a:	e000      	b.n	800361e <_ftoa+0xae>
 800361c:	4b92      	ldr	r3, [pc, #584]	; (8003868 <_ftoa+0x2f8>)
 800361e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003620:	f002 0204 	and.w	r2, r2, #4
 8003624:	2a00      	cmp	r2, #0
 8003626:	d001      	beq.n	800362c <_ftoa+0xbc>
 8003628:	2204      	movs	r2, #4
 800362a:	e000      	b.n	800362e <_ftoa+0xbe>
 800362c:	2203      	movs	r2, #3
 800362e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003630:	9103      	str	r1, [sp, #12]
 8003632:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003634:	9102      	str	r1, [sp, #8]
 8003636:	9201      	str	r2, [sp, #4]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	6939      	ldr	r1, [r7, #16]
 8003640:	6978      	ldr	r0, [r7, #20]
 8003642:	f7ff fd93 	bl	800316c <_out_rev>
 8003646:	4603      	mov	r3, r0
 8003648:	e1e8      	b.n	8003a1c <_ftoa+0x4ac>
 800364a:	a37f      	add	r3, pc, #508	; (adr r3, 8003848 <_ftoa+0x2d8>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003654:	f7fd fa12 	bl	8000a7c <__aeabi_dcmpgt>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <_ftoa+0x102>
 800365e:	a37c      	add	r3, pc, #496	; (adr r3, 8003850 <_ftoa+0x2e0>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003668:	f7fd f9ea 	bl	8000a40 <__aeabi_dcmplt>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00f      	beq.n	8003692 <_ftoa+0x122>
 8003672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	ed97 0b00 	vldr	d0, [r7]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	6939      	ldr	r1, [r7, #16]
 8003688:	6978      	ldr	r0, [r7, #20]
 800368a:	f000 f9d1 	bl	8003a30 <_etoa>
 800368e:	4603      	mov	r3, r0
 8003690:	e1c4      	b.n	8003a1c <_ftoa+0x4ac>
 8003692:	2300      	movs	r3, #0
 8003694:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036a4:	f7fd f9cc 	bl	8000a40 <__aeabi_dcmplt>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00e      	beq.n	80036cc <_ftoa+0x15c>
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80036b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036b8:	f04f 0000 	mov.w	r0, #0
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	f7fc fd94 	bl	80001ec <__aeabi_dsub>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	e9c7 2300 	strd	r2, r3, [r7]
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10e      	bne.n	80036f4 <_ftoa+0x184>
 80036d6:	2306      	movs	r3, #6
 80036d8:	673b      	str	r3, [r7, #112]	; 0x70
 80036da:	e00b      	b.n	80036f4 <_ftoa+0x184>
 80036dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036e6:	4413      	add	r3, r2
 80036e8:	2230      	movs	r2, #48	; 0x30
 80036ea:	f803 2c48 	strb.w	r2, [r3, #-72]
 80036ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f0:	3b01      	subs	r3, #1
 80036f2:	673b      	str	r3, [r7, #112]	; 0x70
 80036f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f6:	2b1f      	cmp	r3, #31
 80036f8:	d802      	bhi.n	8003700 <_ftoa+0x190>
 80036fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036fc:	2b09      	cmp	r3, #9
 80036fe:	d8ed      	bhi.n	80036dc <_ftoa+0x16c>
 8003700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003704:	f7fd f9c4 	bl	8000a90 <__aeabi_d2iz>
 8003708:	4603      	mov	r3, r0
 800370a:	657b      	str	r3, [r7, #84]	; 0x54
 800370c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800370e:	f7fc febb 	bl	8000488 <__aeabi_i2d>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800371a:	f7fc fd67 	bl	80001ec <__aeabi_dsub>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4a51      	ldr	r2, [pc, #324]	; (800386c <_ftoa+0x2fc>)
 8003728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f7fc ff13 	bl	800055c <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800373e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003742:	f7fd f9cd 	bl	8000ae0 <__aeabi_d2uiz>
 8003746:	4603      	mov	r3, r0
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
 800374a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800374c:	f7fc fe8c 	bl	8000468 <__aeabi_ui2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003758:	f7fc fd48 	bl	80001ec <__aeabi_dsub>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <_ftoa+0x300>)
 800376a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800376e:	f7fd f985 	bl	8000a7c <__aeabi_dcmpgt>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <_ftoa+0x236>
 8003778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377a:	3301      	adds	r3, #1
 800377c:	653b      	str	r3, [r7, #80]	; 0x50
 800377e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003780:	f7fc fe72 	bl	8000468 <__aeabi_ui2d>
 8003784:	4a39      	ldr	r2, [pc, #228]	; (800386c <_ftoa+0x2fc>)
 8003786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f7fd f96a 	bl	8000a68 <__aeabi_dcmpge>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01a      	beq.n	80037d0 <_ftoa+0x260>
 800379a:	2300      	movs	r3, #0
 800379c:	653b      	str	r3, [r7, #80]	; 0x50
 800379e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a0:	3301      	adds	r3, #1
 80037a2:	657b      	str	r3, [r7, #84]	; 0x54
 80037a4:	e014      	b.n	80037d0 <_ftoa+0x260>
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	4b31      	ldr	r3, [pc, #196]	; (8003870 <_ftoa+0x300>)
 80037ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037b0:	f7fd f946 	bl	8000a40 <__aeabi_dcmplt>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <_ftoa+0x260>
 80037ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <_ftoa+0x25a>
 80037c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <_ftoa+0x260>
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	3301      	adds	r3, #1
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
 80037d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d134      	bne.n	8003840 <_ftoa+0x2d0>
 80037d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80037d8:	f7fc fe56 	bl	8000488 <__aeabi_i2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037e4:	f7fc fd02 	bl	80001ec <__aeabi_dsub>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80037f0:	2301      	movs	r3, #1
 80037f2:	461c      	mov	r4, r3
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <_ftoa+0x300>)
 80037fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037fe:	f7fd f91f 	bl	8000a40 <__aeabi_dcmplt>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <_ftoa+0x29c>
 8003808:	2300      	movs	r3, #0
 800380a:	461c      	mov	r4, r3
 800380c:	b2e3      	uxtb	r3, r4
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <_ftoa+0x2bc>
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <_ftoa+0x300>)
 800381e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003822:	f7fd f92b 	bl	8000a7c <__aeabi_dcmpgt>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d067      	beq.n	80038fc <_ftoa+0x38c>
 800382c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8085 	beq.w	8003942 <_ftoa+0x3d2>
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383a:	3301      	adds	r3, #1
 800383c:	657b      	str	r3, [r7, #84]	; 0x54
 800383e:	e080      	b.n	8003942 <_ftoa+0x3d2>
 8003840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	e037      	b.n	80038b6 <_ftoa+0x346>
 8003846:	bf00      	nop
 8003848:	00000000 	.word	0x00000000
 800384c:	41cdcd65 	.word	0x41cdcd65
 8003850:	00000000 	.word	0x00000000
 8003854:	c1cdcd65 	.word	0xc1cdcd65
 8003858:	0800f084 	.word	0x0800f084
 800385c:	0800f088 	.word	0x0800f088
 8003860:	7fefffff 	.word	0x7fefffff
 8003864:	0800f090 	.word	0x0800f090
 8003868:	0800f098 	.word	0x0800f098
 800386c:	0800f9d0 	.word	0x0800f9d0
 8003870:	3fe00000 	.word	0x3fe00000
 8003874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003876:	3b01      	subs	r3, #1
 8003878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800387c:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <_ftoa+0x4b4>)
 800387e:	fba3 2301 	umull	r2, r3, r3, r1
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	1aca      	subs	r2, r1, r3
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003896:	3230      	adds	r2, #48	; 0x30
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800389e:	440b      	add	r3, r1
 80038a0:	f803 2c48 	strb.w	r2, [r3, #-72]
 80038a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a6:	4a5f      	ldr	r2, [pc, #380]	; (8003a24 <_ftoa+0x4b4>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	653b      	str	r3, [r7, #80]	; 0x50
 80038b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <_ftoa+0x34e>
 80038b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b8:	2b1f      	cmp	r3, #31
 80038ba:	d9db      	bls.n	8003874 <_ftoa+0x304>
 80038bc:	e00a      	b.n	80038d4 <_ftoa+0x364>
 80038be:	bf00      	nop
 80038c0:	e008      	b.n	80038d4 <_ftoa+0x364>
 80038c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80038c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038cc:	4413      	add	r3, r2
 80038ce:	2230      	movs	r2, #48	; 0x30
 80038d0:	f803 2c48 	strb.w	r2, [r3, #-72]
 80038d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d6:	2b1f      	cmp	r3, #31
 80038d8:	d804      	bhi.n	80038e4 <_ftoa+0x374>
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	1e5a      	subs	r2, r3, #1
 80038de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ee      	bne.n	80038c2 <_ftoa+0x352>
 80038e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e6:	2b1f      	cmp	r3, #31
 80038e8:	d82b      	bhi.n	8003942 <_ftoa+0x3d2>
 80038ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80038f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038f4:	4413      	add	r3, r2
 80038f6:	222e      	movs	r2, #46	; 0x2e
 80038f8:	f803 2c48 	strb.w	r2, [r3, #-72]
 80038fc:	e021      	b.n	8003942 <_ftoa+0x3d2>
 80038fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003900:	4b49      	ldr	r3, [pc, #292]	; (8003a28 <_ftoa+0x4b8>)
 8003902:	fb83 1302 	smull	r1, r3, r3, r2
 8003906:	1099      	asrs	r1, r3, #2
 8003908:	17d3      	asrs	r3, r2, #31
 800390a:	1ac9      	subs	r1, r1, r3
 800390c:	460b      	mov	r3, r1
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	1ad1      	subs	r1, r2, r3
 8003916:	b2ca      	uxtb	r2, r1
 8003918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391a:	1c59      	adds	r1, r3, #1
 800391c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800391e:	3230      	adds	r2, #48	; 0x30
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003926:	440b      	add	r3, r1
 8003928:	f803 2c48 	strb.w	r2, [r3, #-72]
 800392c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392e:	4a3e      	ldr	r2, [pc, #248]	; (8003a28 <_ftoa+0x4b8>)
 8003930:	fb82 1203 	smull	r1, r2, r2, r3
 8003934:	1092      	asrs	r2, r2, #2
 8003936:	17db      	asrs	r3, r3, #31
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	657b      	str	r3, [r7, #84]	; 0x54
 800393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <_ftoa+0x3da>
 8003942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003944:	2b1f      	cmp	r3, #31
 8003946:	d9da      	bls.n	80038fe <_ftoa+0x38e>
 8003948:	e000      	b.n	800394c <_ftoa+0x3dc>
 800394a:	bf00      	nop
 800394c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d124      	bne.n	80039a0 <_ftoa+0x430>
 8003956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01f      	beq.n	80039a0 <_ftoa+0x430>
 8003960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003962:	2b00      	cmp	r3, #0
 8003964:	d015      	beq.n	8003992 <_ftoa+0x422>
 8003966:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <_ftoa+0x408>
 800396e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00c      	beq.n	8003992 <_ftoa+0x422>
 8003978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397a:	3b01      	subs	r3, #1
 800397c:	677b      	str	r3, [r7, #116]	; 0x74
 800397e:	e008      	b.n	8003992 <_ftoa+0x422>
 8003980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003986:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800398a:	4413      	add	r3, r2
 800398c:	2230      	movs	r2, #48	; 0x30
 800398e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003996:	429a      	cmp	r2, r3
 8003998:	d202      	bcs.n	80039a0 <_ftoa+0x430>
 800399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399c:	2b1f      	cmp	r3, #31
 800399e:	d9ef      	bls.n	8003980 <_ftoa+0x410>
 80039a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a2:	2b1f      	cmp	r3, #31
 80039a4:	d82a      	bhi.n	80039fc <_ftoa+0x48c>
 80039a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <_ftoa+0x452>
 80039ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039b8:	4413      	add	r3, r2
 80039ba:	222d      	movs	r2, #45	; 0x2d
 80039bc:	f803 2c48 	strb.w	r2, [r3, #-72]
 80039c0:	e01c      	b.n	80039fc <_ftoa+0x48c>
 80039c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <_ftoa+0x470>
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039d6:	4413      	add	r3, r2
 80039d8:	222b      	movs	r2, #43	; 0x2b
 80039da:	f803 2c48 	strb.w	r2, [r3, #-72]
 80039de:	e00d      	b.n	80039fc <_ftoa+0x48c>
 80039e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <_ftoa+0x48c>
 80039ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039f4:	4413      	add	r3, r2
 80039f6:	2220      	movs	r2, #32
 80039f8:	f803 2c48 	strb.w	r2, [r3, #-72]
 80039fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039fe:	9303      	str	r3, [sp, #12]
 8003a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a02:	9302      	str	r3, [sp, #8]
 8003a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	f107 0318 	add.w	r3, r7, #24
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	f7ff fba9 	bl	800316c <_out_rev>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3764      	adds	r7, #100	; 0x64
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}
 8003a24:	cccccccd 	.word	0xcccccccd
 8003a28:	66666667 	.word	0x66666667
 8003a2c:	00000000 	.word	0x00000000

08003a30 <_etoa>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	b09d      	sub	sp, #116	; 0x74
 8003a36:	af06      	add	r7, sp, #24
 8003a38:	61f8      	str	r0, [r7, #28]
 8003a3a:	61b9      	str	r1, [r7, #24]
 8003a3c:	617a      	str	r2, [r7, #20]
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	ed87 0b02 	vstr	d0, [r7, #8]
 8003a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a4c:	f7fc ffee 	bl	8000a2c <__aeabi_dcmpeq>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d014      	beq.n	8003a80 <_etoa+0x50>
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	4bc3      	ldr	r3, [pc, #780]	; (8003d68 <_etoa+0x338>)
 8003a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a60:	f7fd f80c 	bl	8000a7c <__aeabi_dcmpgt>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <_etoa+0x50>
 8003a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a76:	f7fc ffe3 	bl	8000a40 <__aeabi_dcmplt>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d012      	beq.n	8003aa6 <_etoa+0x76>
 8003a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a84:	9302      	str	r3, [sp, #8]
 8003a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	ed97 0b02 	vldr	d0, [r7, #8]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	69f8      	ldr	r0, [r7, #28]
 8003a9e:	f7ff fd67 	bl	8003570 <_ftoa>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	e245      	b.n	8003f32 <_etoa+0x502>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	461e      	mov	r6, r3
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ab6:	f7fc ffc3 	bl	8000a40 <__aeabi_dcmplt>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <_etoa+0x94>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	461e      	mov	r6, r3
 8003ac4:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
 8003ac8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <_etoa+0xac>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <_etoa+0xbe>
 8003ae8:	2306      	movs	r3, #6
 8003aea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003af6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	0d0a      	lsrs	r2, r1, #20
 8003b04:	2300      	movs	r3, #0
 8003b06:	4613      	mov	r3, r2
 8003b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
 8003b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b16:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1a:	4994      	ldr	r1, [pc, #592]	; (8003d6c <_etoa+0x33c>)
 8003b1c:	ea02 0400 	and.w	r4, r2, r0
 8003b20:	ea03 0501 	and.w	r5, r3, r1
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	4b91      	ldr	r3, [pc, #580]	; (8003d70 <_etoa+0x340>)
 8003b2a:	ea44 0802 	orr.w	r8, r4, r2
 8003b2e:	ea45 0903 	orr.w	r9, r5, r3
 8003b32:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8003b36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b38:	f7fc fca6 	bl	8000488 <__aeabi_i2d>
 8003b3c:	a37e      	add	r3, pc, #504	; (adr r3, 8003d38 <_etoa+0x308>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fd0b 	bl	800055c <__aeabi_dmul>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	a37c      	add	r3, pc, #496	; (adr r3, 8003d40 <_etoa+0x310>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc fb4c 	bl	80001f0 <__adddf3>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	461d      	mov	r5, r3
 8003b60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	4b82      	ldr	r3, [pc, #520]	; (8003d74 <_etoa+0x344>)
 8003b6a:	f7fc fb3f 	bl	80001ec <__aeabi_dsub>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	a374      	add	r3, pc, #464	; (adr r3, 8003d48 <_etoa+0x318>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f7fc fcee 	bl	800055c <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc fb32 	bl	80001f0 <__adddf3>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7fc ff7c 	bl	8000a90 <__aeabi_d2iz>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003b9e:	f7fc fc73 	bl	8000488 <__aeabi_i2d>
 8003ba2:	a36b      	add	r3, pc, #428	; (adr r3, 8003d50 <_etoa+0x320>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f7fc fcd8 	bl	800055c <__aeabi_dmul>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	4b6f      	ldr	r3, [pc, #444]	; (8003d78 <_etoa+0x348>)
 8003bba:	f7fc fb19 	bl	80001f0 <__adddf3>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc ff63 	bl	8000a90 <__aeabi_d2iz>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003bd0:	f7fc fc5a 	bl	8000488 <__aeabi_i2d>
 8003bd4:	a360      	add	r3, pc, #384	; (adr r3, 8003d58 <_etoa+0x328>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fcbf 	bl	800055c <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4614      	mov	r4, r2
 8003be4:	461d      	mov	r5, r3
 8003be6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003be8:	f7fc fc4e 	bl	8000488 <__aeabi_i2d>
 8003bec:	a35c      	add	r3, pc, #368	; (adr r3, 8003d60 <_etoa+0x330>)
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f7fc fcb3 	bl	800055c <__aeabi_dmul>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7fc faf5 	bl	80001ec <__aeabi_dsub>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003c0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c0e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c12:	f7fc fca3 	bl	800055c <__aeabi_dmul>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c20:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003c24:	4618      	mov	r0, r3
 8003c26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	0503      	lsls	r3, r0, #20
 8003c34:	2200      	movs	r2, #0
 8003c36:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003c3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	f7fc fad3 	bl	80001f0 <__adddf3>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4690      	mov	r8, r2
 8003c50:	4699      	mov	r9, r3
 8003c52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c56:	f04f 0000 	mov.w	r0, #0
 8003c5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c5e:	f7fc fac5 	bl	80001ec <__aeabi_dsub>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4692      	mov	sl, r2
 8003c68:	469b      	mov	fp, r3
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <_etoa+0x34c>)
 8003c70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c74:	f7fc fd9c 	bl	80007b0 <__aeabi_ddiv>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <_etoa+0x350>)
 8003c86:	f7fc fab3 	bl	80001f0 <__adddf3>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c92:	f7fc fd8d 	bl	80007b0 <__aeabi_ddiv>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <_etoa+0x354>)
 8003ca4:	f7fc faa4 	bl	80001f0 <__adddf3>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003cb0:	f7fc fd7e 	bl	80007b0 <__aeabi_ddiv>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4650      	mov	r0, sl
 8003cba:	4659      	mov	r1, fp
 8003cbc:	f7fc fa98 	bl	80001f0 <__adddf3>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	f7fc fd72 	bl	80007b0 <__aeabi_ddiv>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <_etoa+0x340>)
 8003cda:	f7fc fa89 	bl	80001f0 <__adddf3>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	f7fc fc39 	bl	800055c <__aeabi_dmul>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cfa:	f7fc fea1 	bl	8000a40 <__aeabi_dcmplt>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <_etoa+0x2f0>
 8003d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d06:	3b01      	subs	r3, #1
 8003d08:	657b      	str	r3, [r7, #84]	; 0x54
 8003d0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <_etoa+0x350>)
 8003d14:	f7fc fd4c 	bl	80007b0 <__aeabi_ddiv>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d22:	2b63      	cmp	r3, #99	; 0x63
 8003d24:	dc30      	bgt.n	8003d88 <_etoa+0x358>
 8003d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d28:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003d2c:	db2c      	blt.n	8003d88 <_etoa+0x358>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e02b      	b.n	8003d8a <_etoa+0x35a>
 8003d32:	bf00      	nop
 8003d34:	f3af 8000 	nop.w
 8003d38:	509f79fb 	.word	0x509f79fb
 8003d3c:	3fd34413 	.word	0x3fd34413
 8003d40:	8b60c8b3 	.word	0x8b60c8b3
 8003d44:	3fc68a28 	.word	0x3fc68a28
 8003d48:	636f4361 	.word	0x636f4361
 8003d4c:	3fd287a7 	.word	0x3fd287a7
 8003d50:	0979a371 	.word	0x0979a371
 8003d54:	400a934f 	.word	0x400a934f
 8003d58:	bbb55516 	.word	0xbbb55516
 8003d5c:	40026bb1 	.word	0x40026bb1
 8003d60:	fefa39ef 	.word	0xfefa39ef
 8003d64:	3fe62e42 	.word	0x3fe62e42
 8003d68:	7fefffff 	.word	0x7fefffff
 8003d6c:	000fffff 	.word	0x000fffff
 8003d70:	3ff00000 	.word	0x3ff00000
 8003d74:	3ff80000 	.word	0x3ff80000
 8003d78:	3fe00000 	.word	0x3fe00000
 8003d7c:	402c0000 	.word	0x402c0000
 8003d80:	40240000 	.word	0x40240000
 8003d84:	40180000 	.word	0x40180000
 8003d88:	2305      	movs	r3, #5
 8003d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03d      	beq.n	8003e14 <_etoa+0x3e4>
 8003d98:	a369      	add	r3, pc, #420	; (adr r3, 8003f40 <_etoa+0x510>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003da2:	f7fc fe61 	bl	8000a68 <__aeabi_dcmpge>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d024      	beq.n	8003df6 <_etoa+0x3c6>
 8003dac:	a366      	add	r3, pc, #408	; (adr r3, 8003f48 <_etoa+0x518>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003db6:	f7fc fe43 	bl	8000a40 <__aeabi_dcmplt>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01a      	beq.n	8003df6 <_etoa+0x3c6>
 8003dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	da07      	bge.n	8003dda <_etoa+0x3aa>
 8003dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dd8:	e002      	b.n	8003de0 <_etoa+0x3b0>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dec:	2300      	movs	r3, #0
 8003dee:	653b      	str	r3, [r7, #80]	; 0x50
 8003df0:	2300      	movs	r3, #0
 8003df2:	657b      	str	r3, [r7, #84]	; 0x54
 8003df4:	e00e      	b.n	8003e14 <_etoa+0x3e4>
 8003df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <_etoa+0x3e4>
 8003dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <_etoa+0x3e4>
 8003e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d904      	bls.n	8003e2e <_etoa+0x3fe>
 8003e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2c:	e001      	b.n	8003e32 <_etoa+0x402>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <_etoa+0x418>
 8003e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <_etoa+0x418>
 8003e44:	2300      	movs	r3, #0
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <_etoa+0x432>
 8003e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e56:	f7fc fcab 	bl	80007b0 <__aeabi_ddiv>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <_etoa+0x44c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	e003      	b.n	8003e84 <_etoa+0x454>
 8003e7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003e80:	ed87 7b00 	vstr	d7, [r7]
 8003e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	ed97 0b00 	vldr	d0, [r7]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	69b9      	ldr	r1, [r7, #24]
 8003ea2:	69f8      	ldr	r0, [r7, #28]
 8003ea4:	f7ff fb64 	bl	8003570 <_ftoa>
 8003ea8:	6178      	str	r0, [r7, #20]
 8003eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03f      	beq.n	8003f30 <_etoa+0x500>
 8003eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <_etoa+0x490>
 8003ebc:	2045      	movs	r0, #69	; 0x45
 8003ebe:	e000      	b.n	8003ec2 <_etoa+0x492>
 8003ec0:	2065      	movs	r0, #101	; 0x65
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	1c53      	adds	r3, r2, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	69fc      	ldr	r4, [r7, #28]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	47a0      	blx	r4
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfb8      	it	lt
 8003ed6:	425b      	neglt	r3, r3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003edc:	0fdb      	lsrs	r3, r3, #31
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ee2:	3a01      	subs	r2, #1
 8003ee4:	2105      	movs	r1, #5
 8003ee6:	9105      	str	r1, [sp, #20]
 8003ee8:	9204      	str	r2, [sp, #16]
 8003eea:	2200      	movs	r2, #0
 8003eec:	9203      	str	r2, [sp, #12]
 8003eee:	220a      	movs	r2, #10
 8003ef0:	9202      	str	r2, [sp, #8]
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	69b9      	ldr	r1, [r7, #24]
 8003efc:	69f8      	ldr	r0, [r7, #28]
 8003efe:	f7ff fa61 	bl	80033c4 <_ntoa_long>
 8003f02:	6178      	str	r0, [r7, #20]
 8003f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00f      	beq.n	8003f30 <_etoa+0x500>
 8003f10:	e007      	b.n	8003f22 <_etoa+0x4f2>
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	1c53      	adds	r3, r2, #1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	69fc      	ldr	r4, [r7, #28]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	2020      	movs	r0, #32
 8003f20:	47a0      	blx	r4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d8f0      	bhi.n	8003f12 <_etoa+0x4e2>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4618      	mov	r0, r3
 8003f34:	375c      	adds	r7, #92	; 0x5c
 8003f36:	46bd      	mov	sp, r7
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3c:	f3af 8000 	nop.w
 8003f40:	eb1c432d 	.word	0xeb1c432d
 8003f44:	3f1a36e2 	.word	0x3f1a36e2
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	412e8480 	.word	0x412e8480

08003f50 <_vsnprintf>:
 8003f50:	b5b0      	push	{r4, r5, r7, lr}
 8003f52:	b0a0      	sub	sp, #128	; 0x80
 8003f54:	af0a      	add	r7, sp, #40	; 0x28
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 8494 	bne.w	8004892 <_vsnprintf+0x942>
 8003f6a:	4ba0      	ldr	r3, [pc, #640]	; (80041ec <_vsnprintf+0x29c>)
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	f000 bc90 	b.w	8004892 <_vsnprintf+0x942>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b25      	cmp	r3, #37	; 0x25
 8003f78:	d00d      	beq.n	8003f96 <_vsnprintf+0x46>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	7818      	ldrb	r0, [r3, #0]
 8003f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f80:	1c53      	adds	r3, r2, #1
 8003f82:	647b      	str	r3, [r7, #68]	; 0x44
 8003f84:	68fc      	ldr	r4, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	47a0      	blx	r4
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	f000 bc7e 	b.w	8004892 <_vsnprintf+0x942>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	3b20      	subs	r3, #32
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d856      	bhi.n	8004058 <_vsnprintf+0x108>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <_vsnprintf+0x60>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08004031 	.word	0x08004031
 8003fb4:	08004059 	.word	0x08004059
 8003fb8:	08004059 	.word	0x08004059
 8003fbc:	08004045 	.word	0x08004045
 8003fc0:	08004059 	.word	0x08004059
 8003fc4:	08004059 	.word	0x08004059
 8003fc8:	08004059 	.word	0x08004059
 8003fcc:	08004059 	.word	0x08004059
 8003fd0:	08004059 	.word	0x08004059
 8003fd4:	08004059 	.word	0x08004059
 8003fd8:	08004059 	.word	0x08004059
 8003fdc:	0800401d 	.word	0x0800401d
 8003fe0:	08004059 	.word	0x08004059
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	08004059 	.word	0x08004059
 8003fec:	08004059 	.word	0x08004059
 8003ff0:	08003ff5 	.word	0x08003ff5
 8003ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	2301      	movs	r3, #1
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
 8004006:	e02a      	b.n	800405e <_vsnprintf+0x10e>
 8004008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	657b      	str	r3, [r7, #84]	; 0x54
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	2301      	movs	r3, #1
 8004018:	64bb      	str	r3, [r7, #72]	; 0x48
 800401a:	e020      	b.n	800405e <_vsnprintf+0x10e>
 800401c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	657b      	str	r3, [r7, #84]	; 0x54
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	2301      	movs	r3, #1
 800402c:	64bb      	str	r3, [r7, #72]	; 0x48
 800402e:	e016      	b.n	800405e <_vsnprintf+0x10e>
 8004030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	657b      	str	r3, [r7, #84]	; 0x54
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	3301      	adds	r3, #1
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	2301      	movs	r3, #1
 8004040:	64bb      	str	r3, [r7, #72]	; 0x48
 8004042:	e00c      	b.n	800405e <_vsnprintf+0x10e>
 8004044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004046:	f043 0310 	orr.w	r3, r3, #16
 800404a:	657b      	str	r3, [r7, #84]	; 0x54
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	2301      	movs	r3, #1
 8004054:	64bb      	str	r3, [r7, #72]	; 0x48
 8004056:	e002      	b.n	800405e <_vsnprintf+0x10e>
 8004058:	2300      	movs	r3, #0
 800405a:	64bb      	str	r3, [r7, #72]	; 0x48
 800405c:	bf00      	nop
 800405e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004060:	2b00      	cmp	r3, #0
 8004062:	d19d      	bne.n	8003fa0 <_vsnprintf+0x50>
 8004064:	2300      	movs	r3, #0
 8004066:	653b      	str	r3, [r7, #80]	; 0x50
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f842 	bl	80030f6 <_is_digit>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <_vsnprintf+0x134>
 8004078:	463b      	mov	r3, r7
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f852 	bl	8003124 <_atoi>
 8004080:	6538      	str	r0, [r7, #80]	; 0x50
 8004082:	e018      	b.n	80040b6 <_vsnprintf+0x166>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b2a      	cmp	r3, #42	; 0x2a
 800408a:	d114      	bne.n	80040b6 <_vsnprintf+0x166>
 800408c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800408e:	1d1a      	adds	r2, r3, #4
 8004090:	66ba      	str	r2, [r7, #104]	; 0x68
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	633b      	str	r3, [r7, #48]	; 0x30
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	2b00      	cmp	r3, #0
 800409a:	da07      	bge.n	80040ac <_vsnprintf+0x15c>
 800409c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	657b      	str	r3, [r7, #84]	; 0x54
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	425b      	negs	r3, r3
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
 80040aa:	e001      	b.n	80040b0 <_vsnprintf+0x160>
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	653b      	str	r3, [r7, #80]	; 0x50
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	2300      	movs	r3, #0
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b2e      	cmp	r3, #46	; 0x2e
 80040c0:	d124      	bne.n	800410c <_vsnprintf+0x1bc>
 80040c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c8:	657b      	str	r3, [r7, #84]	; 0x54
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f80e 	bl	80030f6 <_is_digit>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <_vsnprintf+0x19c>
 80040e0:	463b      	mov	r3, r7
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff f81e 	bl	8003124 <_atoi>
 80040e8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80040ea:	e00f      	b.n	800410c <_vsnprintf+0x1bc>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b2a      	cmp	r3, #42	; 0x2a
 80040f2:	d10b      	bne.n	800410c <_vsnprintf+0x1bc>
 80040f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	66ba      	str	r2, [r7, #104]	; 0x68
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	3b68      	subs	r3, #104	; 0x68
 8004112:	2b12      	cmp	r3, #18
 8004114:	d866      	bhi.n	80041e4 <_vsnprintf+0x294>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <_vsnprintf+0x1cc>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800418f 	.word	0x0800418f
 8004120:	080041e5 	.word	0x080041e5
 8004124:	080041c5 	.word	0x080041c5
 8004128:	080041e5 	.word	0x080041e5
 800412c:	08004169 	.word	0x08004169
 8004130:	080041e5 	.word	0x080041e5
 8004134:	080041e5 	.word	0x080041e5
 8004138:	080041e5 	.word	0x080041e5
 800413c:	080041e5 	.word	0x080041e5
 8004140:	080041e5 	.word	0x080041e5
 8004144:	080041e5 	.word	0x080041e5
 8004148:	080041e5 	.word	0x080041e5
 800414c:	080041b5 	.word	0x080041b5
 8004150:	080041e5 	.word	0x080041e5
 8004154:	080041e5 	.word	0x080041e5
 8004158:	080041e5 	.word	0x080041e5
 800415c:	080041e5 	.word	0x080041e5
 8004160:	080041e5 	.word	0x080041e5
 8004164:	080041d5 	.word	0x080041d5
 8004168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	657b      	str	r3, [r7, #84]	; 0x54
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b6c      	cmp	r3, #108	; 0x6c
 800417c:	d134      	bne.n	80041e8 <_vsnprintf+0x298>
 800417e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004184:	657b      	str	r3, [r7, #84]	; 0x54
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	e02c      	b.n	80041e8 <_vsnprintf+0x298>
 800418e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b68      	cmp	r3, #104	; 0x68
 80041a2:	d125      	bne.n	80041f0 <_vsnprintf+0x2a0>
 80041a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041aa:	657b      	str	r3, [r7, #84]	; 0x54
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	e01d      	b.n	80041f0 <_vsnprintf+0x2a0>
 80041b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	e016      	b.n	80041f2 <_vsnprintf+0x2a2>
 80041c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ca:	657b      	str	r3, [r7, #84]	; 0x54
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	e00e      	b.n	80041f2 <_vsnprintf+0x2a2>
 80041d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	657b      	str	r3, [r7, #84]	; 0x54
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	3301      	adds	r3, #1
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	e006      	b.n	80041f2 <_vsnprintf+0x2a2>
 80041e4:	bf00      	nop
 80041e6:	e004      	b.n	80041f2 <_vsnprintf+0x2a2>
 80041e8:	bf00      	nop
 80041ea:	e002      	b.n	80041f2 <_vsnprintf+0x2a2>
 80041ec:	0800307b 	.word	0x0800307b
 80041f0:	bf00      	nop
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	3b25      	subs	r3, #37	; 0x25
 80041f8:	2b53      	cmp	r3, #83	; 0x53
 80041fa:	f200 833d 	bhi.w	8004878 <_vsnprintf+0x928>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <_vsnprintf+0x2b4>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004861 	.word	0x08004861
 8004208:	08004879 	.word	0x08004879
 800420c:	08004879 	.word	0x08004879
 8004210:	08004879 	.word	0x08004879
 8004214:	08004879 	.word	0x08004879
 8004218:	08004879 	.word	0x08004879
 800421c:	08004879 	.word	0x08004879
 8004220:	08004879 	.word	0x08004879
 8004224:	08004879 	.word	0x08004879
 8004228:	08004879 	.word	0x08004879
 800422c:	08004879 	.word	0x08004879
 8004230:	08004879 	.word	0x08004879
 8004234:	08004879 	.word	0x08004879
 8004238:	08004879 	.word	0x08004879
 800423c:	08004879 	.word	0x08004879
 8004240:	08004879 	.word	0x08004879
 8004244:	08004879 	.word	0x08004879
 8004248:	08004879 	.word	0x08004879
 800424c:	08004879 	.word	0x08004879
 8004250:	08004879 	.word	0x08004879
 8004254:	08004879 	.word	0x08004879
 8004258:	08004879 	.word	0x08004879
 800425c:	08004879 	.word	0x08004879
 8004260:	08004879 	.word	0x08004879
 8004264:	08004879 	.word	0x08004879
 8004268:	08004879 	.word	0x08004879
 800426c:	08004879 	.word	0x08004879
 8004270:	08004879 	.word	0x08004879
 8004274:	08004879 	.word	0x08004879
 8004278:	08004879 	.word	0x08004879
 800427c:	08004879 	.word	0x08004879
 8004280:	08004879 	.word	0x08004879
 8004284:	0800462f 	.word	0x0800462f
 8004288:	080045e3 	.word	0x080045e3
 800428c:	0800462f 	.word	0x0800462f
 8004290:	08004879 	.word	0x08004879
 8004294:	08004879 	.word	0x08004879
 8004298:	08004879 	.word	0x08004879
 800429c:	08004879 	.word	0x08004879
 80042a0:	08004879 	.word	0x08004879
 80042a4:	08004879 	.word	0x08004879
 80042a8:	08004879 	.word	0x08004879
 80042ac:	08004879 	.word	0x08004879
 80042b0:	08004879 	.word	0x08004879
 80042b4:	08004879 	.word	0x08004879
 80042b8:	08004879 	.word	0x08004879
 80042bc:	08004879 	.word	0x08004879
 80042c0:	08004879 	.word	0x08004879
 80042c4:	08004879 	.word	0x08004879
 80042c8:	08004879 	.word	0x08004879
 80042cc:	08004879 	.word	0x08004879
 80042d0:	08004355 	.word	0x08004355
 80042d4:	08004879 	.word	0x08004879
 80042d8:	08004879 	.word	0x08004879
 80042dc:	08004879 	.word	0x08004879
 80042e0:	08004879 	.word	0x08004879
 80042e4:	08004879 	.word	0x08004879
 80042e8:	08004879 	.word	0x08004879
 80042ec:	08004879 	.word	0x08004879
 80042f0:	08004879 	.word	0x08004879
 80042f4:	08004879 	.word	0x08004879
 80042f8:	08004355 	.word	0x08004355
 80042fc:	0800469b 	.word	0x0800469b
 8004300:	08004355 	.word	0x08004355
 8004304:	0800462f 	.word	0x0800462f
 8004308:	080045e3 	.word	0x080045e3
 800430c:	0800462f 	.word	0x0800462f
 8004310:	08004879 	.word	0x08004879
 8004314:	08004355 	.word	0x08004355
 8004318:	08004879 	.word	0x08004879
 800431c:	08004879 	.word	0x08004879
 8004320:	08004879 	.word	0x08004879
 8004324:	08004879 	.word	0x08004879
 8004328:	08004879 	.word	0x08004879
 800432c:	08004355 	.word	0x08004355
 8004330:	080047d3 	.word	0x080047d3
 8004334:	08004879 	.word	0x08004879
 8004338:	08004879 	.word	0x08004879
 800433c:	0800470f 	.word	0x0800470f
 8004340:	08004879 	.word	0x08004879
 8004344:	08004355 	.word	0x08004355
 8004348:	08004879 	.word	0x08004879
 800434c:	08004879 	.word	0x08004879
 8004350:	08004355 	.word	0x08004355
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b78      	cmp	r3, #120	; 0x78
 800435a:	d003      	beq.n	8004364 <_vsnprintf+0x414>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b58      	cmp	r3, #88	; 0x58
 8004362:	d102      	bne.n	800436a <_vsnprintf+0x41a>
 8004364:	2310      	movs	r3, #16
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
 8004368:	e013      	b.n	8004392 <_vsnprintf+0x442>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b6f      	cmp	r3, #111	; 0x6f
 8004370:	d102      	bne.n	8004378 <_vsnprintf+0x428>
 8004372:	2308      	movs	r3, #8
 8004374:	643b      	str	r3, [r7, #64]	; 0x40
 8004376:	e00c      	b.n	8004392 <_vsnprintf+0x442>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b62      	cmp	r3, #98	; 0x62
 800437e:	d102      	bne.n	8004386 <_vsnprintf+0x436>
 8004380:	2302      	movs	r3, #2
 8004382:	643b      	str	r3, [r7, #64]	; 0x40
 8004384:	e005      	b.n	8004392 <_vsnprintf+0x442>
 8004386:	230a      	movs	r3, #10
 8004388:	643b      	str	r3, [r7, #64]	; 0x40
 800438a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438c:	f023 0310 	bic.w	r3, r3, #16
 8004390:	657b      	str	r3, [r7, #84]	; 0x54
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b58      	cmp	r3, #88	; 0x58
 8004398:	d103      	bne.n	80043a2 <_vsnprintf+0x452>
 800439a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439c:	f043 0320 	orr.w	r3, r3, #32
 80043a0:	657b      	str	r3, [r7, #84]	; 0x54
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b69      	cmp	r3, #105	; 0x69
 80043a8:	d007      	beq.n	80043ba <_vsnprintf+0x46a>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d003      	beq.n	80043ba <_vsnprintf+0x46a>
 80043b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b4:	f023 030c 	bic.w	r3, r3, #12
 80043b8:	657b      	str	r3, [r7, #84]	; 0x54
 80043ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <_vsnprintf+0x47c>
 80043c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	657b      	str	r3, [r7, #84]	; 0x54
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b69      	cmp	r3, #105	; 0x69
 80043d2:	d004      	beq.n	80043de <_vsnprintf+0x48e>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b64      	cmp	r3, #100	; 0x64
 80043da:	f040 808e 	bne.w	80044fa <_vsnprintf+0x5aa>
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02f      	beq.n	8004448 <_vsnprintf+0x4f8>
 80043e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ea:	3307      	adds	r3, #7
 80043ec:	f023 0307 	bic.w	r3, r3, #7
 80043f0:	f103 0208 	add.w	r2, r3, #8
 80043f4:	66ba      	str	r2, [r7, #104]	; 0x68
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80043fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004402:	2a00      	cmp	r2, #0
 8004404:	f173 0100 	sbcs.w	r1, r3, #0
 8004408:	da02      	bge.n	8004410 <_vsnprintf+0x4c0>
 800440a:	4252      	negs	r2, r2
 800440c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	0fdb      	lsrs	r3, r3, #31
 8004418:	b2dc      	uxtb	r4, r3
 800441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441c:	461a      	mov	r2, r3
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8004424:	9508      	str	r5, [sp, #32]
 8004426:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8004428:	9507      	str	r5, [sp, #28]
 800442a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800442c:	9506      	str	r5, [sp, #24]
 800442e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004432:	9402      	str	r4, [sp, #8]
 8004434:	e9cd 0100 	strd	r0, r1, [sp]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff f827 	bl	8003492 <_ntoa_long_long>
 8004444:	6478      	str	r0, [r7, #68]	; 0x44
 8004446:	e0c8      	b.n	80045da <_vsnprintf+0x68a>
 8004448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01e      	beq.n	8004490 <_vsnprintf+0x540>
 8004452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004454:	1d1a      	adds	r2, r3, #4
 8004456:	66ba      	str	r2, [r7, #104]	; 0x68
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	bfb8      	it	lt
 8004462:	425b      	neglt	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	0fdb      	lsrs	r3, r3, #31
 800446a:	b2db      	uxtb	r3, r3
 800446c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800446e:	9205      	str	r2, [sp, #20]
 8004470:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004472:	9204      	str	r2, [sp, #16]
 8004474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004476:	9203      	str	r2, [sp, #12]
 8004478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800447a:	9202      	str	r2, [sp, #8]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	9100      	str	r1, [sp, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7fe ff9c 	bl	80033c4 <_ntoa_long>
 800448c:	6478      	str	r0, [r7, #68]	; 0x44
 800448e:	e0a4      	b.n	80045da <_vsnprintf+0x68a>
 8004490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <_vsnprintf+0x556>
 800449a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800449c:	1d1a      	adds	r2, r3, #4
 800449e:	66ba      	str	r2, [r7, #104]	; 0x68
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	e00e      	b.n	80044c4 <_vsnprintf+0x574>
 80044a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <_vsnprintf+0x56c>
 80044b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	66ba      	str	r2, [r7, #104]	; 0x68
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	e003      	b.n	80044c4 <_vsnprintf+0x574>
 80044bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	66ba      	str	r2, [r7, #104]	; 0x68
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bfb8      	it	lt
 80044cc:	425b      	neglt	r3, r3
 80044ce:	4619      	mov	r1, r3
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	0fdb      	lsrs	r3, r3, #31
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044d8:	9205      	str	r2, [sp, #20]
 80044da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044dc:	9204      	str	r2, [sp, #16]
 80044de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e0:	9203      	str	r2, [sp, #12]
 80044e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044e4:	9202      	str	r2, [sp, #8]
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	9100      	str	r1, [sp, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7fe ff67 	bl	80033c4 <_ntoa_long>
 80044f6:	6478      	str	r0, [r7, #68]	; 0x44
 80044f8:	e06f      	b.n	80045da <_vsnprintf+0x68a>
 80044fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <_vsnprintf+0x5f6>
 8004504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004506:	3307      	adds	r3, #7
 8004508:	f023 0307 	bic.w	r3, r3, #7
 800450c:	f103 0208 	add.w	r2, r3, #8
 8004510:	66ba      	str	r2, [r7, #104]	; 0x68
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004518:	4608      	mov	r0, r1
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8004520:	9408      	str	r4, [sp, #32]
 8004522:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004524:	9407      	str	r4, [sp, #28]
 8004526:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004528:	9406      	str	r4, [sp, #24]
 800452a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800452e:	2100      	movs	r1, #0
 8004530:	9102      	str	r1, [sp, #8]
 8004532:	e9cd 2300 	strd	r2, r3, [sp]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7fe ffa8 	bl	8003492 <_ntoa_long_long>
 8004542:	6478      	str	r0, [r7, #68]	; 0x44
 8004544:	e049      	b.n	80045da <_vsnprintf+0x68a>
 8004546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <_vsnprintf+0x62e>
 8004550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004552:	1d1a      	adds	r2, r3, #4
 8004554:	66ba      	str	r2, [r7, #104]	; 0x68
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800455a:	9205      	str	r2, [sp, #20]
 800455c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800455e:	9204      	str	r2, [sp, #16]
 8004560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004562:	9203      	str	r2, [sp, #12]
 8004564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004566:	9202      	str	r2, [sp, #8]
 8004568:	2200      	movs	r2, #0
 800456a:	9201      	str	r2, [sp, #4]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7fe ff25 	bl	80033c4 <_ntoa_long>
 800457a:	6478      	str	r0, [r7, #68]	; 0x44
 800457c:	e02d      	b.n	80045da <_vsnprintf+0x68a>
 800457e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <_vsnprintf+0x644>
 8004588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800458a:	1d1a      	adds	r2, r3, #4
 800458c:	66ba      	str	r2, [r7, #104]	; 0x68
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e00e      	b.n	80045b2 <_vsnprintf+0x662>
 8004594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <_vsnprintf+0x65a>
 800459e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	66ba      	str	r2, [r7, #104]	; 0x68
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	e003      	b.n	80045b2 <_vsnprintf+0x662>
 80045aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ac:	1d1a      	adds	r2, r3, #4
 80045ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b6:	9305      	str	r3, [sp, #20]
 80045b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045be:	9303      	str	r3, [sp, #12]
 80045c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c2:	9302      	str	r3, [sp, #8]
 80045c4:	2300      	movs	r3, #0
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7fe fef6 	bl	80033c4 <_ntoa_long>
 80045d8:	6478      	str	r0, [r7, #68]	; 0x44
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	e157      	b.n	8004892 <_vsnprintf+0x942>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b46      	cmp	r3, #70	; 0x46
 80045e8:	d103      	bne.n	80045f2 <_vsnprintf+0x6a2>
 80045ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ec:	f043 0320 	orr.w	r3, r3, #32
 80045f0:	657b      	str	r3, [r7, #84]	; 0x54
 80045f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045f4:	3307      	adds	r3, #7
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	f103 0208 	add.w	r2, r3, #8
 80045fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8004600:	ed93 7b00 	vldr	d7, [r3]
 8004604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	eeb0 0a47 	vmov.f32	s0, s14
 8004614:	eef0 0a67 	vmov.f32	s1, s15
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7fe ffa6 	bl	8003570 <_ftoa>
 8004624:	6478      	str	r0, [r7, #68]	; 0x44
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	3301      	adds	r3, #1
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	e131      	b.n	8004892 <_vsnprintf+0x942>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b67      	cmp	r3, #103	; 0x67
 8004634:	d003      	beq.n	800463e <_vsnprintf+0x6ee>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b47      	cmp	r3, #71	; 0x47
 800463c:	d103      	bne.n	8004646 <_vsnprintf+0x6f6>
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004644:	657b      	str	r3, [r7, #84]	; 0x54
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b45      	cmp	r3, #69	; 0x45
 800464c:	d003      	beq.n	8004656 <_vsnprintf+0x706>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b47      	cmp	r3, #71	; 0x47
 8004654:	d103      	bne.n	800465e <_vsnprintf+0x70e>
 8004656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004658:	f043 0320 	orr.w	r3, r3, #32
 800465c:	657b      	str	r3, [r7, #84]	; 0x54
 800465e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004660:	3307      	adds	r3, #7
 8004662:	f023 0307 	bic.w	r3, r3, #7
 8004666:	f103 0208 	add.w	r2, r3, #8
 800466a:	66ba      	str	r2, [r7, #104]	; 0x68
 800466c:	ed93 7b00 	vldr	d7, [r3]
 8004670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004672:	9302      	str	r3, [sp, #8]
 8004674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	eeb0 0a47 	vmov.f32	s0, s14
 8004680:	eef0 0a67 	vmov.f32	s1, s15
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff f9d0 	bl	8003a30 <_etoa>
 8004690:	6478      	str	r0, [r7, #68]	; 0x44
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	e0fb      	b.n	8004892 <_vsnprintf+0x942>
 800469a:	2301      	movs	r3, #1
 800469c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10e      	bne.n	80046c6 <_vsnprintf+0x776>
 80046a8:	e007      	b.n	80046ba <_vsnprintf+0x76a>
 80046aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ac:	1c53      	adds	r3, r2, #1
 80046ae:	647b      	str	r3, [r7, #68]	; 0x44
 80046b0:	68fc      	ldr	r4, [r7, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	2020      	movs	r0, #32
 80046b8:	47a0      	blx	r4
 80046ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d8f1      	bhi.n	80046aa <_vsnprintf+0x75a>
 80046c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c8:	1d1a      	adds	r2, r3, #4
 80046ca:	66ba      	str	r2, [r7, #104]	; 0x68
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b2d8      	uxtb	r0, r3
 80046d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d2:	1c53      	adds	r3, r2, #1
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	68fc      	ldr	r4, [r7, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	47a0      	blx	r4
 80046de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <_vsnprintf+0x7b6>
 80046e8:	e007      	b.n	80046fa <_vsnprintf+0x7aa>
 80046ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ec:	1c53      	adds	r3, r2, #1
 80046ee:	647b      	str	r3, [r7, #68]	; 0x44
 80046f0:	68fc      	ldr	r4, [r7, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	2020      	movs	r0, #32
 80046f8:	47a0      	blx	r4
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004700:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004702:	429a      	cmp	r2, r3
 8004704:	d8f1      	bhi.n	80046ea <_vsnprintf+0x79a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	e0c1      	b.n	8004892 <_vsnprintf+0x942>
 800470e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004710:	1d1a      	adds	r2, r3, #4
 8004712:	66ba      	str	r2, [r7, #104]	; 0x68
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	63bb      	str	r3, [r7, #56]	; 0x38
 8004718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <_vsnprintf+0x7d2>
 800471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004720:	e001      	b.n	8004726 <_vsnprintf+0x7d6>
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	4619      	mov	r1, r3
 8004728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800472a:	f7fe fcc7 	bl	80030bc <_strnlen_s>
 800472e:	6378      	str	r0, [r7, #52]	; 0x34
 8004730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <_vsnprintf+0x7f6>
 800473a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473e:	4293      	cmp	r3, r2
 8004740:	bf28      	it	cs
 8004742:	4613      	movcs	r3, r2
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11a      	bne.n	8004786 <_vsnprintf+0x836>
 8004750:	e007      	b.n	8004762 <_vsnprintf+0x812>
 8004752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004754:	1c53      	adds	r3, r2, #1
 8004756:	647b      	str	r3, [r7, #68]	; 0x44
 8004758:	68fc      	ldr	r4, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	2020      	movs	r0, #32
 8004760:	47a0      	blx	r4
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	637a      	str	r2, [r7, #52]	; 0x34
 8004768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800476a:	429a      	cmp	r2, r3
 800476c:	d8f1      	bhi.n	8004752 <_vsnprintf+0x802>
 800476e:	e00a      	b.n	8004786 <_vsnprintf+0x836>
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	63ba      	str	r2, [r7, #56]	; 0x38
 8004776:	7818      	ldrb	r0, [r3, #0]
 8004778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477a:	1c53      	adds	r3, r2, #1
 800477c:	647b      	str	r3, [r7, #68]	; 0x44
 800477e:	68fc      	ldr	r4, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	47a0      	blx	r4
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <_vsnprintf+0x852>
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0eb      	beq.n	8004770 <_vsnprintf+0x820>
 8004798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e6      	bne.n	8004770 <_vsnprintf+0x820>
 80047a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00e      	beq.n	80047ca <_vsnprintf+0x87a>
 80047ac:	e007      	b.n	80047be <_vsnprintf+0x86e>
 80047ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b0:	1c53      	adds	r3, r2, #1
 80047b2:	647b      	str	r3, [r7, #68]	; 0x44
 80047b4:	68fc      	ldr	r4, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	2020      	movs	r0, #32
 80047bc:	47a0      	blx	r4
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	637a      	str	r2, [r7, #52]	; 0x34
 80047c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d8f1      	bhi.n	80047ae <_vsnprintf+0x85e>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	e05f      	b.n	8004892 <_vsnprintf+0x942>
 80047d2:	2308      	movs	r3, #8
 80047d4:	653b      	str	r3, [r7, #80]	; 0x50
 80047d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80047dc:	657b      	str	r3, [r7, #84]	; 0x54
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01e      	beq.n	800482a <_vsnprintf+0x8da>
 80047ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	66ba      	str	r2, [r7, #104]	; 0x68
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047fc:	9108      	str	r1, [sp, #32]
 80047fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004800:	9107      	str	r1, [sp, #28]
 8004802:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004804:	9106      	str	r1, [sp, #24]
 8004806:	f04f 0010 	mov.w	r0, #16
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004812:	2100      	movs	r1, #0
 8004814:	9102      	str	r1, [sp, #8]
 8004816:	e9cd 2300 	strd	r2, r3, [sp]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7fe fe36 	bl	8003492 <_ntoa_long_long>
 8004826:	6478      	str	r0, [r7, #68]	; 0x44
 8004828:	e016      	b.n	8004858 <_vsnprintf+0x908>
 800482a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800482c:	1d1a      	adds	r2, r3, #4
 800482e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	2310      	movs	r3, #16
 8004842:	9302      	str	r3, [sp, #8]
 8004844:	2300      	movs	r3, #0
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	9200      	str	r2, [sp, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7fe fdb7 	bl	80033c4 <_ntoa_long>
 8004856:	6478      	str	r0, [r7, #68]	; 0x44
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	e018      	b.n	8004892 <_vsnprintf+0x942>
 8004860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004862:	1c53      	adds	r3, r2, #1
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
 8004866:	68fc      	ldr	r4, [r7, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	2025      	movs	r0, #37	; 0x25
 800486e:	47a0      	blx	r4
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	e00c      	b.n	8004892 <_vsnprintf+0x942>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	7818      	ldrb	r0, [r3, #0]
 800487c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800487e:	1c53      	adds	r3, r2, #1
 8004880:	647b      	str	r3, [r7, #68]	; 0x44
 8004882:	68fc      	ldr	r4, [r7, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	47a0      	blx	r4
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	bf00      	nop
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f47f ab6b 	bne.w	8003f72 <_vsnprintf+0x22>
 800489c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <_vsnprintf+0x95a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1e5a      	subs	r2, r3, #1
 80048a8:	e000      	b.n	80048ac <_vsnprintf+0x95c>
 80048aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ac:	68fc      	ldr	r4, [r7, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	2000      	movs	r0, #0
 80048b4:	47a0      	blx	r4
 80048b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b8:	4618      	mov	r0, r3
 80048ba:	3758      	adds	r7, #88	; 0x58
 80048bc:	46bd      	mov	sp, r7
 80048be:	bdb0      	pop	{r4, r5, r7, pc}

080048c0 <printf_>:
 80048c0:	b40f      	push	{r0, r1, r2, r3}
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af02      	add	r7, sp, #8
 80048c8:	f107 031c 	add.w	r3, r7, #28
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	1d39      	adds	r1, r7, #4
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295
 80048da:	4806      	ldr	r0, [pc, #24]	; (80048f4 <printf_+0x34>)
 80048dc:	f7ff fb38 	bl	8003f50 <_vsnprintf>
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ee:	b004      	add	sp, #16
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	08003097 	.word	0x08003097

080048f8 <vprintf_>:
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	f107 010c 	add.w	r1, r7, #12
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	4803      	ldr	r0, [pc, #12]	; (8004920 <vprintf_+0x28>)
 8004912:	f7ff fb1d 	bl	8003f50 <_vsnprintf>
 8004916:	4603      	mov	r3, r0
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08003097 	.word	0x08003097

08004924 <Reflow_reset_INIT>:

/*---------------------------------------------------------------------------*/
/* State machine facilities... */

static Reflow_Status Reflow_reset_INIT(Reflow_Active *const ao, Event const *const evt)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b087      	sub	sp, #28
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Initializing reflow oven controller...");
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <Reflow_reset_INIT+0x60>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01c      	beq.n	8004970 <Reflow_reset_INIT+0x4c>
 8004936:	f001 fd61 	bl	80063fc <HAL_GetTick>
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <Reflow_reset_INIT+0x64>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <Reflow_reset_INIT+0x68>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	0999      	lsrs	r1, r3, #6
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <Reflow_reset_INIT+0x68>)
 800494e:	fba3 4302 	umull	r4, r3, r3, r2
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004958:	fb04 f303 	mul.w	r3, r4, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <Reflow_reset_INIT+0x64>)
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	9201      	str	r2, [sp, #4]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	460b      	mov	r3, r1
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <Reflow_reset_INIT+0x6c>)
 800496a:	2103      	movs	r1, #3
 800496c:	f7fd fc3a 	bl	80021e4 <log_printf>
    ao->state = RESET_STATE; // Redundant, but just in case.
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return INIT_STATUS;
 8004978:	2303      	movs	r3, #3
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	20000078 	.word	0x20000078
 8004988:	20000124 	.word	0x20000124
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	0800f1c0 	.word	0x0800f1c0

08004994 <Reflow_reset_ENTRY>:

static Reflow_Status Reflow_reset_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af02      	add	r7, sp, #8
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
    /* Disable PWM output signal */
    LOGI(TAG, "Turning PWM off.");
 800499e:	4b5b      	ldr	r3, [pc, #364]	; (8004b0c <Reflow_reset_ENTRY+0x178>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01c      	beq.n	80049e0 <Reflow_reset_ENTRY+0x4c>
 80049a6:	f001 fd29 	bl	80063fc <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]
 80049ac:	4b58      	ldr	r3, [pc, #352]	; (8004b10 <Reflow_reset_ENTRY+0x17c>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <Reflow_reset_ENTRY+0x180>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	0999      	lsrs	r1, r3, #6
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <Reflow_reset_ENTRY+0x180>)
 80049be:	fba3 4302 	umull	r4, r3, r3, r2
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80049c8:	fb04 f303 	mul.w	r3, r4, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	4a50      	ldr	r2, [pc, #320]	; (8004b10 <Reflow_reset_ENTRY+0x17c>)
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	9201      	str	r2, [sp, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	460b      	mov	r3, r1
 80049d8:	4a4f      	ldr	r2, [pc, #316]	; (8004b18 <Reflow_reset_ENTRY+0x184>)
 80049da:	2103      	movs	r1, #3
 80049dc:	f7fd fc02 	bl	80021e4 <log_printf>
    __HAL_TIM_SET_COMPARE(ao->pwm_timer_handle, ao->pwm_channel, 0);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <Reflow_reset_ENTRY+0x60>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	635a      	str	r2, [r3, #52]	; 0x34
 80049f2:	e02c      	b.n	8004a4e <Reflow_reset_ENTRY+0xba>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d105      	bne.n	8004a08 <Reflow_reset_ENTRY+0x74>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	6393      	str	r3, [r2, #56]	; 0x38
 8004a06:	e022      	b.n	8004a4e <Reflow_reset_ENTRY+0xba>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d105      	bne.n	8004a1c <Reflow_reset_ENTRY+0x88>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	2300      	movs	r3, #0
 8004a18:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004a1a:	e018      	b.n	8004a4e <Reflow_reset_ENTRY+0xba>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d105      	bne.n	8004a30 <Reflow_reset_ENTRY+0x9c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	e00e      	b.n	8004a4e <Reflow_reset_ENTRY+0xba>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d105      	bne.n	8004a44 <Reflow_reset_ENTRY+0xb0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6593      	str	r3, [r2, #88]	; 0x58
 8004a42:	e004      	b.n	8004a4e <Reflow_reset_ENTRY+0xba>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_TIM_PWM_Stop(ao->pwm_timer_handle, ao->pwm_channel);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f004 fa75 	bl	8008f48 <HAL_TIM_PWM_Stop>

    /* Clear PID memory */
    PID_Reset(&ao->pid_params);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	332c      	adds	r3, #44	; 0x2c
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fae7 	bl	8003036 <PID_Reset>

    /* Disarm timers */
    osTimerStop(ao->pid_timer_id);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f006 fbdf 	bl	800b230 <osTimerStop>
    TimeEvent_disarm(&ao->reflow_time_evt);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3314      	adds	r3, #20
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fc fcc6 	bl	8001408 <TimeEvent_disarm>

    LOGI(TAG, "Reflow oven controller initialized.");
 8004a7c:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <Reflow_reset_ENTRY+0x178>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01c      	beq.n	8004abe <Reflow_reset_ENTRY+0x12a>
 8004a84:	f001 fcba 	bl	80063fc <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <Reflow_reset_ENTRY+0x17c>)
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <Reflow_reset_ENTRY+0x180>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0999      	lsrs	r1, r3, #6
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <Reflow_reset_ENTRY+0x180>)
 8004a9c:	fba3 4302 	umull	r4, r3, r3, r2
 8004aa0:	099b      	lsrs	r3, r3, #6
 8004aa2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004aa6:	fb04 f303 	mul.w	r3, r4, r3
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <Reflow_reset_ENTRY+0x17c>)
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	9201      	str	r2, [sp, #4]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <Reflow_reset_ENTRY+0x188>)
 8004ab8:	2103      	movs	r1, #3
 8004aba:	f7fd fb93 	bl	80021e4 <log_printf>
    LOGI(TAG, "Enter command \"reflow start\" to start reflow process.");
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <Reflow_reset_ENTRY+0x178>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01c      	beq.n	8004b00 <Reflow_reset_ENTRY+0x16c>
 8004ac6:	f001 fc99 	bl	80063fc <HAL_GetTick>
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <Reflow_reset_ENTRY+0x17c>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <Reflow_reset_ENTRY+0x180>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	0999      	lsrs	r1, r3, #6
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <Reflow_reset_ENTRY+0x180>)
 8004ade:	fba3 4302 	umull	r4, r3, r3, r2
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004ae8:	fb04 f303 	mul.w	r3, r4, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <Reflow_reset_ENTRY+0x17c>)
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	9201      	str	r2, [sp, #4]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	460b      	mov	r3, r1
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <Reflow_reset_ENTRY+0x18c>)
 8004afa:	2103      	movs	r1, #3
 8004afc:	f7fd fb72 	bl	80021e4 <log_printf>
    return HANDLED_STATUS;
 8004b00:	2301      	movs	r3, #1
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000078 	.word	0x20000078
 8004b10:	20000124 	.word	0x20000124
 8004b14:	10624dd3 	.word	0x10624dd3
 8004b18:	0800f204 	.word	0x0800f204
 8004b1c:	0800f234 	.word	0x0800f234
 8004b20:	0800f274 	.word	0x0800f274

08004b24 <Reflow_preheat_ENTRY>:

static Reflow_Status Reflow_preheat_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(ao->pwm_timer_handle, ao->pwm_channel);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f004 f8ff 	bl	8008d3c <HAL_TIM_PWM_Start>
    ao->setpoint = (float)ao->reflow_phases[PREHEAT_STATE - 1].reach_temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    osTimerStart(ao->pid_timer_id, (uint32_t)(ao->pid_params.Ts * 1000));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004b5a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004b7c <Reflow_preheat_ENTRY+0x58>
 8004b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b66:	ee17 1a90 	vmov	r1, s15
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f006 fb32 	bl	800b1d4 <osTimerStart>
    return HANDLED_STATUS;
 8004b70:	2301      	movs	r3, #1
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	447a0000 	.word	0x447a0000

08004b80 <Reflow_soak_ENTRY>:

static Reflow_Status Reflow_soak_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
    /* Set step size for slowest temperature rise. */
    ao->step_size = (float)(ao->reflow_phases[SOAK_STATE - 1].reach_temp - ao->reflow_phases[PREHEAT_STATE - 1].reach_temp) /
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	ee07 3a90 	vmov	s15, r3
 8004b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                    (ao->reflow_phases[SOAK_STATE - 1].reach_time * (1 / ao->pid_params.Ts));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8004bae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004bb2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
    ao->step_size = (float)(ao->reflow_phases[SOAK_STATE - 1].reach_temp - ao->reflow_phases[PREHEAT_STATE - 1].reach_temp) /
 8004bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    TimeEvent_arm(&ao->reflow_time_evt, ao->reflow_phases[SOAK_STATE - 1].reach_time, 0);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f103 0014 	add.w	r0, r3, #20
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f7fc fb4d 	bl	8001270 <TimeEvent_arm>
    return HANDLED_STATUS;
 8004bd6:	2301      	movs	r3, #1
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <Reflow_rampup_ENTRY>:

static Reflow_Status Reflow_rampup_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
    ao->setpoint = (float)ao->reflow_phases[RAMPUP_STATE - 1].reach_temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    return HANDLED_STATUS;
 8004bfe:	2301      	movs	r3, #1
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <Reflow_peak_ENTRY>:

static Reflow_Status Reflow_peak_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
    ao->step_size = 0;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	661a      	str	r2, [r3, #96]	; 0x60
    TimeEvent_arm(&ao->reflow_time_evt, ao->reflow_phases[PEAK_STATE - 1].reach_time, 0);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f103 0014 	add.w	r0, r3, #20
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7fc fb1f 	bl	8001270 <TimeEvent_arm>
    return HANDLED_STATUS;
 8004c32:	2301      	movs	r3, #1
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <Reflow_cooldown_ENTRY>:

static Reflow_Status Reflow_cooldown_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    ao->setpoint = (float)ao->reflow_phases[COOLDOWN_STATE - 1].reach_temp;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    return HANDLED_STATUS;
 8004c5a:	2301      	movs	r3, #1
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <Reflow_reset_START>:

static Reflow_Status Reflow_reset_START(Reflow_Active *const ao, Event const *const evt)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b08b      	sub	sp, #44	; 0x2c
 8004c6c:	af04      	add	r7, sp, #16
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
    /* Check that oven temperature has cooled down. */
    float current_temp = 0;
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
    if (readTemperature(&current_temp) != true)
 8004c78:	f107 0308 	add.w	r3, r7, #8
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fe65 	bl	800594c <readTemperature>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d022      	beq.n	8004cd4 <Reflow_reset_START+0x6c>
    {
        LOGW(TAG, "MAX31855K Read Error, unable to start reflow process.");
 8004c8e:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <Reflow_reset_START+0x12c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <Reflow_reset_START+0x68>
 8004c96:	f001 fbb1 	bl	80063fc <HAL_GetTick>
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	4b3e      	ldr	r3, [pc, #248]	; (8004d98 <Reflow_reset_START+0x130>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a3e      	ldr	r2, [pc, #248]	; (8004d9c <Reflow_reset_START+0x134>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	0999      	lsrs	r1, r3, #6
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <Reflow_reset_START+0x134>)
 8004cae:	fba3 4302 	umull	r4, r3, r3, r2
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004cb8:	fb04 f303 	mul.w	r3, r4, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	4a36      	ldr	r2, [pc, #216]	; (8004d98 <Reflow_reset_START+0x130>)
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	9201      	str	r2, [sp, #4]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4a35      	ldr	r2, [pc, #212]	; (8004da0 <Reflow_reset_START+0x138>)
 8004cca:	2102      	movs	r1, #2
 8004ccc:	f7fd fa8a 	bl	80021e4 <log_printf>
        return HANDLED_STATUS;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e05a      	b.n	8004d8a <Reflow_reset_START+0x122>
    }
    else if ((uint32_t)current_temp > ao->reflow_phases[COOLDOWN_STATE - 1].reach_temp) // Subtract 1 due to RESET_STATE.)
 8004cd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cdc:	ee17 2a90 	vmov	r2, s15
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d926      	bls.n	8004d38 <Reflow_reset_START+0xd0>
    {
        LOGW(TAG, "Oven temperature must cool to below %lu before starting another run.",
 8004cea:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <Reflow_reset_START+0x12c>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <Reflow_reset_START+0xcc>
 8004cf2:	f001 fb83 	bl	80063fc <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]
 8004cf8:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <Reflow_reset_START+0x130>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4a27      	ldr	r2, [pc, #156]	; (8004d9c <Reflow_reset_START+0x134>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	099c      	lsrs	r4, r3, #6
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <Reflow_reset_START+0x134>)
 8004d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <Reflow_reset_START+0x130>)
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	f8d1 109c 	ldr.w	r1, [r1, #156]	; 0x9c
 8004d24:	9102      	str	r1, [sp, #8]
 8004d26:	9201      	str	r2, [sp, #4]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <Reflow_reset_START+0x13c>)
 8004d2e:	2102      	movs	r1, #2
 8004d30:	f7fd fa58 	bl	80021e4 <log_printf>
             ao->reflow_phases[COOLDOWN_STATE - 1].reach_temp);
        return HANDLED_STATUS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e028      	b.n	8004d8a <Reflow_reset_START+0x122>
    }
    else
    {
        LOG("Starting reflow process\r\n");
 8004d38:	481b      	ldr	r0, [pc, #108]	; (8004da8 <Reflow_reset_START+0x140>)
 8004d3a:	f7ff fdc1 	bl	80048c0 <printf_>
        LOGI(TAG, "Entering pre-heat phase.");
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <Reflow_reset_START+0x12c>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01c      	beq.n	8004d80 <Reflow_reset_START+0x118>
 8004d46:	f001 fb59 	bl	80063fc <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <Reflow_reset_START+0x130>)
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <Reflow_reset_START+0x134>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	0999      	lsrs	r1, r3, #6
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <Reflow_reset_START+0x134>)
 8004d5e:	fba3 4302 	umull	r4, r3, r3, r2
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004d68:	fb04 f303 	mul.w	r3, r4, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <Reflow_reset_START+0x130>)
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	9201      	str	r2, [sp, #4]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	460b      	mov	r3, r1
 8004d78:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <Reflow_reset_START+0x144>)
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	f7fd fa32 	bl	80021e4 <log_printf>
        ao->state = PREHEAT_STATE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        return TRAN_STATUS;
 8004d88:	2300      	movs	r3, #0
    }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000078 	.word	0x20000078
 8004d98:	20000124 	.word	0x20000124
 8004d9c:	10624dd3 	.word	0x10624dd3
 8004da0:	0800f2c8 	.word	0x0800f2c8
 8004da4:	0800f31c 	.word	0x0800f31c
 8004da8:	0800f380 	.word	0x0800f380
 8004dac:	0800f3a4 	.word	0x0800f3a4

08004db0 <Reflow_preheat_REACHTEMP>:

static Reflow_Status Reflow_preheat_REACHTEMP(Reflow_Active *const ao, Event const *const evt)
{
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering soak phase.");
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <Reflow_preheat_REACHTEMP+0x60>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01c      	beq.n	8004dfc <Reflow_preheat_REACHTEMP+0x4c>
 8004dc2:	f001 fb1b 	bl	80063fc <HAL_GetTick>
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <Reflow_preheat_REACHTEMP+0x64>)
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <Reflow_preheat_REACHTEMP+0x68>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	0999      	lsrs	r1, r3, #6
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <Reflow_preheat_REACHTEMP+0x68>)
 8004dda:	fba3 4302 	umull	r4, r3, r3, r2
 8004dde:	099b      	lsrs	r3, r3, #6
 8004de0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004de4:	fb04 f303 	mul.w	r3, r4, r3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <Reflow_preheat_REACHTEMP+0x64>)
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	9201      	str	r2, [sp, #4]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	460b      	mov	r3, r1
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <Reflow_preheat_REACHTEMP+0x6c>)
 8004df6:	2103      	movs	r1, #3
 8004df8:	f7fd f9f4 	bl	80021e4 <log_printf>
    ao->state = SOAK_STATE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000078 	.word	0x20000078
 8004e14:	20000124 	.word	0x20000124
 8004e18:	10624dd3 	.word	0x10624dd3
 8004e1c:	0800f3dc 	.word	0x0800f3dc

08004e20 <Reflow_soak_REACHTIME>:

static Reflow_Status Reflow_soak_REACHTIME(Reflow_Active *const ao, Event const *const evt)
{
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering ramp-up phase.");
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <Reflow_soak_REACHTIME+0x60>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01c      	beq.n	8004e6c <Reflow_soak_REACHTIME+0x4c>
 8004e32:	f001 fae3 	bl	80063fc <HAL_GetTick>
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <Reflow_soak_REACHTIME+0x64>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a12      	ldr	r2, [pc, #72]	; (8004e88 <Reflow_soak_REACHTIME+0x68>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	0999      	lsrs	r1, r3, #6
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <Reflow_soak_REACHTIME+0x68>)
 8004e4a:	fba3 4302 	umull	r4, r3, r3, r2
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004e54:	fb04 f303 	mul.w	r3, r4, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <Reflow_soak_REACHTIME+0x64>)
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	9201      	str	r2, [sp, #4]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	460b      	mov	r3, r1
 8004e64:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <Reflow_soak_REACHTIME+0x6c>)
 8004e66:	2103      	movs	r1, #3
 8004e68:	f7fd f9bc 	bl	80021e4 <log_printf>
    ao->state = RAMPUP_STATE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2203      	movs	r2, #3
 8004e70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000078 	.word	0x20000078
 8004e84:	20000124 	.word	0x20000124
 8004e88:	10624dd3 	.word	0x10624dd3
 8004e8c:	0800f410 	.word	0x0800f410

08004e90 <Reflow_rampup_REACHTEMP>:

static Reflow_Status Reflow_rampup_REACHTEMP(Reflow_Active *const ao, Event const *const evt)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering peak phase.");
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <Reflow_rampup_REACHTEMP+0x60>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01c      	beq.n	8004edc <Reflow_rampup_REACHTEMP+0x4c>
 8004ea2:	f001 faab 	bl	80063fc <HAL_GetTick>
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <Reflow_rampup_REACHTEMP+0x64>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <Reflow_rampup_REACHTEMP+0x68>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	0999      	lsrs	r1, r3, #6
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <Reflow_rampup_REACHTEMP+0x68>)
 8004eba:	fba3 4302 	umull	r4, r3, r3, r2
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004ec4:	fb04 f303 	mul.w	r3, r4, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <Reflow_rampup_REACHTEMP+0x64>)
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	9201      	str	r2, [sp, #4]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4a09      	ldr	r2, [pc, #36]	; (8004efc <Reflow_rampup_REACHTEMP+0x6c>)
 8004ed6:	2103      	movs	r1, #3
 8004ed8:	f7fd f984 	bl	80021e4 <log_printf>
    ao->state = PEAK_STATE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2204      	movs	r2, #4
 8004ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd90      	pop	{r4, r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000078 	.word	0x20000078
 8004ef4:	20000124 	.word	0x20000124
 8004ef8:	10624dd3 	.word	0x10624dd3
 8004efc:	0800f444 	.word	0x0800f444

08004f00 <Reflow_peak_REACHTIME>:

static Reflow_Status Reflow_peak_REACHTIME(Reflow_Active *const ao, Event const *const evt)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering cool-down phase.");
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <Reflow_peak_REACHTIME+0x60>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01c      	beq.n	8004f4c <Reflow_peak_REACHTIME+0x4c>
 8004f12:	f001 fa73 	bl	80063fc <HAL_GetTick>
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <Reflow_peak_REACHTIME+0x64>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a12      	ldr	r2, [pc, #72]	; (8004f68 <Reflow_peak_REACHTIME+0x68>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	0999      	lsrs	r1, r3, #6
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <Reflow_peak_REACHTIME+0x68>)
 8004f2a:	fba3 4302 	umull	r4, r3, r3, r2
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004f34:	fb04 f303 	mul.w	r3, r4, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <Reflow_peak_REACHTIME+0x64>)
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	9201      	str	r2, [sp, #4]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	460b      	mov	r3, r1
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <Reflow_peak_REACHTIME+0x6c>)
 8004f46:	2103      	movs	r1, #3
 8004f48:	f7fd f94c 	bl	80021e4 <log_printf>
    ao->state = COOLDOWN_STATE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2205      	movs	r2, #5
 8004f50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000078 	.word	0x20000078
 8004f64:	20000124 	.word	0x20000124
 8004f68:	10624dd3 	.word	0x10624dd3
 8004f6c:	0800f478 	.word	0x0800f478

08004f70 <Reflow_cooldown_REACHTEMP>:

static Reflow_Status Reflow_cooldown_REACHTEMP(Reflow_Active *const ao, Event const *const evt)
{
 8004f70:	b590      	push	{r4, r7, lr}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Reflow process completed!");
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <Reflow_cooldown_REACHTEMP+0x60>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01c      	beq.n	8004fbc <Reflow_cooldown_REACHTEMP+0x4c>
 8004f82:	f001 fa3b 	bl	80063fc <HAL_GetTick>
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <Reflow_cooldown_REACHTEMP+0x64>)
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <Reflow_cooldown_REACHTEMP+0x68>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	0999      	lsrs	r1, r3, #6
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <Reflow_cooldown_REACHTEMP+0x68>)
 8004f9a:	fba3 4302 	umull	r4, r3, r3, r2
 8004f9e:	099b      	lsrs	r3, r3, #6
 8004fa0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004fa4:	fb04 f303 	mul.w	r3, r4, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <Reflow_cooldown_REACHTEMP+0x64>)
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	9201      	str	r2, [sp, #4]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <Reflow_cooldown_REACHTEMP+0x6c>)
 8004fb6:	2103      	movs	r1, #3
 8004fb8:	f7fd f914 	bl	80021e4 <log_printf>
    ao->state = RESET_STATE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000078 	.word	0x20000078
 8004fd4:	20000124 	.word	0x20000124
 8004fd8:	10624dd3 	.word	0x10624dd3
 8004fdc:	0800f4b0 	.word	0x0800f4b0

08004fe0 <Reflow_STOP>:

static Reflow_Status Reflow_STOP(Reflow_Active *const ao, Event const *const evt)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
    LOG("Reflow process stopped\r\n");
 8004fea:	4808      	ldr	r0, [pc, #32]	; (800500c <Reflow_STOP+0x2c>)
 8004fec:	f7ff fc68 	bl	80048c0 <printf_>
    osTimerStop(ao->pid_timer_id);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f006 f91b 	bl	800b230 <osTimerStop>
    ao->state = RESET_STATE; // Transition to RESET state.
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	0800f4e8 	.word	0x0800f4e8

08005010 <Reflow_ignore>:

static Reflow_Status Reflow_ignore(Reflow_Active *const ao, Event const *const evt)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
    return IGNORE_STATUS;
 800501a:	2302      	movs	r3, #2
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <reflow_init>:
    /* RAMPUP 	*/ {Reflow_ignore, Reflow_rampup_ENTRY, Reflow_ignore, Reflow_ignore, Reflow_rampup_REACHTEMP, Reflow_STOP},
    /* PEAK 	*/ {Reflow_ignore, Reflow_peak_ENTRY, Reflow_ignore, Reflow_peak_REACHTIME, Reflow_ignore, Reflow_STOP},
    /* COOLDOWN */ {Reflow_ignore, Reflow_cooldown_ENTRY, Reflow_ignore, Reflow_ignore, Reflow_cooldown_REACHTEMP, Reflow_STOP}};

void reflow_init(Reflow_cfg_t const *const reflow_cfg)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b087      	sub	sp, #28
 800502c:	af02      	add	r7, sp, #8
 800502e:	6078      	str	r0, [r7, #4]
    /* Call active object constructor */
    Active_ctor((Active *)&reflow_ao, (EventHandler)reflow_evt_handler);
 8005030:	494f      	ldr	r1, [pc, #316]	; (8005170 <reflow_init+0x148>)
 8005032:	4850      	ldr	r0, [pc, #320]	; (8005174 <reflow_init+0x14c>)
 8005034:	f7fc f85e 	bl	80010f4 <Active_ctor>

    /* Register PWM timer and enable preload register */
    reflow_ao.pwm_timer_handle = reflow_cfg->pwm_timer_handle;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a4d      	ldr	r2, [pc, #308]	; (8005174 <reflow_init+0x14c>)
 800503e:	60d3      	str	r3, [r2, #12]
    reflow_ao.pwm_channel = reflow_cfg->pwm_channel;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a4b      	ldr	r2, [pc, #300]	; (8005174 <reflow_init+0x14c>)
 8005046:	6113      	str	r3, [r2, #16]
    __HAL_TIM_ENABLE_OCxPRELOAD(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel);
 8005048:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <reflow_init+0x14c>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <reflow_init+0x3e>
 8005050:	4b48      	ldr	r3, [pc, #288]	; (8005174 <reflow_init+0x14c>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	4b46      	ldr	r3, [pc, #280]	; (8005174 <reflow_init+0x14c>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0208 	orr.w	r2, r2, #8
 8005062:	619a      	str	r2, [r3, #24]
 8005064:	e045      	b.n	80050f2 <reflow_init+0xca>
 8005066:	4b43      	ldr	r3, [pc, #268]	; (8005174 <reflow_init+0x14c>)
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b04      	cmp	r3, #4
 800506c:	d10a      	bne.n	8005084 <reflow_init+0x5c>
 800506e:	4b41      	ldr	r3, [pc, #260]	; (8005174 <reflow_init+0x14c>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <reflow_init+0x14c>)
 8005078:	68d2      	ldr	r2, [r2, #12]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005080:	6193      	str	r3, [r2, #24]
 8005082:	e036      	b.n	80050f2 <reflow_init+0xca>
 8005084:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <reflow_init+0x14c>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d10a      	bne.n	80050a2 <reflow_init+0x7a>
 800508c:	4b39      	ldr	r3, [pc, #228]	; (8005174 <reflow_init+0x14c>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	4a37      	ldr	r2, [pc, #220]	; (8005174 <reflow_init+0x14c>)
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	f043 0308 	orr.w	r3, r3, #8
 800509e:	61d3      	str	r3, [r2, #28]
 80050a0:	e027      	b.n	80050f2 <reflow_init+0xca>
 80050a2:	4b34      	ldr	r3, [pc, #208]	; (8005174 <reflow_init+0x14c>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d10a      	bne.n	80050c0 <reflow_init+0x98>
 80050aa:	4b32      	ldr	r3, [pc, #200]	; (8005174 <reflow_init+0x14c>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <reflow_init+0x14c>)
 80050b4:	68d2      	ldr	r2, [r2, #12]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050bc:	61d3      	str	r3, [r2, #28]
 80050be:	e018      	b.n	80050f2 <reflow_init+0xca>
 80050c0:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <reflow_init+0x14c>)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d10a      	bne.n	80050de <reflow_init+0xb6>
 80050c8:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <reflow_init+0x14c>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	4a28      	ldr	r2, [pc, #160]	; (8005174 <reflow_init+0x14c>)
 80050d2:	68d2      	ldr	r2, [r2, #12]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	f043 0308 	orr.w	r3, r3, #8
 80050da:	6553      	str	r3, [r2, #84]	; 0x54
 80050dc:	e009      	b.n	80050f2 <reflow_init+0xca>
 80050de:	4b25      	ldr	r3, [pc, #148]	; (8005174 <reflow_init+0x14c>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	4a23      	ldr	r2, [pc, #140]	; (8005174 <reflow_init+0x14c>)
 80050e8:	68d2      	ldr	r2, [r2, #12]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050f0:	6553      	str	r3, [r2, #84]	; 0x54
                                             .Kd = KD_INIT,
                                             .tau = TAU_INIT,
                                             .Ts = TS_INIT,
                                             .out_max = OUT_MAX_INIT,
                                             .out_min = OUT_MIN_INIT};
    PID_Init(&reflow_ao.pid_params, &reflow_pid_cfg);
 80050f2:	4921      	ldr	r1, [pc, #132]	; (8005178 <reflow_init+0x150>)
 80050f4:	4821      	ldr	r0, [pc, #132]	; (800517c <reflow_init+0x154>)
 80050f6:	f7fd fe98 	bl	8002e2a <PID_Init>

    /* Initialize timer instances. */
    TimeEvent_ctor(&reflow_ao.reflow_time_evt, REACH_TIME_SIG, (Active *)&reflow_ao);
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <reflow_init+0x14c>)
 80050fc:	2103      	movs	r1, #3
 80050fe:	4820      	ldr	r0, [pc, #128]	; (8005180 <reflow_init+0x158>)
 8005100:	f7fc f86e 	bl	80011e0 <TimeEvent_ctor>
    reflow_ao.pid_timer_id = osTimerNew(reflow_pid_iteration, osTimerPeriodic, NULL, NULL);
 8005104:	2300      	movs	r3, #0
 8005106:	2200      	movs	r2, #0
 8005108:	2101      	movs	r1, #1
 800510a:	481e      	ldr	r0, [pc, #120]	; (8005184 <reflow_init+0x15c>)
 800510c:	f005 ffe6 	bl	800b0dc <osTimerNew>
 8005110:	4603      	mov	r3, r0
 8005112:	4a18      	ldr	r2, [pc, #96]	; (8005174 <reflow_init+0x14c>)
 8005114:	6253      	str	r3, [r2, #36]	; 0x24

    /* Register reflow commands */
    cmd_register(&reflow_client_info);
 8005116:	481c      	ldr	r0, [pc, #112]	; (8005188 <reflow_init+0x160>)
 8005118:	f7fc faca 	bl	80016b0 <cmd_register>

    /* Initialize thermocouple IC */
    MAX31855K_Init(&reflow_cfg->max_cfg);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3308      	adds	r3, #8
 8005120:	4618      	mov	r0, r3
 8005122:	f7fb fec9 	bl	8000eb8 <MAX31855K_Init>

    LOGI(TAG, "Initialized reflow module.");
 8005126:	4b19      	ldr	r3, [pc, #100]	; (800518c <reflow_init+0x164>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01c      	beq.n	8005168 <reflow_init+0x140>
 800512e:	f001 f965 	bl	80063fc <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	4b16      	ldr	r3, [pc, #88]	; (8005190 <reflow_init+0x168>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4a16      	ldr	r2, [pc, #88]	; (8005194 <reflow_init+0x16c>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	0999      	lsrs	r1, r3, #6
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <reflow_init+0x16c>)
 8005146:	fba3 4302 	umull	r4, r3, r3, r2
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005150:	fb04 f303 	mul.w	r3, r4, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	4a0e      	ldr	r2, [pc, #56]	; (8005190 <reflow_init+0x168>)
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	9201      	str	r2, [sp, #4]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	460b      	mov	r3, r1
 8005160:	4a0d      	ldr	r2, [pc, #52]	; (8005198 <reflow_init+0x170>)
 8005162:	2103      	movs	r1, #3
 8005164:	f7fd f83e 	bl	80021e4 <log_printf>
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}
 8005170:	080056d5 	.word	0x080056d5
 8005174:	20000080 	.word	0x20000080
 8005178:	0800fae4 	.word	0x0800fae4
 800517c:	200000ac 	.word	0x200000ac
 8005180:	20000094 	.word	0x20000094
 8005184:	080051cd 	.word	0x080051cd
 8005188:	20000140 	.word	0x20000140
 800518c:	20000078 	.word	0x20000078
 8005190:	20000124 	.word	0x20000124
 8005194:	10624dd3 	.word	0x10624dd3
 8005198:	0800f508 	.word	0x0800f508

0800519c <reflow_start>:

void reflow_start()
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
    osThreadAttr_t reflow_thread_attr = {.stack_size = REFLOW_THREAD_STACK_SZ};
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	2224      	movs	r2, #36	; 0x24
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f009 f8bf 	bl	800e32c <memset>
 80051ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051b2:	61bb      	str	r3, [r7, #24]
    Active_start((Active *)&reflow_ao, &reflow_thread_attr, 5, NULL);
 80051b4:	1d39      	adds	r1, r7, #4
 80051b6:	2300      	movs	r3, #0
 80051b8:	2205      	movs	r2, #5
 80051ba:	4803      	ldr	r0, [pc, #12]	; (80051c8 <reflow_start+0x2c>)
 80051bc:	f7fb ffb2 	bl	8001124 <Active_start>
}
 80051c0:	bf00      	nop
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000080 	.word	0x20000080

080051cc <reflow_pid_iteration>:

/**
 * @brief Perform PID iteration.
 */
static void reflow_pid_iteration(void *argument)
{
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	b0a1      	sub	sp, #132	; 0x84
 80051d2:	af10      	add	r7, sp, #64	; 0x40
 80051d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Read temperature */
    float temp_reading = 0;
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
    bool status = readTemperature(&temp_reading);
 80051dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fbb3 	bl	800594c <readTemperature>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (status == false)
 80051ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051f0:	f083 0301 	eor.w	r3, r3, #1
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d024      	beq.n	8005244 <reflow_pid_iteration+0x78>
    {
        LOGE(TAG, "Could not read temperature, aborting reflow process.");
 80051fa:	4b9f      	ldr	r3, [pc, #636]	; (8005478 <reflow_pid_iteration+0x2ac>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01c      	beq.n	800523c <reflow_pid_iteration+0x70>
 8005202:	f001 f8fb 	bl	80063fc <HAL_GetTick>
 8005206:	63b8      	str	r0, [r7, #56]	; 0x38
 8005208:	4b9c      	ldr	r3, [pc, #624]	; (800547c <reflow_pid_iteration+0x2b0>)
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	4a9c      	ldr	r2, [pc, #624]	; (8005480 <reflow_pid_iteration+0x2b4>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	0999      	lsrs	r1, r3, #6
 8005216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005218:	4b99      	ldr	r3, [pc, #612]	; (8005480 <reflow_pid_iteration+0x2b4>)
 800521a:	fba3 4302 	umull	r4, r3, r3, r2
 800521e:	099b      	lsrs	r3, r3, #6
 8005220:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005224:	fb04 f303 	mul.w	r3, r4, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	4a94      	ldr	r2, [pc, #592]	; (800547c <reflow_pid_iteration+0x2b0>)
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	9201      	str	r2, [sp, #4]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	460b      	mov	r3, r1
 8005234:	4a93      	ldr	r2, [pc, #588]	; (8005484 <reflow_pid_iteration+0x2b8>)
 8005236:	2101      	movs	r1, #1
 8005238:	f7fc ffd4 	bl	80021e4 <log_printf>
        Active_post(&reflow_ao.reflow_base, &stop_evt);
 800523c:	4992      	ldr	r1, [pc, #584]	; (8005488 <reflow_pid_iteration+0x2bc>)
 800523e:	4893      	ldr	r0, [pc, #588]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005240:	f7fb ffb6 	bl	80011b0 <Active_post>
    }

    /* Check if temperature reached intended temperature of REACHTEMP phases.
	 * If so, send REACHTEMP signal to reflow active object.
	 */
    if (reflow_ao.reflow_phases[reflow_ao.state - 1].phase_type == REACHTEMP)
 8005244:	4b91      	ldr	r3, [pc, #580]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800524a:	1e5a      	subs	r2, r3, #1
 800524c:	498f      	ldr	r1, [pc, #572]	; (800548c <reflow_pid_iteration+0x2c0>)
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3368      	adds	r3, #104	; 0x68
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d125      	bne.n	80052ac <reflow_pid_iteration+0xe0>
    {
        uint32_t reach_temp = reflow_ao.reflow_phases[reflow_ao.state - 1].reach_temp;
 8005260:	4b8a      	ldr	r3, [pc, #552]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005266:	1e5a      	subs	r2, r3, #1
 8005268:	4988      	ldr	r1, [pc, #544]	; (800548c <reflow_pid_iteration+0x2c0>)
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	336c      	adds	r3, #108	; 0x6c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
        /* Give some leeway. */
        if (reach_temp > (uint32_t)temp_reading - 2U && reach_temp < (uint32_t)temp_reading + 2U)
 800527a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800527e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005282:	ee17 3a90 	vmov	r3, s15
 8005286:	3b02      	subs	r3, #2
 8005288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800528a:	429a      	cmp	r2, r3
 800528c:	d919      	bls.n	80052c2 <reflow_pid_iteration+0xf6>
 800528e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005296:	ee17 3a90 	vmov	r3, s15
 800529a:	3302      	adds	r3, #2
 800529c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800529e:	429a      	cmp	r2, r3
 80052a0:	d20f      	bcs.n	80052c2 <reflow_pid_iteration+0xf6>
        {
            static const Event reachtemp_evt = {.sig = REACH_TEMP_SIG};
            Active_post(&reflow_ao.reflow_base, &reachtemp_evt);
 80052a2:	497b      	ldr	r1, [pc, #492]	; (8005490 <reflow_pid_iteration+0x2c4>)
 80052a4:	4879      	ldr	r0, [pc, #484]	; (800548c <reflow_pid_iteration+0x2c0>)
 80052a6:	f7fb ff83 	bl	80011b0 <Active_post>
 80052aa:	e00a      	b.n	80052c2 <reflow_pid_iteration+0xf6>
    else
    {
        /* Currently in a REACHTIME phase.
	     * Update setpoint by a step to smooth out temperature change.
	     */
        reflow_ao.setpoint += reflow_ao.step_size;
 80052ac:	4b77      	ldr	r3, [pc, #476]	; (800548c <reflow_pid_iteration+0x2c0>)
 80052ae:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80052b2:	4b76      	ldr	r3, [pc, #472]	; (800548c <reflow_pid_iteration+0x2c0>)
 80052b4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80052b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052bc:	4b73      	ldr	r3, [pc, #460]	; (800548c <reflow_pid_iteration+0x2c0>)
 80052be:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    }

    /* Acquire new PWM output signal through feedback control. */
    float pwm_value = PID_Calculate(&reflow_ao.pid_params, reflow_ao.setpoint, temp_reading);
 80052c2:	4b72      	ldr	r3, [pc, #456]	; (800548c <reflow_pid_iteration+0x2c0>)
 80052c4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80052c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80052cc:	eef0 0a47 	vmov.f32	s1, s14
 80052d0:	eeb0 0a67 	vmov.f32	s0, s15
 80052d4:	486f      	ldr	r0, [pc, #444]	; (8005494 <reflow_pid_iteration+0x2c8>)
 80052d6:	f7fd fdd0 	bl	8002e7a <PID_Calculate>
 80052da:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

    /* Set PWM signal */
    __HAL_TIM_SET_COMPARE(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel, (uint16_t)pwm_value);
 80052de:	4b6b      	ldr	r3, [pc, #428]	; (800548c <reflow_pid_iteration+0x2c0>)
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <reflow_pid_iteration+0x132>
 80052e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80052ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ee:	ee17 3a90 	vmov	r3, s15
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	4b65      	ldr	r3, [pc, #404]	; (800548c <reflow_pid_iteration+0x2c0>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34
 80052fc:	e04f      	b.n	800539e <reflow_pid_iteration+0x1d2>
 80052fe:	4b63      	ldr	r3, [pc, #396]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d10c      	bne.n	8005320 <reflow_pid_iteration+0x154>
 8005306:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800530a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800530e:	ee17 3a90 	vmov	r3, s15
 8005312:	b299      	uxth	r1, r3
 8005314:	4b5d      	ldr	r3, [pc, #372]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	460b      	mov	r3, r1
 800531c:	6393      	str	r3, [r2, #56]	; 0x38
 800531e:	e03e      	b.n	800539e <reflow_pid_iteration+0x1d2>
 8005320:	4b5a      	ldr	r3, [pc, #360]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d10c      	bne.n	8005342 <reflow_pid_iteration+0x176>
 8005328:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800532c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005330:	ee17 3a90 	vmov	r3, s15
 8005334:	b299      	uxth	r1, r3
 8005336:	4b55      	ldr	r3, [pc, #340]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	460b      	mov	r3, r1
 800533e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005340:	e02d      	b.n	800539e <reflow_pid_iteration+0x1d2>
 8005342:	4b52      	ldr	r3, [pc, #328]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d10c      	bne.n	8005364 <reflow_pid_iteration+0x198>
 800534a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800534e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005352:	ee17 3a90 	vmov	r3, s15
 8005356:	b299      	uxth	r1, r3
 8005358:	4b4c      	ldr	r3, [pc, #304]	; (800548c <reflow_pid_iteration+0x2c0>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	460b      	mov	r3, r1
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
 8005362:	e01c      	b.n	800539e <reflow_pid_iteration+0x1d2>
 8005364:	4b49      	ldr	r3, [pc, #292]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b10      	cmp	r3, #16
 800536a:	d10c      	bne.n	8005386 <reflow_pid_iteration+0x1ba>
 800536c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005374:	ee17 3a90 	vmov	r3, s15
 8005378:	b299      	uxth	r1, r3
 800537a:	4b44      	ldr	r3, [pc, #272]	; (800548c <reflow_pid_iteration+0x2c0>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	460b      	mov	r3, r1
 8005382:	6593      	str	r3, [r2, #88]	; 0x58
 8005384:	e00b      	b.n	800539e <reflow_pid_iteration+0x1d2>
 8005386:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800538a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538e:	ee17 3a90 	vmov	r3, s15
 8005392:	b299      	uxth	r1, r3
 8005394:	4b3d      	ldr	r3, [pc, #244]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	460b      	mov	r3, r1
 800539c:	65d3      	str	r3, [r2, #92]	; 0x5c

    LOGI(TAG, "%s %.2f %.2f %.2f %.2f %.2f %.2f",
 800539e:	4b36      	ldr	r3, [pc, #216]	; (8005478 <reflow_pid_iteration+0x2ac>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d062      	beq.n	800546c <reflow_pid_iteration+0x2a0>
 80053a6:	f001 f829 	bl	80063fc <HAL_GetTick>
 80053aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80053ac:	4b33      	ldr	r3, [pc, #204]	; (800547c <reflow_pid_iteration+0x2b0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	4a32      	ldr	r2, [pc, #200]	; (8005480 <reflow_pid_iteration+0x2b4>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	099a      	lsrs	r2, r3, #6
 80053bc:	61fa      	str	r2, [r7, #28]
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <reflow_pid_iteration+0x2b4>)
 80053c2:	fba2 1203 	umull	r1, r2, r2, r3
 80053c6:	0996      	lsrs	r6, r2, #6
 80053c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053cc:	fb02 f206 	mul.w	r2, r2, r6
 80053d0:	1a9e      	subs	r6, r3, r2
 80053d2:	4b2a      	ldr	r3, [pc, #168]	; (800547c <reflow_pid_iteration+0x2b0>)
 80053d4:	6819      	ldr	r1, [r3, #0]
 80053d6:	61b9      	str	r1, [r7, #24]
 80053d8:	4b2c      	ldr	r3, [pc, #176]	; (800548c <reflow_pid_iteration+0x2c0>)
 80053da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053de:	461a      	mov	r2, r3
 80053e0:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <reflow_pid_iteration+0x2cc>)
 80053e2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80053e6:	617c      	str	r4, [r7, #20]
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <reflow_pid_iteration+0x2c0>)
 80053ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fb f85d 	bl	80004ac <__aeabi_f2d>
 80053f2:	4682      	mov	sl, r0
 80053f4:	468b      	mov	fp, r1
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fb f857 	bl	80004ac <__aeabi_f2d>
 80053fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4618      	mov	r0, r3
 8005408:	f7fb f850 	bl	80004ac <__aeabi_f2d>
 800540c:	e9c7 0100 	strd	r0, r1, [r7]
 8005410:	4b1e      	ldr	r3, [pc, #120]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	4618      	mov	r0, r3
 8005416:	f7fb f849 	bl	80004ac <__aeabi_f2d>
 800541a:	4680      	mov	r8, r0
 800541c:	4689      	mov	r9, r1
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <reflow_pid_iteration+0x2c0>)
 8005420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005422:	4618      	mov	r0, r3
 8005424:	f7fb f842 	bl	80004ac <__aeabi_f2d>
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
 800542c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800542e:	f7fb f83d 	bl	80004ac <__aeabi_f2d>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800543a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800543e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005442:	ed97 7b00 	vldr	d7, [r7]
 8005446:	ed8d 7b08 	vstr	d7, [sp, #32]
 800544a:	ed97 7b02 	vldr	d7, [r7, #8]
 800544e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005452:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005456:	697c      	ldr	r4, [r7, #20]
 8005458:	9402      	str	r4, [sp, #8]
 800545a:	69b9      	ldr	r1, [r7, #24]
 800545c:	9101      	str	r1, [sp, #4]
 800545e:	9600      	str	r6, [sp, #0]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4a0e      	ldr	r2, [pc, #56]	; (800549c <reflow_pid_iteration+0x2d0>)
 8005464:	2103      	movs	r1, #3
 8005466:	6a38      	ldr	r0, [r7, #32]
 8005468:	f7fc febc 	bl	80021e4 <log_printf>
         temp_reading,
         reflow_ao.pid_params.proportional,
         reflow_ao.pid_params.integral,
         reflow_ao.pid_params.derivative,
         pwm_value);
}
 800546c:	bf00      	nop
 800546e:	3744      	adds	r7, #68	; 0x44
 8005470:	46bd      	mov	sp, r7
 8005472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005476:	bf00      	nop
 8005478:	20000078 	.word	0x20000078
 800547c:	20000124 	.word	0x20000124
 8005480:	10624dd3 	.word	0x10624dd3
 8005484:	0800f540 	.word	0x0800f540
 8005488:	0800fa50 	.word	0x0800fa50
 800548c:	20000080 	.word	0x20000080
 8005490:	0800fb00 	.word	0x0800fb00
 8005494:	200000ac 	.word	0x200000ac
 8005498:	20000128 	.word	0x20000128
 800549c:	0800f594 	.word	0x0800f594

080054a0 <reflow_status_cmd>:

/**
 * @brief Display PID, profile parameters, or both to user.
 */
static uint32_t reflow_status_cmd(uint32_t argc, const char **argv)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
    displayPIDParams();
 80054aa:	f000 f99f 	bl	80057ec <displayPIDParams>
    displayProfileParams();
 80054ae:	f000 f9f1 	bl	8005894 <displayProfileParams>
    displayState();
 80054b2:	f000 fa35 	bl	8005920 <displayState>
    float oven_temp = 0;
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
    if (readTemperature(&oven_temp))
 80054bc:	f107 030c 	add.w	r3, r7, #12
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fa43 	bl	800594c <readTemperature>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <reflow_status_cmd+0x40>
    {
        LOG("Oven temperature: %.2f\r\n", oven_temp);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fa ffec 	bl	80004ac <__aeabi_f2d>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4807      	ldr	r0, [pc, #28]	; (80054f8 <reflow_status_cmd+0x58>)
 80054da:	f7ff f9f1 	bl	80048c0 <printf_>
 80054de:	e006      	b.n	80054ee <reflow_status_cmd+0x4e>
    }
    else
    {
        LOG("Oven temperature read error: %s\r\n", MAX31855K_Err_Str());
 80054e0:	f7fb fd7e 	bl	8000fe0 <MAX31855K_Err_Str>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4619      	mov	r1, r3
 80054e8:	4804      	ldr	r0, [pc, #16]	; (80054fc <reflow_status_cmd+0x5c>)
 80054ea:	f7ff f9e9 	bl	80048c0 <printf_>
    }
    return 0;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	0800f5d4 	.word	0x0800f5d4
 80054fc:	0800f5f4 	.word	0x0800f5f4

08005500 <reflow_start_cmd>:

static uint32_t reflow_start_cmd(uint32_t argc, const char **argv)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
    static const Event start_evt = {.sig = START_REFLOW_SIG};
    Active_post(&reflow_ao.reflow_base, &start_evt);
 800550a:	4906      	ldr	r1, [pc, #24]	; (8005524 <reflow_start_cmd+0x24>)
 800550c:	4806      	ldr	r0, [pc, #24]	; (8005528 <reflow_start_cmd+0x28>)
 800550e:	f7fb fe4f 	bl	80011b0 <Active_post>
    LOG("Posted START signal to reflow active object.\r\n");
 8005512:	4806      	ldr	r0, [pc, #24]	; (800552c <reflow_start_cmd+0x2c>)
 8005514:	f7ff f9d4 	bl	80048c0 <printf_>
    return 0;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	0800fb04 	.word	0x0800fb04
 8005528:	20000080 	.word	0x20000080
 800552c:	0800f620 	.word	0x0800f620

08005530 <reflow_stop_cmd>:

static uint32_t reflow_stop_cmd(uint32_t argc, const char **argv)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
    Active_post(&reflow_ao.reflow_base, &stop_evt);
 800553a:	4906      	ldr	r1, [pc, #24]	; (8005554 <reflow_stop_cmd+0x24>)
 800553c:	4806      	ldr	r0, [pc, #24]	; (8005558 <reflow_stop_cmd+0x28>)
 800553e:	f7fb fe37 	bl	80011b0 <Active_post>
    LOG("Posted STOP signal to reflow active object.\r\n");
 8005542:	4806      	ldr	r0, [pc, #24]	; (800555c <reflow_stop_cmd+0x2c>)
 8005544:	f7ff f9bc 	bl	80048c0 <printf_>
    return 0;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	0800fa50 	.word	0x0800fa50
 8005558:	20000080 	.word	0x20000080
 800555c:	0800f658 	.word	0x0800f658

08005560 <reflow_set_cmd>:

static uint32_t reflow_set_cmd(uint32_t argc, const char **argv)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
    if (argc % 2 != 0 || argc == 0)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <reflow_set_cmd+0x1a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <reflow_set_cmd+0x26>
    {
        LOG("Invalid number of arguments\r\n");
 800557a:	484b      	ldr	r0, [pc, #300]	; (80056a8 <reflow_set_cmd+0x148>)
 800557c:	f7ff f9a0 	bl	80048c0 <printf_>
        return -1;
 8005580:	f04f 33ff 	mov.w	r3, #4294967295
 8005584:	e08c      	b.n	80056a0 <reflow_set_cmd+0x140>
    }

    /* Iterate through <param>,<value> pairs */
    for (uint8_t i = 0; i < argc; i += 2)
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
 800558a:	e083      	b.n	8005694 <reflow_set_cmd+0x134>
    {
        const char *param = argv[i];
 800558c:	7dfb      	ldrb	r3, [r7, #23]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	4413      	add	r3, r2
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	613b      	str	r3, [r7, #16]
        char **end_ptr;
        uint32_t val = strtoul(argv[i + 1], end_ptr, 0);
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	3301      	adds	r3, #1
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	4413      	add	r3, r2
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2200      	movs	r2, #0
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f009 f82d 	bl	800e608 <strtoul>
 80055ae:	60b8      	str	r0, [r7, #8]
        if (strcasecmp(param, "Kp") == 0)
 80055b0:	493e      	ldr	r1, [pc, #248]	; (80056ac <reflow_set_cmd+0x14c>)
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f008 ff7c 	bl	800e4b0 <strcasecmp>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d112      	bne.n	80055e4 <reflow_set_cmd+0x84>
        {

            reflow_ao.pid_params.Kp = (float)val;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <reflow_set_cmd+0x150>)
 80055ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            LOG("Updated Kp to %.2f\r\n", reflow_ao.pid_params.Kp);
 80055ce:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <reflow_set_cmd+0x150>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fa ff6a 	bl	80004ac <__aeabi_f2d>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4835      	ldr	r0, [pc, #212]	; (80056b4 <reflow_set_cmd+0x154>)
 80055de:	f7ff f96f 	bl	80048c0 <printf_>
 80055e2:	e054      	b.n	800568e <reflow_set_cmd+0x12e>
        }
        else if (strcasecmp(param, "Kd") == 0)
 80055e4:	4934      	ldr	r1, [pc, #208]	; (80056b8 <reflow_set_cmd+0x158>)
 80055e6:	6938      	ldr	r0, [r7, #16]
 80055e8:	f008 ff62 	bl	800e4b0 <strcasecmp>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d112      	bne.n	8005618 <reflow_set_cmd+0xb8>
        {

            reflow_ao.pid_params.Kd = (float)val;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fc:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <reflow_set_cmd+0x150>)
 80055fe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
            LOG("Updated Kd to %.2f\r\n", reflow_ao.pid_params.Kd);
 8005602:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <reflow_set_cmd+0x150>)
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	4618      	mov	r0, r3
 8005608:	f7fa ff50 	bl	80004ac <__aeabi_f2d>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	482a      	ldr	r0, [pc, #168]	; (80056bc <reflow_set_cmd+0x15c>)
 8005612:	f7ff f955 	bl	80048c0 <printf_>
 8005616:	e03a      	b.n	800568e <reflow_set_cmd+0x12e>
        }
        else if (strcasecmp(param, "Ki") == 0)
 8005618:	4929      	ldr	r1, [pc, #164]	; (80056c0 <reflow_set_cmd+0x160>)
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f008 ff48 	bl	800e4b0 <strcasecmp>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d112      	bne.n	800564c <reflow_set_cmd+0xec>
        {

            reflow_ao.pid_params.Ki = (float)val;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <reflow_set_cmd+0x150>)
 8005632:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            LOG("Updated Ki to %.2f\r\n", reflow_ao.pid_params.Ki);
 8005636:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <reflow_set_cmd+0x150>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	4618      	mov	r0, r3
 800563c:	f7fa ff36 	bl	80004ac <__aeabi_f2d>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	481f      	ldr	r0, [pc, #124]	; (80056c4 <reflow_set_cmd+0x164>)
 8005646:	f7ff f93b 	bl	80048c0 <printf_>
 800564a:	e020      	b.n	800568e <reflow_set_cmd+0x12e>
        }
        else if (strcasecmp(param, "Tau") == 0)
 800564c:	491e      	ldr	r1, [pc, #120]	; (80056c8 <reflow_set_cmd+0x168>)
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f008 ff2e 	bl	800e4b0 <strcasecmp>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d112      	bne.n	8005680 <reflow_set_cmd+0x120>
        {
            reflow_ao.pid_params.tau = (float)val;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <reflow_set_cmd+0x150>)
 8005666:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            LOG("Updated tau to %.2f\r\n", reflow_ao.pid_params.tau);
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <reflow_set_cmd+0x150>)
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	4618      	mov	r0, r3
 8005670:	f7fa ff1c 	bl	80004ac <__aeabi_f2d>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4814      	ldr	r0, [pc, #80]	; (80056cc <reflow_set_cmd+0x16c>)
 800567a:	f7ff f921 	bl	80048c0 <printf_>
 800567e:	e006      	b.n	800568e <reflow_set_cmd+0x12e>
        }
        else
        {
            LOG("Unrecognizable PID parameter: %s\r\n", param);
 8005680:	6939      	ldr	r1, [r7, #16]
 8005682:	4813      	ldr	r0, [pc, #76]	; (80056d0 <reflow_set_cmd+0x170>)
 8005684:	f7ff f91c 	bl	80048c0 <printf_>
            return -1;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	e008      	b.n	80056a0 <reflow_set_cmd+0x140>
    for (uint8_t i = 0; i < argc; i += 2)
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	3302      	adds	r3, #2
 8005692:	75fb      	strb	r3, [r7, #23]
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	f63f af77 	bhi.w	800558c <reflow_set_cmd+0x2c>
        }
    }

    return 0;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	0800f690 	.word	0x0800f690
 80056ac:	0800f6b8 	.word	0x0800f6b8
 80056b0:	20000080 	.word	0x20000080
 80056b4:	0800f6bc 	.word	0x0800f6bc
 80056b8:	0800f6d8 	.word	0x0800f6d8
 80056bc:	0800f6dc 	.word	0x0800f6dc
 80056c0:	0800f6f8 	.word	0x0800f6f8
 80056c4:	0800f6fc 	.word	0x0800f6fc
 80056c8:	0800f718 	.word	0x0800f718
 80056cc:	0800f71c 	.word	0x0800f71c
 80056d0:	0800f73c 	.word	0x0800f73c

080056d4 <reflow_evt_handler>:

static void reflow_evt_handler(Reflow_Active *const ao, Event const *const evt)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
    /* Use state table to handle events */
    ASSERT((ao->state < NUM_REFLOW_STATES) && (evt->sig < NUM_REFLOW_SIGS));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e4:	2b05      	cmp	r3, #5
 80056e6:	d803      	bhi.n	80056f0 <reflow_evt_handler+0x1c>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b05      	cmp	r3, #5
 80056ee:	dd19      	ble.n	8005724 <reflow_evt_handler+0x50>
 80056f0:	f000 fe84 	bl	80063fc <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a38      	ldr	r2, [pc, #224]	; (80057dc <reflow_evt_handler+0x108>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	0999      	lsrs	r1, r3, #6
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a36      	ldr	r2, [pc, #216]	; (80057dc <reflow_evt_handler+0x108>)
 8005704:	fba2 0203 	umull	r0, r2, r2, r3
 8005708:	0992      	lsrs	r2, r2, #6
 800570a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800570e:	fb00 f202 	mul.w	r2, r0, r2
 8005712:	1a9a      	subs	r2, r3, r2
 8005714:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <reflow_evt_handler+0x10c>)
 800571c:	4831      	ldr	r0, [pc, #196]	; (80057e4 <reflow_evt_handler+0x110>)
 800571e:	f7ff f8cf 	bl	80048c0 <printf_>
 8005722:	e7fe      	b.n	8005722 <reflow_evt_handler+0x4e>
    Reflow_Status stat = Reflow_state_table[ao->state][evt->sig](ao, evt);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800572a:	4618      	mov	r0, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	492d      	ldr	r1, [pc, #180]	; (80057e8 <reflow_evt_handler+0x114>)
 8005732:	4603      	mov	r3, r0
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	4403      	add	r3, r0
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]

    /**
	 * Execute entry action of current state if
	 * state transition was taken.
	 */
    if (stat == TRAN_STATUS)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d12e      	bne.n	80057ae <reflow_evt_handler+0xda>
    {
        ASSERT(ao->state < NUM_REFLOW_STATES);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005756:	2b05      	cmp	r3, #5
 8005758:	d919      	bls.n	800578e <reflow_evt_handler+0xba>
 800575a:	f000 fe4f 	bl	80063fc <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <reflow_evt_handler+0x108>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	0999      	lsrs	r1, r3, #6
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <reflow_evt_handler+0x108>)
 800576e:	fba2 0203 	umull	r0, r2, r2, r3
 8005772:	0992      	lsrs	r2, r2, #6
 8005774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005778:	fb00 f202 	mul.w	r2, r0, r2
 800577c:	1a9a      	subs	r2, r3, r2
 800577e:	f240 13d5 	movw	r3, #469	; 0x1d5
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <reflow_evt_handler+0x10c>)
 8005786:	4817      	ldr	r0, [pc, #92]	; (80057e4 <reflow_evt_handler+0x110>)
 8005788:	f7ff f89a 	bl	80048c0 <printf_>
 800578c:	e7fe      	b.n	800578c <reflow_evt_handler+0xb8>
        Reflow_state_table[ao->state][ENTRY_SIG](ao, (Event *)0);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005794:	4619      	mov	r1, r3
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <reflow_evt_handler+0x114>)
 8005798:	460b      	mov	r3, r1
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	440b      	add	r3, r1
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2100      	movs	r1, #0
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
    else if (stat == INIT_STATUS)
    {
        /* Execute entry action of initial state. */
        Reflow_state_table[ao->state][ENTRY_SIG](ao, (Event *)0);
    }
}
 80057ac:	e011      	b.n	80057d2 <reflow_evt_handler+0xfe>
    else if (stat == INIT_STATUS)
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d10e      	bne.n	80057d2 <reflow_evt_handler+0xfe>
        Reflow_state_table[ao->state][ENTRY_SIG](ao, (Event *)0);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ba:	4619      	mov	r1, r3
 80057bc:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <reflow_evt_handler+0x114>)
 80057be:	460b      	mov	r3, r1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	440b      	add	r3, r1
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	3304      	adds	r3, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2100      	movs	r1, #0
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
}
 80057d2:	bf00      	nop
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	10624dd3 	.word	0x10624dd3
 80057e0:	0800f768 	.word	0x0800f768
 80057e4:	0800f780 	.word	0x0800f780
 80057e8:	0800fa54 	.word	0x0800fa54

080057ec <displayPIDParams>:

static inline void displayPIDParams()
{
 80057ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f0:	b092      	sub	sp, #72	; 0x48
 80057f2:	af0c      	add	r7, sp, #48	; 0x30
    LOG("Kp: %.2f\tKi: %.2f\tKd: %.2f\tTau: %.2f\r\n"
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <displayPIDParams+0xa0>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fa fe57 	bl	80004ac <__aeabi_f2d>
 80057fe:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <displayPIDParams+0xa0>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	4618      	mov	r0, r3
 8005808:	f7fa fe50 	bl	80004ac <__aeabi_f2d>
 800580c:	4680      	mov	r8, r0
 800580e:	4689      	mov	r9, r1
 8005810:	4b1e      	ldr	r3, [pc, #120]	; (800588c <displayPIDParams+0xa0>)
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	4618      	mov	r0, r3
 8005816:	f7fa fe49 	bl	80004ac <__aeabi_f2d>
 800581a:	4682      	mov	sl, r0
 800581c:	468b      	mov	fp, r1
 800581e:	4b1b      	ldr	r3, [pc, #108]	; (800588c <displayPIDParams+0xa0>)
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	4618      	mov	r0, r3
 8005824:	f7fa fe42 	bl	80004ac <__aeabi_f2d>
 8005828:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <displayPIDParams+0xa0>)
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	4618      	mov	r0, r3
 8005832:	f7fa fe3b 	bl	80004ac <__aeabi_f2d>
 8005836:	e9c7 0100 	strd	r0, r1, [r7]
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <displayPIDParams+0xa0>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	4618      	mov	r0, r3
 8005840:	f7fa fe34 	bl	80004ac <__aeabi_f2d>
 8005844:	4604      	mov	r4, r0
 8005846:	460d      	mov	r5, r1
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <displayPIDParams+0xa0>)
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	4618      	mov	r0, r3
 800584e:	f7fa fe2d 	bl	80004ac <__aeabi_f2d>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800585a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800585e:	ed97 7b00 	vldr	d7, [r7]
 8005862:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005866:	ed97 7b02 	vldr	d7, [r7, #8]
 800586a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800586e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8005872:	e9cd 8900 	strd	r8, r9, [sp]
 8005876:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800587a:	4805      	ldr	r0, [pc, #20]	; (8005890 <displayPIDParams+0xa4>)
 800587c:	f7ff f820 	bl	80048c0 <printf_>
        "Sampling Period: %.2f s\tMax Limit: %.2f\tMin Limit: %.2f\r\n",
        reflow_ao.pid_params.Kp, reflow_ao.pid_params.Ki, reflow_ao.pid_params.Kd,
        reflow_ao.pid_params.tau, reflow_ao.pid_params.Ts,
        reflow_ao.pid_params.out_lim_max, reflow_ao.pid_params.out_lim_min);
}
 8005880:	bf00      	nop
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588a:	bf00      	nop
 800588c:	20000080 	.word	0x20000080
 8005890:	0800f7b8 	.word	0x0800f7b8

08005894 <displayProfileParams>:

static inline void displayProfileParams()
{
 8005894:	b5b0      	push	{r4, r5, r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af02      	add	r7, sp, #8
    for (uint8_t i = 0; i < NUM_PROFILE_PHASES; i++)
 800589a:	2300      	movs	r3, #0
 800589c:	71fb      	strb	r3, [r7, #7]
 800589e:	e02d      	b.n	80058fc <displayProfileParams+0x68>
    {
        LOG("Phase: %s\tType: %s\tReach Temp: %lu deg C\tReach Time: %lu s\r\n",
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <displayProfileParams+0x78>)
 80058a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058aa:	79fa      	ldrb	r2, [r7, #7]
 80058ac:	4818      	ldr	r0, [pc, #96]	; (8005910 <displayProfileParams+0x7c>)
 80058ae:	4613      	mov	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4403      	add	r3, r0
 80058b8:	3368      	adds	r3, #104	; 0x68
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <displayProfileParams+0x30>
 80058c0:	4814      	ldr	r0, [pc, #80]	; (8005914 <displayProfileParams+0x80>)
 80058c2:	e000      	b.n	80058c6 <displayProfileParams+0x32>
 80058c4:	4814      	ldr	r0, [pc, #80]	; (8005918 <displayProfileParams+0x84>)
 80058c6:	79fa      	ldrb	r2, [r7, #7]
 80058c8:	4c11      	ldr	r4, [pc, #68]	; (8005910 <displayProfileParams+0x7c>)
 80058ca:	4613      	mov	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4423      	add	r3, r4
 80058d4:	336c      	adds	r3, #108	; 0x6c
 80058d6:	681c      	ldr	r4, [r3, #0]
 80058d8:	79fa      	ldrb	r2, [r7, #7]
 80058da:	4d0d      	ldr	r5, [pc, #52]	; (8005910 <displayProfileParams+0x7c>)
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	442b      	add	r3, r5
 80058e6:	3370      	adds	r3, #112	; 0x70
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	4623      	mov	r3, r4
 80058ee:	4602      	mov	r2, r0
 80058f0:	480a      	ldr	r0, [pc, #40]	; (800591c <displayProfileParams+0x88>)
 80058f2:	f7fe ffe5 	bl	80048c0 <printf_>
    for (uint8_t i = 0; i < NUM_PROFILE_PHASES; i++)
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	3301      	adds	r3, #1
 80058fa:	71fb      	strb	r3, [r7, #7]
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d9ce      	bls.n	80058a0 <displayProfileParams+0xc>
            reflow_names[i + 1], reflow_ao.reflow_phases[i].phase_type == REACHTEMP ? "REACHTEMP" : "REACHTIME",
            reflow_ao.reflow_phases[i].reach_temp,
            reflow_ao.reflow_phases[i].reach_time);
    }
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bdb0      	pop	{r4, r5, r7, pc}
 800590c:	20000128 	.word	0x20000128
 8005910:	20000080 	.word	0x20000080
 8005914:	0800f820 	.word	0x0800f820
 8005918:	0800f82c 	.word	0x0800f82c
 800591c:	0800f838 	.word	0x0800f838

08005920 <displayState>:

static inline void displayState()
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
    LOG("Current state: %s\r\n", reflow_names[reflow_ao.state]);
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <displayState+0x20>)
 8005926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800592a:	461a      	mov	r2, r3
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <displayState+0x24>)
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	4619      	mov	r1, r3
 8005934:	4804      	ldr	r0, [pc, #16]	; (8005948 <displayState+0x28>)
 8005936:	f7fe ffc3 	bl	80048c0 <printf_>
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000080 	.word	0x20000080
 8005944:	20000128 	.word	0x20000128
 8005948:	0800f87c 	.word	0x0800f87c

0800594c <readTemperature>:
 * @param[in/out] temp Temperature reading if return value is true, unmodified otherwise.
 *
 * @return true if successful read, false otherwise.
 */
static inline bool readTemperature(float *const temp)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
    MAX31855K_err_t err = MAX31855K_RxBlocking();
 8005954:	f7fb fada 	bl	8000f0c <MAX31855K_RxBlocking>
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <readTemperature+0x1a>
    {
        return false;
 8005962:	2300      	movs	r3, #0
 8005964:	e007      	b.n	8005976 <readTemperature+0x2a>
    }
    else
    {
        *temp = MAX31855K_Get_HJ();
 8005966:	f7fb fb07 	bl	8000f78 <MAX31855K_Get_HJ>
 800596a:	eef0 7a40 	vmov.f32	s15, s0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	edc3 7a00 	vstr	s15, [r3]
        return true;
 8005974:	2301      	movs	r3, #1
    }
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_MspInit>:
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <HAL_MspInit+0x4c>)
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	4a10      	ldr	r2, [pc, #64]	; (80059cc <HAL_MspInit+0x4c>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	6613      	str	r3, [r2, #96]	; 0x60
 8005992:	4b0e      	ldr	r3, [pc, #56]	; (80059cc <HAL_MspInit+0x4c>)
 8005994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_MspInit+0x4c>)
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <HAL_MspInit+0x4c>)
 80059a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6593      	str	r3, [r2, #88]	; 0x58
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_MspInit+0x4c>)
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	210f      	movs	r1, #15
 80059ba:	f06f 0001 	mvn.w	r0, #1
 80059be:	f000 fde1 	bl	8006584 <HAL_NVIC_SetPriority>
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000

080059d0 <HAL_SPI_MspInit>:
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	f107 0314 	add.w	r3, r7, #20
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	609a      	str	r2, [r3, #8]
 80059e4:	60da      	str	r2, [r3, #12]
 80059e6:	611a      	str	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <HAL_SPI_MspInit+0xb4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d144      	bne.n	8005a7c <HAL_SPI_MspInit+0xac>
 80059f2:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 80059f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f6:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 80059f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059fc:	6593      	str	r3, [r2, #88]	; 0x58
 80059fe:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 8005a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0e:	4a1e      	ldr	r2, [pc, #120]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 8005a10:	f043 0304 	orr.w	r3, r3, #4
 8005a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 8005a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 8005a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a26:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a2e:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <HAL_SPI_MspInit+0xb8>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	60bb      	str	r3, [r7, #8]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	2302      	movs	r3, #2
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	2303      	movs	r3, #3
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	2305      	movs	r3, #5
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	f107 0314 	add.w	r3, r7, #20
 8005a52:	4619      	mov	r1, r3
 8005a54:	480d      	ldr	r0, [pc, #52]	; (8005a8c <HAL_SPI_MspInit+0xbc>)
 8005a56:	f000 fdbf 	bl	80065d8 <HAL_GPIO_Init>
 8005a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	2302      	movs	r3, #2
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	2300      	movs	r3, #0
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	2303      	movs	r3, #3
 8005a6a:	623b      	str	r3, [r7, #32]
 8005a6c:	2305      	movs	r3, #5
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	4619      	mov	r1, r3
 8005a76:	4806      	ldr	r0, [pc, #24]	; (8005a90 <HAL_SPI_MspInit+0xc0>)
 8005a78:	f000 fdae 	bl	80065d8 <HAL_GPIO_Init>
 8005a7c:	bf00      	nop
 8005a7e:	3728      	adds	r7, #40	; 0x28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40003800 	.word	0x40003800
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	48000800 	.word	0x48000800
 8005a90:	48000400 	.word	0x48000400

08005a94 <HAL_TIM_Base_MspInit>:
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <HAL_TIM_Base_MspInit+0x38>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10b      	bne.n	8005abe <HAL_TIM_Base_MspInit+0x2a>
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8005aac:	f043 0302 	orr.w	r3, r3, #2
 8005ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40021000 	.word	0x40021000

08005ad4 <HAL_TIM_MspPostInit>:
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	f107 030c 	add.w	r3, r7, #12
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	611a      	str	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <HAL_TIM_MspPostInit+0x64>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d11c      	bne.n	8005b30 <HAL_TIM_MspPostInit+0x5c>
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <HAL_TIM_MspPostInit+0x68>)
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	4a10      	ldr	r2, [pc, #64]	; (8005b3c <HAL_TIM_MspPostInit+0x68>)
 8005afc:	f043 0301 	orr.w	r3, r3, #1
 8005b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <HAL_TIM_MspPostInit+0x68>)
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2340      	movs	r3, #64	; 0x40
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	2302      	movs	r3, #2
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	2302      	movs	r3, #2
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	4619      	mov	r1, r3
 8005b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b2c:	f000 fd54 	bl	80065d8 <HAL_GPIO_Init>
 8005b30:	bf00      	nop
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40021000 	.word	0x40021000

08005b40 <HAL_InitTick>:
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b50:	2200      	movs	r2, #0
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	2037      	movs	r0, #55	; 0x37
 8005b56:	f000 fd15 	bl	8006584 <HAL_NVIC_SetPriority>
 8005b5a:	2037      	movs	r0, #55	; 0x37
 8005b5c:	f000 fd2e 	bl	80065bc <HAL_NVIC_EnableIRQ>
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <HAL_InitTick+0x9c>)
 8005b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_InitTick+0x9c>)
 8005b66:	f043 0320 	orr.w	r3, r3, #32
 8005b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <HAL_InitTick+0x9c>)
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f107 0210 	add.w	r2, r7, #16
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 fcc4 	bl	8007510 <HAL_RCC_GetClockConfig>
 8005b88:	f001 fcac 	bl	80074e4 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <HAL_InitTick+0xa0>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	0c9b      	lsrs	r3, r3, #18
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9c:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <HAL_InitTick+0xa4>)
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <HAL_InitTick+0xa8>)
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_InitTick+0xa4>)
 8005ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <HAL_InitTick+0xa4>)
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	6053      	str	r3, [r2, #4]
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <HAL_InitTick+0xa4>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_InitTick+0xa4>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	4809      	ldr	r0, [pc, #36]	; (8005be4 <HAL_InitTick+0xa4>)
 8005bbe:	f002 ff93 	bl	8008ae8 <HAL_TIM_Base_Init>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <HAL_InitTick+0x92>
 8005bc8:	4806      	ldr	r0, [pc, #24]	; (8005be4 <HAL_InitTick+0xa4>)
 8005bca:	f002 ffe5 	bl	8008b98 <HAL_TIM_Base_Start_IT>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	e000      	b.n	8005bd4 <HAL_InitTick+0x94>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3730      	adds	r7, #48	; 0x30
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	431bde83 	.word	0x431bde83
 8005be4:	20005088 	.word	0x20005088
 8005be8:	40001400 	.word	0x40001400

08005bec <NMI_Handler>:
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	e7fe      	b.n	8005bf0 <NMI_Handler+0x4>

08005bf2 <HardFault_Handler>:
 8005bf2:	b480      	push	{r7}
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	e7fe      	b.n	8005bf6 <HardFault_Handler+0x4>

08005bf8 <MemManage_Handler>:
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	e7fe      	b.n	8005bfc <MemManage_Handler+0x4>

08005bfe <BusFault_Handler>:
 8005bfe:	b480      	push	{r7}
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	e7fe      	b.n	8005c02 <BusFault_Handler+0x4>

08005c04 <UsageFault_Handler>:
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	e7fe      	b.n	8005c08 <UsageFault_Handler+0x4>

08005c0a <DebugMon_Handler>:
 8005c0a:	b480      	push	{r7}
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	bf00      	nop
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <TIM7_IRQHandler>:
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	4802      	ldr	r0, [pc, #8]	; (8005c28 <TIM7_IRQHandler+0x10>)
 8005c1e:	f003 fa29 	bl	8009074 <HAL_TIM_IRQHandler>
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20005088 	.word	0x20005088

08005c2c <_sbrk>:
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <_sbrk+0x5c>)
 8005c36:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <_sbrk+0x60>)
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <_sbrk+0x64>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <_sbrk+0x22>
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <_sbrk+0x64>)
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <_sbrk+0x68>)
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <_sbrk+0x64>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d207      	bcs.n	8005c6c <_sbrk+0x40>
 8005c5c:	f008 fb1e 	bl	800e29c <__errno>
 8005c60:	4603      	mov	r3, r0
 8005c62:	220c      	movs	r2, #12
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6a:	e009      	b.n	8005c80 <_sbrk+0x54>
 8005c6c:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <_sbrk+0x64>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <_sbrk+0x64>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4413      	add	r3, r2
 8005c7a:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <_sbrk+0x64>)
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20018000 	.word	0x20018000
 8005c8c:	00000400 	.word	0x00000400
 8005c90:	20000400 	.word	0x20000400
 8005c94:	20005128 	.word	0x20005128

08005c98 <SystemInit>:
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <SystemInit+0x5c>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <SystemInit+0x5c>)
 8005ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <SystemInit+0x60>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a11      	ldr	r2, [pc, #68]	; (8005cf8 <SystemInit+0x60>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <SystemInit+0x60>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <SystemInit+0x60>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <SystemInit+0x60>)
 8005cc4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005cc8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <SystemInit+0x60>)
 8005cd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <SystemInit+0x60>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <SystemInit+0x60>)
 8005cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <SystemInit+0x60>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	619a      	str	r2, [r3, #24]
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	e000ed00 	.word	0xe000ed00
 8005cf8:	40021000 	.word	0x40021000

08005cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <__NVIC_GetPriorityGrouping+0x18>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	0a1b      	lsrs	r3, r3, #8
 8005d06:	f003 0307 	and.w	r3, r3, #7
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	e000ed00 	.word	0xe000ed00

08005d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	db0b      	blt.n	8005d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	f003 021f 	and.w	r2, r3, #31
 8005d30:	4907      	ldr	r1, [pc, #28]	; (8005d50 <__NVIC_EnableIRQ+0x38>)
 8005d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	2001      	movs	r0, #1
 8005d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	e000e100 	.word	0xe000e100

08005d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	6039      	str	r1, [r7, #0]
 8005d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	db0a      	blt.n	8005d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	490c      	ldr	r1, [pc, #48]	; (8005da0 <__NVIC_SetPriority+0x4c>)
 8005d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d72:	0112      	lsls	r2, r2, #4
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	440b      	add	r3, r1
 8005d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d7c:	e00a      	b.n	8005d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	4908      	ldr	r1, [pc, #32]	; (8005da4 <__NVIC_SetPriority+0x50>)
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	3b04      	subs	r3, #4
 8005d8c:	0112      	lsls	r2, r2, #4
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	440b      	add	r3, r1
 8005d92:	761a      	strb	r2, [r3, #24]
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000e100 	.word	0xe000e100
 8005da4:	e000ed00 	.word	0xe000ed00

08005da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b089      	sub	sp, #36	; 0x24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f1c3 0307 	rsb	r3, r3, #7
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	bf28      	it	cs
 8005dc6:	2304      	movcs	r3, #4
 8005dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	2b06      	cmp	r3, #6
 8005dd0:	d902      	bls.n	8005dd8 <NVIC_EncodePriority+0x30>
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3b03      	subs	r3, #3
 8005dd6:	e000      	b.n	8005dda <NVIC_EncodePriority+0x32>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43da      	mvns	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	401a      	ands	r2, r3
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005df0:	f04f 31ff 	mov.w	r1, #4294967295
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfa:	43d9      	mvns	r1, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e00:	4313      	orrs	r3, r2
         );
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3724      	adds	r7, #36	; 0x24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <LL_USART_IsEnabled>:
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <LL_USART_IsEnabled+0x18>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <LL_USART_IsEnabled+0x1a>
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	621a      	str	r2, [r3, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	601a      	str	r2, [r3, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d101      	bne.n	8005f14 <LL_USART_IsEnabledIT_TXE+0x18>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <LL_USART_IsEnabledIT_TXE+0x1a>
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <uart_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t uart_init(uart_config_t *uart_cfg)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	6078      	str	r0, [r7, #4]
    if (uart_cfg->uart_reg_base == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <uart_init+0x14>
    {
        return MOD_ERR_ARG;
 8005f34:	2302      	movs	r3, #2
 8005f36:	e04c      	b.n	8005fd2 <uart_init+0xae>
    }
    else if (!LL_USART_IsEnabled(uart_cfg->uart_reg_base))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff ff66 	bl	8005e0e <LL_USART_IsEnabled>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <uart_init+0x28>
    {
        return MOD_ERR_PERIPH;
 8005f48:	2308      	movs	r3, #8
 8005f4a:	e042      	b.n	8005fd2 <uart_init+0xae>
    }
    else
    {
        switch (uart_cfg->irq_num)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005f52:	2b27      	cmp	r3, #39	; 0x27
 8005f54:	dc02      	bgt.n	8005f5c <uart_init+0x38>
 8005f56:	2b25      	cmp	r3, #37	; 0x25
 8005f58:	da03      	bge.n	8005f62 <uart_init+0x3e>
 8005f5a:	e039      	b.n	8005fd0 <uart_init+0xac>
 8005f5c:	3b34      	subs	r3, #52	; 0x34
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d836      	bhi.n	8005fd0 <uart_init+0xac>
        case USART1_IRQn:
        case USART2_IRQn:
        case USART3_IRQn:
        case UART4_IRQn:
        case UART5_IRQn:
            memset(&uart, 0, sizeof(uart));
 8005f62:	f240 420c 	movw	r2, #1036	; 0x40c
 8005f66:	2100      	movs	r1, #0
 8005f68:	481c      	ldr	r0, [pc, #112]	; (8005fdc <uart_init+0xb8>)
 8005f6a:	f008 f9df 	bl	800e32c <memset>
            uart.irq_num = uart_cfg->irq_num;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8005f74:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <uart_init+0xb8>)
 8005f76:	711a      	strb	r2, [r3, #4]
            uart.uart_reg_base = uart_cfg->uart_reg_base;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <uart_init+0xb8>)
 8005f7e:	6013      	str	r3, [r2, #0]
            mod_err_t err = cmd_register(&uart_client_info);
 8005f80:	4817      	ldr	r0, [pc, #92]	; (8005fe0 <uart_init+0xbc>)
 8005f82:	f7fb fb95 	bl	80016b0 <cmd_register>
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
            LOGI(TAG, "Initialized UART");
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <uart_init+0xc0>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01c      	beq.n	8005fcc <uart_init+0xa8>
 8005f92:	f000 fa33 	bl	80063fc <HAL_GetTick>
 8005f96:	60b8      	str	r0, [r7, #8]
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <uart_init+0xc4>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <uart_init+0xc8>)
 8005fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa4:	0999      	lsrs	r1, r3, #6
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4b10      	ldr	r3, [pc, #64]	; (8005fec <uart_init+0xc8>)
 8005faa:	fba3 4302 	umull	r4, r3, r3, r2
 8005fae:	099b      	lsrs	r3, r3, #6
 8005fb0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005fb4:	fb04 f303 	mul.w	r3, r4, r3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <uart_init+0xc4>)
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	9201      	str	r2, [sp, #4]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <uart_init+0xcc>)
 8005fc6:	2103      	movs	r1, #3
 8005fc8:	f7fc f90c 	bl	80021e4 <log_printf>
            return err;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	e000      	b.n	8005fd2 <uart_init+0xae>
        default:
            return MOD_ERR_ARG;
 8005fd0:	2302      	movs	r3, #2
        }
    }
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd90      	pop	{r4, r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000404 	.word	0x20000404
 8005fe0:	20000174 	.word	0x20000174
 8005fe4:	20000078 	.word	0x20000078
 8005fe8:	2000018c 	.word	0x2000018c
 8005fec:	10624dd3 	.word	0x10624dd3
 8005ff0:	0800f8d0 	.word	0x0800f8d0

08005ff4 <uart_start>:

mod_err_t uart_start(void)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af02      	add	r7, sp, #8
    if (uart.uart_reg_base == NULL)
 8005ffa:	4b26      	ldr	r3, [pc, #152]	; (8006094 <uart_start+0xa0>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d122      	bne.n	8006048 <uart_start+0x54>
    {
        LOGE(TAG, "UART not initialized");
 8006002:	4b25      	ldr	r3, [pc, #148]	; (8006098 <uart_start+0xa4>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01c      	beq.n	8006044 <uart_start+0x50>
 800600a:	f000 f9f7 	bl	80063fc <HAL_GetTick>
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	4b22      	ldr	r3, [pc, #136]	; (800609c <uart_start+0xa8>)
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a22      	ldr	r2, [pc, #136]	; (80060a0 <uart_start+0xac>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	0999      	lsrs	r1, r3, #6
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	4b1f      	ldr	r3, [pc, #124]	; (80060a0 <uart_start+0xac>)
 8006022:	fba3 4302 	umull	r4, r3, r3, r2
 8006026:	099b      	lsrs	r3, r3, #6
 8006028:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800602c:	fb04 f303 	mul.w	r3, r4, r3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a1a      	ldr	r2, [pc, #104]	; (800609c <uart_start+0xa8>)
 8006034:	6812      	ldr	r2, [r2, #0]
 8006036:	9201      	str	r2, [sp, #4]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	460b      	mov	r3, r1
 800603c:	4a19      	ldr	r2, [pc, #100]	; (80060a4 <uart_start+0xb0>)
 800603e:	2101      	movs	r1, #1
 8006040:	f7fc f8d0 	bl	80021e4 <log_printf>
        return MOD_ERR_NOT_INIT;
 8006044:	2306      	movs	r3, #6
 8006046:	e020      	b.n	800608a <uart_start+0x96>
    }

    LL_USART_EnableIT_TXE(uart.uart_reg_base);  // Generate interrupt whenever TXE flag is set.
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <uart_start+0xa0>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff ff35 	bl	8005ebc <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(uart.uart_reg_base); // Generate interrupt whenever RXNE flag is set.
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <uart_start+0xa0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff ff20 	bl	8005e9c <LL_USART_EnableIT_RXNE>

    /* Numerical interrupt priority must be set greater than or
     * equal to configMAX_SYSCALL_INTERRUPT_PRIORITY
     * in order for ISR to use FreeRTOS API.
     * See https://www.freertos.org/RTOS-Cortex-M3-M4.html */
    __NVIC_SetPriority(uart.irq_num, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 800605c:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <uart_start+0xa0>)
 800605e:	f993 4004 	ldrsb.w	r4, [r3, #4]
 8006062:	f7ff fe4b 	bl	8005cfc <__NVIC_GetPriorityGrouping>
 8006066:	4603      	mov	r3, r0
 8006068:	2200      	movs	r2, #0
 800606a:	2105      	movs	r1, #5
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fe9b 	bl	8005da8 <NVIC_EncodePriority>
 8006072:	4603      	mov	r3, r0
 8006074:	4619      	mov	r1, r3
 8006076:	4620      	mov	r0, r4
 8006078:	f7ff fe6c 	bl	8005d54 <__NVIC_SetPriority>

    __NVIC_EnableIRQ(uart.irq_num);
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <uart_start+0xa0>)
 800607e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fe48 	bl	8005d18 <__NVIC_EnableIRQ>

    return MOD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	bd90      	pop	{r4, r7, pc}
 8006092:	bf00      	nop
 8006094:	20000404 	.word	0x20000404
 8006098:	20000078 	.word	0x20000078
 800609c:	2000018c 	.word	0x2000018c
 80060a0:	10624dd3 	.word	0x10624dd3
 80060a4:	0800f900 	.word	0x0800f900

080060a8 <uart_putc>:

mod_err_t uart_putc(char c)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]

    uint16_t next_put_idx = (uart.tx_buf_put_idx + 1) % UART_TX_BUF_SIZE;
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <uart_putc+0x98>)
 80060b4:	891b      	ldrh	r3, [r3, #8]
 80060b6:	3301      	adds	r3, #1
 80060b8:	425a      	negs	r2, r3
 80060ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80060c2:	bf58      	it	pl
 80060c4:	4253      	negpl	r3, r2
 80060c6:	81fb      	strh	r3, [r7, #14]

    /* Tx circular buffer is full. */
    if (next_put_idx == uart.tx_buf_get_idx)
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <uart_putc+0x98>)
 80060ca:	88db      	ldrh	r3, [r3, #6]
 80060cc:	89fa      	ldrh	r2, [r7, #14]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d111      	bne.n	80060f6 <uart_putc+0x4e>
    {
        INC_SAT_U16(uart_pms[CNT_TX_BUF_OVERRUN]);
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <uart_putc+0x9c>)
 80060d4:	891a      	ldrh	r2, [r3, #8]
 80060d6:	4b1b      	ldr	r3, [pc, #108]	; (8006144 <uart_putc+0x9c>)
 80060d8:	891b      	ldrh	r3, [r3, #8]
 80060da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060de:	428b      	cmp	r3, r1
 80060e0:	bf14      	ite	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	2300      	moveq	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	4b15      	ldr	r3, [pc, #84]	; (8006144 <uart_putc+0x9c>)
 80060f0:	811a      	strh	r2, [r3, #8]
        return MOD_ERR_BUF_OVERRUN;
 80060f2:	2305      	movs	r3, #5
 80060f4:	e01f      	b.n	8006136 <uart_putc+0x8e>
    }

    /* Place char in buffer */
    uart.tx_buf[uart.tx_buf_put_idx] = c;
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <uart_putc+0x98>)
 80060f8:	891b      	ldrh	r3, [r3, #8]
 80060fa:	461a      	mov	r2, r3
 80060fc:	4b10      	ldr	r3, [pc, #64]	; (8006140 <uart_putc+0x98>)
 80060fe:	4413      	add	r3, r2
 8006100:	79fa      	ldrb	r2, [r7, #7]
 8006102:	729a      	strb	r2, [r3, #10]
    uart.tx_buf_put_idx = next_put_idx;
 8006104:	4a0e      	ldr	r2, [pc, #56]	; (8006140 <uart_putc+0x98>)
 8006106:	89fb      	ldrh	r3, [r7, #14]
 8006108:	8113      	strh	r3, [r2, #8]

    // Ensure TXE interrupt is enabled.
    if (uart.uart_reg_base != NULL && !LL_USART_IsEnabledIT_TXE(uart.uart_reg_base))
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <uart_putc+0x98>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d010      	beq.n	8006134 <uart_putc+0x8c>
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <uart_putc+0x98>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fef0 	bl	8005efc <LL_USART_IsEnabledIT_TXE>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d108      	bne.n	8006134 <uart_putc+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 8006122:	b672      	cpsid	i
}
 8006124:	bf00      	nop
    {
        __disable_irq();
        LL_USART_EnableIT_TXE(uart.uart_reg_base);
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <uart_putc+0x98>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fec6 	bl	8005ebc <LL_USART_EnableIT_TXE>
  __ASM volatile ("cpsie i" : : : "memory");
 8006130:	b662      	cpsie	i
}
 8006132:	bf00      	nop
        __enable_irq();
    }

    return MOD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000404 	.word	0x20000404
 8006144:	20000810 	.word	0x20000810

08006148 <USART1_IRQHandler>:
////////////////////////////////////////////////////////////////////////////////
// Interrupt handlers
////////////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
    UART_ISR();
 800614c:	f000 f81a 	bl	8006184 <UART_ISR>
}
 8006150:	bf00      	nop
 8006152:	bd80      	pop	{r7, pc}

08006154 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
    UART_ISR();
 8006158:	f000 f814 	bl	8006184 <UART_ISR>
}
 800615c:	bf00      	nop
 800615e:	bd80      	pop	{r7, pc}

08006160 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
    UART_ISR();
 8006164:	f000 f80e 	bl	8006184 <UART_ISR>
}
 8006168:	bf00      	nop
 800616a:	bd80      	pop	{r7, pc}

0800616c <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
    UART_ISR();
 8006170:	f000 f808 	bl	8006184 <UART_ISR>
}
 8006174:	bf00      	nop
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
    UART_ISR();
 800617c:	f000 f802 	bl	8006184 <UART_ISR>
}
 8006180:	bf00      	nop
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_ISR>:
////////////////////////////////////////////////////////////////////////////////
// Private (static) function definitions
////////////////////////////////////////////////////////////////////////////////

static void UART_ISR(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
    /* Read interrupt status register. */
    uint32_t status_reg = uart.uart_reg_base->ISR;
 800618a:	4b41      	ldr	r3, [pc, #260]	; (8006290 <UART_ISR+0x10c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	607b      	str	r3, [r7, #4]

    /* Service interrupt flags. */
    if (status_reg & USART_ISR_RXNE_Msk)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <UART_ISR+0x1c>
    {
        read_rdr();
 800619c:	f000 f87c 	bl	8006298 <read_rdr>
    }
    if (status_reg & USART_ISR_TXE_Msk)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <UART_ISR+0x2a>
    {
        write_tdr();
 80061aa:	f000 f89f 	bl	80062ec <write_tdr>
    }

    /* Check error flags. */
    if (status_reg & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d067      	beq.n	8006288 <UART_ISR+0x104>
    {
        if (status_reg & LL_USART_ISR_ORE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d014      	beq.n	80061ec <UART_ISR+0x68>
        { // An overrun error occurs if a character is received and RXNE has not been reset.
            // The RDR register content is not lost but the shift register is overwritten by incoming data.
            INC_SAT_U16(uart_pms[CNT_RX_UART_ORE]);
 80061c2:	4b34      	ldr	r3, [pc, #208]	; (8006294 <UART_ISR+0x110>)
 80061c4:	881a      	ldrh	r2, [r3, #0]
 80061c6:	4b33      	ldr	r3, [pc, #204]	; (8006294 <UART_ISR+0x110>)
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061ce:	428b      	cmp	r3, r1
 80061d0:	bf14      	ite	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	2300      	moveq	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4413      	add	r3, r2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	4b2d      	ldr	r3, [pc, #180]	; (8006294 <UART_ISR+0x110>)
 80061e0:	801a      	strh	r2, [r3, #0]
            LL_USART_ClearFlag_ORE(uart.uart_reg_base);
 80061e2:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <UART_ISR+0x10c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fe4b 	bl	8005e82 <LL_USART_ClearFlag_ORE>
        }
        if (status_reg & LL_USART_ISR_NE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d014      	beq.n	8006220 <UART_ISR+0x9c>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_NE]);
 80061f6:	4b27      	ldr	r3, [pc, #156]	; (8006294 <UART_ISR+0x110>)
 80061f8:	885a      	ldrh	r2, [r3, #2]
 80061fa:	4b26      	ldr	r3, [pc, #152]	; (8006294 <UART_ISR+0x110>)
 80061fc:	885b      	ldrh	r3, [r3, #2]
 80061fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006202:	428b      	cmp	r3, r1
 8006204:	bf14      	ite	ne
 8006206:	2301      	movne	r3, #1
 8006208:	2300      	moveq	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	b29b      	uxth	r3, r3
 800620e:	4413      	add	r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	4b20      	ldr	r3, [pc, #128]	; (8006294 <UART_ISR+0x110>)
 8006214:	805a      	strh	r2, [r3, #2]
            LL_USART_ClearFlag_NE(uart.uart_reg_base);
 8006216:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <UART_ISR+0x10c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fe24 	bl	8005e68 <LL_USART_ClearFlag_NE>
        }
        if (status_reg & LL_USART_ISR_FE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d014      	beq.n	8006254 <UART_ISR+0xd0>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_FE]);
 800622a:	4b1a      	ldr	r3, [pc, #104]	; (8006294 <UART_ISR+0x110>)
 800622c:	889a      	ldrh	r2, [r3, #4]
 800622e:	4b19      	ldr	r3, [pc, #100]	; (8006294 <UART_ISR+0x110>)
 8006230:	889b      	ldrh	r3, [r3, #4]
 8006232:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006236:	428b      	cmp	r3, r1
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	b29b      	uxth	r3, r3
 8006242:	4413      	add	r3, r2
 8006244:	b29a      	uxth	r2, r3
 8006246:	4b13      	ldr	r3, [pc, #76]	; (8006294 <UART_ISR+0x110>)
 8006248:	809a      	strh	r2, [r3, #4]
            LL_USART_ClearFlag_FE(uart.uart_reg_base);
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <UART_ISR+0x10c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fdfd 	bl	8005e4e <LL_USART_ClearFlag_FE>
        }
        if (status_reg & LL_USART_ISR_PE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d014      	beq.n	8006288 <UART_ISR+0x104>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_PE]);
 800625e:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <UART_ISR+0x110>)
 8006260:	88da      	ldrh	r2, [r3, #6]
 8006262:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <UART_ISR+0x110>)
 8006264:	88db      	ldrh	r3, [r3, #6]
 8006266:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800626a:	428b      	cmp	r3, r1
 800626c:	bf14      	ite	ne
 800626e:	2301      	movne	r3, #1
 8006270:	2300      	moveq	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	b29b      	uxth	r3, r3
 8006276:	4413      	add	r3, r2
 8006278:	b29a      	uxth	r2, r3
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <UART_ISR+0x110>)
 800627c:	80da      	strh	r2, [r3, #6]
            LL_USART_ClearFlag_PE(uart.uart_reg_base);
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <UART_ISR+0x10c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fdd6 	bl	8005e34 <LL_USART_ClearFlag_PE>
        }
    }
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000404 	.word	0x20000404
 8006294:	20000810 	.word	0x20000810

08006298 <read_rdr>:

/**
 * @brief Read character from receive data register (RDR) and send to console message queue.
 */
static inline void read_rdr(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
    char rx_char = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <read_rdr+0x4c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	71fb      	strb	r3, [r7, #7]
    mod_err_t err = console_post(rx_char);
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fb fe32 	bl	8001f14 <console_post>
 80062b0:	4603      	mov	r3, r0
 80062b2:	71bb      	strb	r3, [r7, #6]
    if (err == MOD_ERR_TIMEOUT)
 80062b4:	79bb      	ldrb	r3, [r7, #6]
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d10f      	bne.n	80062da <read_rdr+0x42>
    {
        INC_SAT_U16(uart_pms[CNT_RX_BUF_OVERRUN]);
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <read_rdr+0x50>)
 80062bc:	895a      	ldrh	r2, [r3, #10]
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <read_rdr+0x50>)
 80062c0:	895b      	ldrh	r3, [r3, #10]
 80062c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062c6:	428b      	cmp	r3, r1
 80062c8:	bf14      	ite	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	2300      	moveq	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <read_rdr+0x50>)
 80062d8:	815a      	strh	r2, [r3, #10]
    }
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000404 	.word	0x20000404
 80062e8:	20000810 	.word	0x20000810

080062ec <write_tdr>:

/**
 * @brief Write character from transmit buffer to transmit data register (TDR).
 */
static inline void write_tdr(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
    if (uart.tx_buf_get_idx == uart.tx_buf_put_idx)
 80062f0:	4b12      	ldr	r3, [pc, #72]	; (800633c <write_tdr+0x50>)
 80062f2:	88da      	ldrh	r2, [r3, #6]
 80062f4:	4b11      	ldr	r3, [pc, #68]	; (800633c <write_tdr+0x50>)
 80062f6:	891b      	ldrh	r3, [r3, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d105      	bne.n	8006308 <write_tdr+0x1c>
    {
        /* Nothing to transmit, disable TXE flag from generating an interrupt. */
        LL_USART_DisableIT_TXE(uart.uart_reg_base);
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <write_tdr+0x50>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff fdeb 	bl	8005edc <LL_USART_DisableIT_TXE>
    else
    {
        uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
        uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
    }
}
 8006306:	e016      	b.n	8006336 <write_tdr+0x4a>
        uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <write_tdr+0x50>)
 800630a:	88db      	ldrh	r3, [r3, #6]
 800630c:	461a      	mov	r2, r3
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <write_tdr+0x50>)
 8006310:	4413      	add	r3, r2
 8006312:	7a9a      	ldrb	r2, [r3, #10]
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <write_tdr+0x50>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	b292      	uxth	r2, r2
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28
        uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
 800631c:	4b07      	ldr	r3, [pc, #28]	; (800633c <write_tdr+0x50>)
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	3301      	adds	r3, #1
 8006322:	425a      	negs	r2, r3
 8006324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006328:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800632c:	bf58      	it	pl
 800632e:	4253      	negpl	r3, r2
 8006330:	b29a      	uxth	r2, r3
 8006332:	4b02      	ldr	r3, [pc, #8]	; (800633c <write_tdr+0x50>)
 8006334:	80da      	strh	r2, [r3, #6]
}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000404 	.word	0x20000404

08006340 <Reset_Handler>:
 8006340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006378 <LoopForever+0x2>
 8006344:	f7ff fca8 	bl	8005c98 <SystemInit>
 8006348:	2100      	movs	r1, #0
 800634a:	e003      	b.n	8006354 <LoopCopyDataInit>

0800634c <CopyDataInit>:
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <LoopForever+0x6>)
 800634e:	585b      	ldr	r3, [r3, r1]
 8006350:	5043      	str	r3, [r0, r1]
 8006352:	3104      	adds	r1, #4

08006354 <LoopCopyDataInit>:
 8006354:	480a      	ldr	r0, [pc, #40]	; (8006380 <LoopForever+0xa>)
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <LoopForever+0xe>)
 8006358:	1842      	adds	r2, r0, r1
 800635a:	429a      	cmp	r2, r3
 800635c:	d3f6      	bcc.n	800634c <CopyDataInit>
 800635e:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <LoopForever+0x12>)
 8006360:	e002      	b.n	8006368 <LoopFillZerobss>

08006362 <FillZerobss>:
 8006362:	2300      	movs	r3, #0
 8006364:	f842 3b04 	str.w	r3, [r2], #4

08006368 <LoopFillZerobss>:
 8006368:	4b08      	ldr	r3, [pc, #32]	; (800638c <LoopForever+0x16>)
 800636a:	429a      	cmp	r2, r3
 800636c:	d3f9      	bcc.n	8006362 <FillZerobss>
 800636e:	f007 ff9b 	bl	800e2a8 <__libc_init_array>
 8006372:	f7fc faf7 	bl	8002964 <main>

08006376 <LoopForever>:
 8006376:	e7fe      	b.n	8006376 <LoopForever>
 8006378:	20018000 	.word	0x20018000
 800637c:	0800fc64 	.word	0x0800fc64
 8006380:	20000000 	.word	0x20000000
 8006384:	20000200 	.word	0x20000200
 8006388:	20000200 	.word	0x20000200
 800638c:	20005128 	.word	0x20005128

08006390 <ADC1_2_IRQHandler>:
 8006390:	e7fe      	b.n	8006390 <ADC1_2_IRQHandler>
	...

08006394 <HAL_Init>:
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	2300      	movs	r3, #0
 800639c:	71fb      	strb	r3, [r7, #7]
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <HAL_Init+0x3c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a0b      	ldr	r2, [pc, #44]	; (80063d0 <HAL_Init+0x3c>)
 80063a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	2003      	movs	r0, #3
 80063ac:	f000 f8df 	bl	800656e <HAL_NVIC_SetPriorityGrouping>
 80063b0:	2000      	movs	r0, #0
 80063b2:	f7ff fbc5 	bl	8005b40 <HAL_InitTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_Init+0x2e>
 80063bc:	2301      	movs	r3, #1
 80063be:	71fb      	strb	r3, [r7, #7]
 80063c0:	e001      	b.n	80063c6 <HAL_Init+0x32>
 80063c2:	f7ff fadd 	bl	8005980 <HAL_MspInit>
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40022000 	.word	0x40022000

080063d4 <HAL_IncTick>:
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <HAL_IncTick+0x20>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_IncTick+0x24>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4413      	add	r3, r2
 80063e4:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <HAL_IncTick+0x24>)
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	bf00      	nop
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000194 	.word	0x20000194
 80063f8:	200050d4 	.word	0x200050d4

080063fc <HAL_GetTick>:
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_GetTick+0x14>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	200050d4 	.word	0x200050d4

08006414 <__NVIC_SetPriorityGrouping>:
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <__NVIC_SetPriorityGrouping+0x44>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006430:	4013      	ands	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	4a04      	ldr	r2, [pc, #16]	; (8006458 <__NVIC_SetPriorityGrouping+0x44>)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	60d3      	str	r3, [r2, #12]
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	e000ed00 	.word	0xe000ed00

0800645c <__NVIC_GetPriorityGrouping>:
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <__NVIC_GetPriorityGrouping+0x18>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	4618      	mov	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	e000ed00 	.word	0xe000ed00

08006478 <__NVIC_EnableIRQ>:
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	2b00      	cmp	r3, #0
 8006488:	db0b      	blt.n	80064a2 <__NVIC_EnableIRQ+0x2a>
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	f003 021f 	and.w	r2, r3, #31
 8006490:	4907      	ldr	r1, [pc, #28]	; (80064b0 <__NVIC_EnableIRQ+0x38>)
 8006492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	2001      	movs	r0, #1
 800649a:	fa00 f202 	lsl.w	r2, r0, r2
 800649e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	e000e100 	.word	0xe000e100

080064b4 <__NVIC_SetPriority>:
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	71fb      	strb	r3, [r7, #7]
 80064c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db0a      	blt.n	80064de <__NVIC_SetPriority+0x2a>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	490c      	ldr	r1, [pc, #48]	; (8006500 <__NVIC_SetPriority+0x4c>)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	0112      	lsls	r2, r2, #4
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	440b      	add	r3, r1
 80064d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80064dc:	e00a      	b.n	80064f4 <__NVIC_SetPriority+0x40>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4908      	ldr	r1, [pc, #32]	; (8006504 <__NVIC_SetPriority+0x50>)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	3b04      	subs	r3, #4
 80064ec:	0112      	lsls	r2, r2, #4
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	440b      	add	r3, r1
 80064f2:	761a      	strb	r2, [r3, #24]
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	e000e100 	.word	0xe000e100
 8006504:	e000ed00 	.word	0xe000ed00

08006508 <NVIC_EncodePriority>:
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f1c3 0307 	rsb	r3, r3, #7
 8006522:	2b04      	cmp	r3, #4
 8006524:	bf28      	it	cs
 8006526:	2304      	movcs	r3, #4
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	3304      	adds	r3, #4
 800652e:	2b06      	cmp	r3, #6
 8006530:	d902      	bls.n	8006538 <NVIC_EncodePriority+0x30>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3b03      	subs	r3, #3
 8006536:	e000      	b.n	800653a <NVIC_EncodePriority+0x32>
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	f04f 32ff 	mov.w	r2, #4294967295
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43da      	mvns	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	401a      	ands	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	409a      	lsls	r2, r3
 8006550:	f04f 31ff 	mov.w	r1, #4294967295
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa01 f303 	lsl.w	r3, r1, r3
 800655a:	43d9      	mvns	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	400b      	ands	r3, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	4618      	mov	r0, r3
 8006564:	3724      	adds	r7, #36	; 0x24
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_NVIC_SetPriorityGrouping>:
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff ff4c 	bl	8006414 <__NVIC_SetPriorityGrouping>
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_NVIC_SetPriority>:
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	f7ff ff61 	bl	800645c <__NVIC_GetPriorityGrouping>
 800659a:	6178      	str	r0, [r7, #20]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f7ff ffb1 	bl	8006508 <NVIC_EncodePriority>
 80065a6:	4602      	mov	r2, r0
 80065a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ac:	4611      	mov	r1, r2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff ff80 	bl	80064b4 <__NVIC_SetPriority>
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_NVIC_EnableIRQ>:
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ff54 	bl	8006478 <__NVIC_EnableIRQ>
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_GPIO_Init>:
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e17f      	b.n	80068e8 <HAL_GPIO_Init+0x310>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	2101      	movs	r1, #1
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	fa01 f303 	lsl.w	r3, r1, r3
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8171 	beq.w	80068e2 <HAL_GPIO_Init+0x30a>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d00b      	beq.n	8006620 <HAL_GPIO_Init+0x48>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d007      	beq.n	8006620 <HAL_GPIO_Init+0x48>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b11      	cmp	r3, #17
 8006616:	d003      	beq.n	8006620 <HAL_GPIO_Init+0x48>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b12      	cmp	r3, #18
 800661e:	d130      	bne.n	8006682 <HAL_GPIO_Init+0xaa>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	2203      	movs	r2, #3
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	43db      	mvns	r3, r3
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4013      	ands	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	2201      	movs	r2, #1
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	43db      	mvns	r3, r3
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4013      	ands	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	f003 0201 	and.w	r2, r3, #1
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	605a      	str	r2, [r3, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b03      	cmp	r3, #3
 800668c:	d118      	bne.n	80066c0 <HAL_GPIO_Init+0xe8>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	2201      	movs	r2, #1
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4013      	ands	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	f003 0201 	and.w	r2, r3, #1
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	62da      	str	r2, [r3, #44]	; 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	2203      	movs	r2, #3
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	43db      	mvns	r3, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4013      	ands	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	60da      	str	r2, [r3, #12]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x128>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b12      	cmp	r3, #18
 80066fe:	d123      	bne.n	8006748 <HAL_GPIO_Init+0x170>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	08da      	lsrs	r2, r3, #3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3208      	adds	r2, #8
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	220f      	movs	r2, #15
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	43db      	mvns	r3, r3
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4013      	ands	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	08da      	lsrs	r2, r3, #3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3208      	adds	r2, #8
 8006742:	6939      	ldr	r1, [r7, #16]
 8006744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	2203      	movs	r2, #3
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	43db      	mvns	r3, r3
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4013      	ands	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f003 0203 	and.w	r2, r3, #3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80ac 	beq.w	80068e2 <HAL_GPIO_Init+0x30a>
 800678a:	4b5f      	ldr	r3, [pc, #380]	; (8006908 <HAL_GPIO_Init+0x330>)
 800678c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678e:	4a5e      	ldr	r2, [pc, #376]	; (8006908 <HAL_GPIO_Init+0x330>)
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	6613      	str	r3, [r2, #96]	; 0x60
 8006796:	4b5c      	ldr	r3, [pc, #368]	; (8006908 <HAL_GPIO_Init+0x330>)
 8006798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4a5a      	ldr	r2, [pc, #360]	; (800690c <HAL_GPIO_Init+0x334>)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	089b      	lsrs	r3, r3, #2
 80067a8:	3302      	adds	r3, #2
 80067aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	220f      	movs	r2, #15
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4013      	ands	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80067cc:	d025      	beq.n	800681a <HAL_GPIO_Init+0x242>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a4f      	ldr	r2, [pc, #316]	; (8006910 <HAL_GPIO_Init+0x338>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01f      	beq.n	8006816 <HAL_GPIO_Init+0x23e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a4e      	ldr	r2, [pc, #312]	; (8006914 <HAL_GPIO_Init+0x33c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d019      	beq.n	8006812 <HAL_GPIO_Init+0x23a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a4d      	ldr	r2, [pc, #308]	; (8006918 <HAL_GPIO_Init+0x340>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <HAL_GPIO_Init+0x236>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a4c      	ldr	r2, [pc, #304]	; (800691c <HAL_GPIO_Init+0x344>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00d      	beq.n	800680a <HAL_GPIO_Init+0x232>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a4b      	ldr	r2, [pc, #300]	; (8006920 <HAL_GPIO_Init+0x348>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <HAL_GPIO_Init+0x22e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a4a      	ldr	r2, [pc, #296]	; (8006924 <HAL_GPIO_Init+0x34c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d101      	bne.n	8006802 <HAL_GPIO_Init+0x22a>
 80067fe:	2306      	movs	r3, #6
 8006800:	e00c      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006802:	2307      	movs	r3, #7
 8006804:	e00a      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006806:	2305      	movs	r3, #5
 8006808:	e008      	b.n	800681c <HAL_GPIO_Init+0x244>
 800680a:	2304      	movs	r3, #4
 800680c:	e006      	b.n	800681c <HAL_GPIO_Init+0x244>
 800680e:	2303      	movs	r3, #3
 8006810:	e004      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006812:	2302      	movs	r3, #2
 8006814:	e002      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <HAL_GPIO_Init+0x244>
 800681a:	2300      	movs	r3, #0
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	f002 0203 	and.w	r2, r2, #3
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	4093      	lsls	r3, r2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	4937      	ldr	r1, [pc, #220]	; (800690c <HAL_GPIO_Init+0x334>)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	3302      	adds	r3, #2
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800683a:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <HAL_GPIO_Init+0x350>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	43db      	mvns	r3, r3
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4013      	ands	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_GPIO_Init+0x286>
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	4a32      	ldr	r2, [pc, #200]	; (8006928 <HAL_GPIO_Init+0x350>)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	4b30      	ldr	r3, [pc, #192]	; (8006928 <HAL_GPIO_Init+0x350>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	43db      	mvns	r3, r3
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4013      	ands	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_GPIO_Init+0x2b0>
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	4a27      	ldr	r2, [pc, #156]	; (8006928 <HAL_GPIO_Init+0x350>)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6053      	str	r3, [r2, #4]
 800688e:	4b26      	ldr	r3, [pc, #152]	; (8006928 <HAL_GPIO_Init+0x350>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	43db      	mvns	r3, r3
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4013      	ands	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_GPIO_Init+0x2da>
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_GPIO_Init+0x350>)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	6093      	str	r3, [r2, #8]
 80068b8:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_GPIO_Init+0x350>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4013      	ands	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_GPIO_Init+0x304>
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	4a12      	ldr	r2, [pc, #72]	; (8006928 <HAL_GPIO_Init+0x350>)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	60d3      	str	r3, [r2, #12]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	3301      	adds	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	fa22 f303 	lsr.w	r3, r2, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f47f ae78 	bne.w	80065e8 <HAL_GPIO_Init+0x10>
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000
 800690c:	40010000 	.word	0x40010000
 8006910:	48000400 	.word	0x48000400
 8006914:	48000800 	.word	0x48000800
 8006918:	48000c00 	.word	0x48000c00
 800691c:	48001000 	.word	0x48001000
 8006920:	48001400 	.word	0x48001400
 8006924:	48001800 	.word	0x48001800
 8006928:	40010400 	.word	0x40010400

0800692c <HAL_GPIO_WritePin>:
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]
 8006938:	4613      	mov	r3, r2
 800693a:	707b      	strb	r3, [r7, #1]
 800693c:	787b      	ldrb	r3, [r7, #1]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_GPIO_WritePin+0x1e>
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	619a      	str	r2, [r3, #24]
 8006948:	e002      	b.n	8006950 <HAL_GPIO_WritePin+0x24>
 800694a:	887a      	ldrh	r2, [r7, #2]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	629a      	str	r2, [r3, #40]	; 0x28
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_PWREx_GetVoltageRange>:
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <HAL_PWREx_GetVoltageRange+0x18>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006968:	4618      	mov	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40007000 	.word	0x40007000

08006978 <HAL_PWREx_ControlVoltageScaling>:
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006986:	d130      	bne.n	80069ea <HAL_PWREx_ControlVoltageScaling+0x72>
 8006988:	4b23      	ldr	r3, [pc, #140]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006994:	d038      	beq.n	8006a08 <HAL_PWREx_ControlVoltageScaling+0x90>
 8006996:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800699e:	4a1e      	ldr	r2, [pc, #120]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2232      	movs	r2, #50	; 0x32
 80069ac:	fb02 f303 	mul.w	r3, r2, r3
 80069b0:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80069b2:	fba2 2303 	umull	r2, r3, r2, r3
 80069b6:	0c9b      	lsrs	r3, r3, #18
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	e002      	b.n	80069c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d0:	d102      	bne.n	80069d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f2      	bne.n	80069be <HAL_PWREx_ControlVoltageScaling+0x46>
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e4:	d110      	bne.n	8006a08 <HAL_PWREx_ControlVoltageScaling+0x90>
 80069e6:	2303      	movs	r3, #3
 80069e8:	e00f      	b.n	8006a0a <HAL_PWREx_ControlVoltageScaling+0x92>
 80069ea:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f6:	d007      	beq.n	8006a08 <HAL_PWREx_ControlVoltageScaling+0x90>
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a00:	4a05      	ldr	r2, [pc, #20]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40007000 	.word	0x40007000
 8006a1c:	20000158 	.word	0x20000158
 8006a20:	431bde83 	.word	0x431bde83

08006a24 <HAL_RCC_OscConfig>:
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_RCC_OscConfig+0x12>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e3d4      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006a36:	4ba1      	ldr	r3, [pc, #644]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 030c 	and.w	r3, r3, #12
 8006a3e:	61bb      	str	r3, [r7, #24]
 8006a40:	4b9e      	ldr	r3, [pc, #632]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80e4 	beq.w	8006c20 <HAL_RCC_OscConfig+0x1fc>
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_RCC_OscConfig+0x4a>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b0c      	cmp	r3, #12
 8006a62:	f040 808b 	bne.w	8006b7c <HAL_RCC_OscConfig+0x158>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f040 8087 	bne.w	8006b7c <HAL_RCC_OscConfig+0x158>
 8006a6e:	4b93      	ldr	r3, [pc, #588]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <HAL_RCC_OscConfig+0x62>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x62>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e3ac      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	4b8c      	ldr	r3, [pc, #560]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d004      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x7c>
 8006a96:	4b89      	ldr	r3, [pc, #548]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a9e:	e005      	b.n	8006aac <HAL_RCC_OscConfig+0x88>
 8006aa0:	4b86      	ldr	r3, [pc, #536]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d223      	bcs.n	8006af8 <HAL_RCC_OscConfig+0xd4>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fd5d 	bl	8007574 <RCC_SetFlashLatencyFromMSIRange>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_OscConfig+0xa0>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e38d      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006ac4:	4b7d      	ldr	r3, [pc, #500]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a7c      	ldr	r2, [pc, #496]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006aca:	f043 0308 	orr.w	r3, r3, #8
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	4b7a      	ldr	r3, [pc, #488]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	4977      	ldr	r1, [pc, #476]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	600b      	str	r3, [r1, #0]
 8006ae2:	4b76      	ldr	r3, [pc, #472]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	4972      	ldr	r1, [pc, #456]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	604b      	str	r3, [r1, #4]
 8006af6:	e025      	b.n	8006b44 <HAL_RCC_OscConfig+0x120>
 8006af8:	4b70      	ldr	r3, [pc, #448]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a6f      	ldr	r2, [pc, #444]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006afe:	f043 0308 	orr.w	r3, r3, #8
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	4b6d      	ldr	r3, [pc, #436]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	496a      	ldr	r1, [pc, #424]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]
 8006b16:	4b69      	ldr	r3, [pc, #420]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	4965      	ldr	r1, [pc, #404]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	604b      	str	r3, [r1, #4]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d109      	bne.n	8006b44 <HAL_RCC_OscConfig+0x120>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fd1d 	bl	8007574 <RCC_SetFlashLatencyFromMSIRange>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_RCC_OscConfig+0x120>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e34d      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006b44:	f000 fc36 	bl	80073b4 <HAL_RCC_GetSysClockFreq>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	4b5c      	ldr	r3, [pc, #368]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	495a      	ldr	r1, [pc, #360]	; (8006cc0 <HAL_RCC_OscConfig+0x29c>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b60:	4a58      	ldr	r2, [pc, #352]	; (8006cc4 <HAL_RCC_OscConfig+0x2a0>)
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	4b58      	ldr	r3, [pc, #352]	; (8006cc8 <HAL_RCC_OscConfig+0x2a4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fe ffe9 	bl	8005b40 <HAL_InitTick>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d052      	beq.n	8006c1e <HAL_RCC_OscConfig+0x1fa>
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	e331      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d032      	beq.n	8006bea <HAL_RCC_OscConfig+0x1c6>
 8006b84:	4b4d      	ldr	r3, [pc, #308]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a4c      	ldr	r2, [pc, #304]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	f7ff fc34 	bl	80063fc <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x186>
 8006b98:	f7ff fc30 	bl	80063fc <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x186>
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e31a      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006baa:	4b44      	ldr	r3, [pc, #272]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0x174>
 8006bb6:	4b41      	ldr	r3, [pc, #260]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a40      	ldr	r2, [pc, #256]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bbc:	f043 0308 	orr.w	r3, r3, #8
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b3e      	ldr	r3, [pc, #248]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	493b      	ldr	r1, [pc, #236]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]
 8006bd4:	4b39      	ldr	r3, [pc, #228]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	4936      	ldr	r1, [pc, #216]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	604b      	str	r3, [r1, #4]
 8006be8:	e01a      	b.n	8006c20 <HAL_RCC_OscConfig+0x1fc>
 8006bea:	4b34      	ldr	r3, [pc, #208]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a33      	ldr	r2, [pc, #204]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	f7ff fc01 	bl	80063fc <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x1ec>
 8006bfe:	f7ff fbfd 	bl	80063fc <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x1ec>
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e2e7      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006c10:	4b2a      	ldr	r3, [pc, #168]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f0      	bne.n	8006bfe <HAL_RCC_OscConfig+0x1da>
 8006c1c:	e000      	b.n	8006c20 <HAL_RCC_OscConfig+0x1fc>
 8006c1e:	bf00      	nop
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d074      	beq.n	8006d16 <HAL_RCC_OscConfig+0x2f2>
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d005      	beq.n	8006c3e <HAL_RCC_OscConfig+0x21a>
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b0c      	cmp	r3, #12
 8006c36:	d10e      	bne.n	8006c56 <HAL_RCC_OscConfig+0x232>
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d10b      	bne.n	8006c56 <HAL_RCC_OscConfig+0x232>
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d064      	beq.n	8006d14 <HAL_RCC_OscConfig+0x2f0>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d160      	bne.n	8006d14 <HAL_RCC_OscConfig+0x2f0>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e2c4      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x24a>
 8006c60:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	e01d      	b.n	8006caa <HAL_RCC_OscConfig+0x286>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c76:	d10c      	bne.n	8006c92 <HAL_RCC_OscConfig+0x26e>
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a0f      	ldr	r2, [pc, #60]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a0c      	ldr	r2, [pc, #48]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e00b      	b.n	8006caa <HAL_RCC_OscConfig+0x286>
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4b07      	ldr	r3, [pc, #28]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a06      	ldr	r2, [pc, #24]	; (8006cbc <HAL_RCC_OscConfig+0x298>)
 8006ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01c      	beq.n	8006cec <HAL_RCC_OscConfig+0x2c8>
 8006cb2:	f7ff fba3 	bl	80063fc <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]
 8006cb8:	e011      	b.n	8006cde <HAL_RCC_OscConfig+0x2ba>
 8006cba:	bf00      	nop
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	0800fb08 	.word	0x0800fb08
 8006cc4:	20000158 	.word	0x20000158
 8006cc8:	20000190 	.word	0x20000190
 8006ccc:	f7ff fb96 	bl	80063fc <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b64      	cmp	r3, #100	; 0x64
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x2ba>
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e280      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006cde:	4baf      	ldr	r3, [pc, #700]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x2a8>
 8006cea:	e014      	b.n	8006d16 <HAL_RCC_OscConfig+0x2f2>
 8006cec:	f7ff fb86 	bl	80063fc <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x2e2>
 8006cf4:	f7ff fb82 	bl	80063fc <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b64      	cmp	r3, #100	; 0x64
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x2e2>
 8006d02:	2303      	movs	r3, #3
 8006d04:	e26c      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006d06:	4ba5      	ldr	r3, [pc, #660]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f0      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x2d0>
 8006d12:	e000      	b.n	8006d16 <HAL_RCC_OscConfig+0x2f2>
 8006d14:	bf00      	nop
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d060      	beq.n	8006de4 <HAL_RCC_OscConfig+0x3c0>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d005      	beq.n	8006d34 <HAL_RCC_OscConfig+0x310>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b0c      	cmp	r3, #12
 8006d2c:	d119      	bne.n	8006d62 <HAL_RCC_OscConfig+0x33e>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d116      	bne.n	8006d62 <HAL_RCC_OscConfig+0x33e>
 8006d34:	4b99      	ldr	r3, [pc, #612]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_RCC_OscConfig+0x328>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_RCC_OscConfig+0x328>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e249      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006d4c:	4b93      	ldr	r3, [pc, #588]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	061b      	lsls	r3, r3, #24
 8006d5a:	4990      	ldr	r1, [pc, #576]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	604b      	str	r3, [r1, #4]
 8006d60:	e040      	b.n	8006de4 <HAL_RCC_OscConfig+0x3c0>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d023      	beq.n	8006db2 <HAL_RCC_OscConfig+0x38e>
 8006d6a:	4b8c      	ldr	r3, [pc, #560]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a8b      	ldr	r2, [pc, #556]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	f7ff fb41 	bl	80063fc <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]
 8006d7c:	e008      	b.n	8006d90 <HAL_RCC_OscConfig+0x36c>
 8006d7e:	f7ff fb3d 	bl	80063fc <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x36c>
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e227      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006d90:	4b82      	ldr	r3, [pc, #520]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f0      	beq.n	8006d7e <HAL_RCC_OscConfig+0x35a>
 8006d9c:	4b7f      	ldr	r3, [pc, #508]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	497c      	ldr	r1, [pc, #496]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	604b      	str	r3, [r1, #4]
 8006db0:	e018      	b.n	8006de4 <HAL_RCC_OscConfig+0x3c0>
 8006db2:	4b7a      	ldr	r3, [pc, #488]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a79      	ldr	r2, [pc, #484]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	f7ff fb1d 	bl	80063fc <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3b4>
 8006dc6:	f7ff fb19 	bl	80063fc <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x3b4>
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e203      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006dd8:	4b70      	ldr	r3, [pc, #448]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f0      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x3a2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d03c      	beq.n	8006e6a <HAL_RCC_OscConfig+0x446>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01c      	beq.n	8006e32 <HAL_RCC_OscConfig+0x40e>
 8006df8:	4b68      	ldr	r3, [pc, #416]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfe:	4a67      	ldr	r2, [pc, #412]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006e08:	f7ff faf8 	bl	80063fc <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x3fe>
 8006e10:	f7ff faf4 	bl	80063fc <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x3fe>
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e1de      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006e22:	4b5e      	ldr	r3, [pc, #376]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0ef      	beq.n	8006e10 <HAL_RCC_OscConfig+0x3ec>
 8006e30:	e01b      	b.n	8006e6a <HAL_RCC_OscConfig+0x446>
 8006e32:	4b5a      	ldr	r3, [pc, #360]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e38:	4a58      	ldr	r2, [pc, #352]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006e42:	f7ff fadb 	bl	80063fc <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x438>
 8006e4a:	f7ff fad7 	bl	80063fc <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x438>
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e1c1      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006e5c:	4b4f      	ldr	r3, [pc, #316]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1ef      	bne.n	8006e4a <HAL_RCC_OscConfig+0x426>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80a6 	beq.w	8006fc4 <HAL_RCC_OscConfig+0x5a0>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	4b47      	ldr	r3, [pc, #284]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x480>
 8006e88:	4b44      	ldr	r3, [pc, #272]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8c:	4a43      	ldr	r2, [pc, #268]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e92:	6593      	str	r3, [r2, #88]	; 0x58
 8006e94:	4b41      	ldr	r3, [pc, #260]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	77fb      	strb	r3, [r7, #31]
 8006ea4:	4b3e      	ldr	r3, [pc, #248]	; (8006fa0 <HAL_RCC_OscConfig+0x57c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d118      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x4be>
 8006eb0:	4b3b      	ldr	r3, [pc, #236]	; (8006fa0 <HAL_RCC_OscConfig+0x57c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a3a      	ldr	r2, [pc, #232]	; (8006fa0 <HAL_RCC_OscConfig+0x57c>)
 8006eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	f7ff fa9e 	bl	80063fc <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x4b2>
 8006ec4:	f7ff fa9a 	bl	80063fc <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x4b2>
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e184      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006ed6:	4b32      	ldr	r3, [pc, #200]	; (8006fa0 <HAL_RCC_OscConfig+0x57c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x4a0>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d108      	bne.n	8006efc <HAL_RCC_OscConfig+0x4d8>
 8006eea:	4b2c      	ldr	r3, [pc, #176]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006efa:	e024      	b.n	8006f46 <HAL_RCC_OscConfig+0x522>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d110      	bne.n	8006f26 <HAL_RCC_OscConfig+0x502>
 8006f04:	4b25      	ldr	r3, [pc, #148]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0a:	4a24      	ldr	r2, [pc, #144]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f0c:	f043 0304 	orr.w	r3, r3, #4
 8006f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f14:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1a:	4a20      	ldr	r2, [pc, #128]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f24:	e00f      	b.n	8006f46 <HAL_RCC_OscConfig+0x522>
 8006f26:	4b1d      	ldr	r3, [pc, #116]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f36:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3c:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f3e:	f023 0304 	bic.w	r3, r3, #4
 8006f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_RCC_OscConfig+0x558>
 8006f4e:	f7ff fa55 	bl	80063fc <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]
 8006f54:	e00a      	b.n	8006f6c <HAL_RCC_OscConfig+0x548>
 8006f56:	f7ff fa51 	bl	80063fc <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x548>
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e139      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <HAL_RCC_OscConfig+0x578>)
 8006f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0ed      	beq.n	8006f56 <HAL_RCC_OscConfig+0x532>
 8006f7a:	e01a      	b.n	8006fb2 <HAL_RCC_OscConfig+0x58e>
 8006f7c:	f7ff fa3e 	bl	80063fc <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]
 8006f82:	e00f      	b.n	8006fa4 <HAL_RCC_OscConfig+0x580>
 8006f84:	f7ff fa3a 	bl	80063fc <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d906      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x580>
 8006f96:	2303      	movs	r3, #3
 8006f98:	e122      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8006f9a:	bf00      	nop
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	40007000 	.word	0x40007000
 8006fa4:	4b90      	ldr	r3, [pc, #576]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e8      	bne.n	8006f84 <HAL_RCC_OscConfig+0x560>
 8006fb2:	7ffb      	ldrb	r3, [r7, #31]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x5a0>
 8006fb8:	4b8b      	ldr	r3, [pc, #556]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8006fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbc:	4a8a      	ldr	r2, [pc, #552]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8006fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8108 	beq.w	80071de <HAL_RCC_OscConfig+0x7ba>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	f040 80d0 	bne.w	8007178 <HAL_RCC_OscConfig+0x754>
 8006fd8:	4b83      	ldr	r3, [pc, #524]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f003 0203 	and.w	r2, r3, #3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d130      	bne.n	800704e <HAL_RCC_OscConfig+0x62a>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d127      	bne.n	800704e <HAL_RCC_OscConfig+0x62a>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	429a      	cmp	r2, r3
 800700c:	d11f      	bne.n	800704e <HAL_RCC_OscConfig+0x62a>
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007018:	2a07      	cmp	r2, #7
 800701a:	bf14      	ite	ne
 800701c:	2201      	movne	r2, #1
 800701e:	2200      	moveq	r2, #0
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	4293      	cmp	r3, r2
 8007024:	d113      	bne.n	800704e <HAL_RCC_OscConfig+0x62a>
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	3b01      	subs	r3, #1
 8007034:	055b      	lsls	r3, r3, #21
 8007036:	429a      	cmp	r2, r3
 8007038:	d109      	bne.n	800704e <HAL_RCC_OscConfig+0x62a>
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	3b01      	subs	r3, #1
 8007048:	065b      	lsls	r3, r3, #25
 800704a:	429a      	cmp	r2, r3
 800704c:	d06e      	beq.n	800712c <HAL_RCC_OscConfig+0x708>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b0c      	cmp	r3, #12
 8007052:	d069      	beq.n	8007128 <HAL_RCC_OscConfig+0x704>
 8007054:	4b64      	ldr	r3, [pc, #400]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d105      	bne.n	800706c <HAL_RCC_OscConfig+0x648>
 8007060:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_RCC_OscConfig+0x64c>
 800706c:	2301      	movs	r3, #1
 800706e:	e0b7      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8007070:	4b5d      	ldr	r3, [pc, #372]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a5c      	ldr	r2, [pc, #368]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	f7ff f9be 	bl	80063fc <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x672>
 8007084:	f7ff f9ba 	bl	80063fc <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x672>
 8007092:	2303      	movs	r3, #3
 8007094:	e0a4      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 8007096:	4b54      	ldr	r3, [pc, #336]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f0      	bne.n	8007084 <HAL_RCC_OscConfig+0x660>
 80070a2:	4b51      	ldr	r3, [pc, #324]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	4b51      	ldr	r3, [pc, #324]	; (80071ec <HAL_RCC_OscConfig+0x7c8>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070b2:	3a01      	subs	r2, #1
 80070b4:	0112      	lsls	r2, r2, #4
 80070b6:	4311      	orrs	r1, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070bc:	0212      	lsls	r2, r2, #8
 80070be:	4311      	orrs	r1, r2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070c4:	0852      	lsrs	r2, r2, #1
 80070c6:	3a01      	subs	r2, #1
 80070c8:	0552      	lsls	r2, r2, #21
 80070ca:	4311      	orrs	r1, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070d0:	0852      	lsrs	r2, r2, #1
 80070d2:	3a01      	subs	r2, #1
 80070d4:	0652      	lsls	r2, r2, #25
 80070d6:	4311      	orrs	r1, r2
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070dc:	0912      	lsrs	r2, r2, #4
 80070de:	0452      	lsls	r2, r2, #17
 80070e0:	430a      	orrs	r2, r1
 80070e2:	4941      	ldr	r1, [pc, #260]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60cb      	str	r3, [r1, #12]
 80070e8:	4b3f      	ldr	r3, [pc, #252]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a3e      	ldr	r2, [pc, #248]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80070ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	4b3c      	ldr	r3, [pc, #240]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4a3b      	ldr	r2, [pc, #236]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80070fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070fe:	60d3      	str	r3, [r2, #12]
 8007100:	f7ff f97c 	bl	80063fc <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x6f6>
 8007108:	f7ff f978 	bl	80063fc <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x6f6>
 8007116:	2303      	movs	r3, #3
 8007118:	e062      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 800711a:	4b33      	ldr	r3, [pc, #204]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x6e4>
 8007126:	e05a      	b.n	80071de <HAL_RCC_OscConfig+0x7ba>
 8007128:	2301      	movs	r3, #1
 800712a:	e059      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 800712c:	4b2e      	ldr	r3, [pc, #184]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d152      	bne.n	80071de <HAL_RCC_OscConfig+0x7ba>
 8007138:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800713e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	4b28      	ldr	r3, [pc, #160]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a27      	ldr	r2, [pc, #156]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800714a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800714e:	60d3      	str	r3, [r2, #12]
 8007150:	f7ff f954 	bl	80063fc <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x746>
 8007158:	f7ff f950 	bl	80063fc <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x746>
 8007166:	2303      	movs	r3, #3
 8007168:	e03a      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 800716a:	4b1f      	ldr	r3, [pc, #124]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0x734>
 8007176:	e032      	b.n	80071de <HAL_RCC_OscConfig+0x7ba>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	2b0c      	cmp	r3, #12
 800717c:	d02d      	beq.n	80071da <HAL_RCC_OscConfig+0x7b6>
 800717e:	4b1a      	ldr	r3, [pc, #104]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a19      	ldr	r2, [pc, #100]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <HAL_RCC_OscConfig+0x77e>
 8007196:	4b14      	ldr	r3, [pc, #80]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 800719c:	f023 0303 	bic.w	r3, r3, #3
 80071a0:	60d3      	str	r3, [r2, #12]
 80071a2:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80071a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80071ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b0:	60d3      	str	r3, [r2, #12]
 80071b2:	f7ff f923 	bl	80063fc <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x7a8>
 80071ba:	f7ff f91f 	bl	80063fc <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x7a8>
 80071c8:	2303      	movs	r3, #3
 80071ca:	e009      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <HAL_RCC_OscConfig+0x7c4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f0      	bne.n	80071ba <HAL_RCC_OscConfig+0x796>
 80071d8:	e001      	b.n	80071de <HAL_RCC_OscConfig+0x7ba>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <HAL_RCC_OscConfig+0x7bc>
 80071de:	2300      	movs	r3, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40021000 	.word	0x40021000
 80071ec:	f99d808c 	.word	0xf99d808c

080071f0 <HAL_RCC_ClockConfig>:
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <HAL_RCC_ClockConfig+0x14>
 8007200:	2301      	movs	r3, #1
 8007202:	e0c8      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 8007204:	4b66      	ldr	r3, [pc, #408]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d910      	bls.n	8007234 <HAL_RCC_ClockConfig+0x44>
 8007212:	4b63      	ldr	r3, [pc, #396]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 0207 	bic.w	r2, r3, #7
 800721a:	4961      	ldr	r1, [pc, #388]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4313      	orrs	r3, r2
 8007220:	600b      	str	r3, [r1, #0]
 8007222:	4b5f      	ldr	r3, [pc, #380]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d001      	beq.n	8007234 <HAL_RCC_ClockConfig+0x44>
 8007230:	2301      	movs	r3, #1
 8007232:	e0b0      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d04c      	beq.n	80072da <HAL_RCC_ClockConfig+0xea>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b03      	cmp	r3, #3
 8007246:	d107      	bne.n	8007258 <HAL_RCC_ClockConfig+0x68>
 8007248:	4b56      	ldr	r3, [pc, #344]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d121      	bne.n	8007298 <HAL_RCC_ClockConfig+0xa8>
 8007254:	2301      	movs	r3, #1
 8007256:	e09e      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d107      	bne.n	8007270 <HAL_RCC_ClockConfig+0x80>
 8007260:	4b50      	ldr	r3, [pc, #320]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d115      	bne.n	8007298 <HAL_RCC_ClockConfig+0xa8>
 800726c:	2301      	movs	r3, #1
 800726e:	e092      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d107      	bne.n	8007288 <HAL_RCC_ClockConfig+0x98>
 8007278:	4b4a      	ldr	r3, [pc, #296]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d109      	bne.n	8007298 <HAL_RCC_ClockConfig+0xa8>
 8007284:	2301      	movs	r3, #1
 8007286:	e086      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 8007288:	4b46      	ldr	r3, [pc, #280]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_RCC_ClockConfig+0xa8>
 8007294:	2301      	movs	r3, #1
 8007296:	e07e      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 8007298:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f023 0203 	bic.w	r2, r3, #3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	493f      	ldr	r1, [pc, #252]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	608b      	str	r3, [r1, #8]
 80072aa:	f7ff f8a7 	bl	80063fc <HAL_GetTick>
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	e00a      	b.n	80072c8 <HAL_RCC_ClockConfig+0xd8>
 80072b2:	f7ff f8a3 	bl	80063fc <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_ClockConfig+0xd8>
 80072c4:	2303      	movs	r3, #3
 80072c6:	e066      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 80072c8:	4b36      	ldr	r3, [pc, #216]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 020c 	and.w	r2, r3, #12
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d1eb      	bne.n	80072b2 <HAL_RCC_ClockConfig+0xc2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x108>
 80072e6:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	492c      	ldr	r1, [pc, #176]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	608b      	str	r3, [r1, #8]
 80072f8:	4b29      	ldr	r3, [pc, #164]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d210      	bcs.n	8007328 <HAL_RCC_ClockConfig+0x138>
 8007306:	4b26      	ldr	r3, [pc, #152]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 0207 	bic.w	r2, r3, #7
 800730e:	4924      	ldr	r1, [pc, #144]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]
 8007316:	4b22      	ldr	r3, [pc, #136]	; (80073a0 <HAL_RCC_ClockConfig+0x1b0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x138>
 8007324:	2301      	movs	r3, #1
 8007326:	e036      	b.n	8007396 <HAL_RCC_ClockConfig+0x1a6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_RCC_ClockConfig+0x156>
 8007334:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4918      	ldr	r1, [pc, #96]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 8007342:	4313      	orrs	r3, r2
 8007344:	608b      	str	r3, [r1, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_RCC_ClockConfig+0x176>
 8007352:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4910      	ldr	r1, [pc, #64]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 8007362:	4313      	orrs	r3, r2
 8007364:	608b      	str	r3, [r1, #8]
 8007366:	f000 f825 	bl	80073b4 <HAL_RCC_GetSysClockFreq>
 800736a:	4602      	mov	r2, r0
 800736c:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <HAL_RCC_ClockConfig+0x1b4>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	091b      	lsrs	r3, r3, #4
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	490c      	ldr	r1, [pc, #48]	; (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007378:	5ccb      	ldrb	r3, [r1, r3]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	fa22 f303 	lsr.w	r3, r2, r3
 8007382:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fbd8 	bl	8005b40 <HAL_InitTick>
 8007390:	4603      	mov	r3, r0
 8007392:	72fb      	strb	r3, [r7, #11]
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40022000 	.word	0x40022000
 80073a4:	40021000 	.word	0x40021000
 80073a8:	0800fb08 	.word	0x0800fb08
 80073ac:	20000158 	.word	0x20000158
 80073b0:	20000190 	.word	0x20000190

080073b4 <HAL_RCC_GetSysClockFreq>:
 80073b4:	b480      	push	{r7}
 80073b6:	b089      	sub	sp, #36	; 0x24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
 80073be:	2300      	movs	r3, #0
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	4b3e      	ldr	r3, [pc, #248]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	4b3b      	ldr	r3, [pc, #236]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <HAL_RCC_GetSysClockFreq+0x34>
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d121      	bne.n	8007426 <HAL_RCC_GetSysClockFreq+0x72>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d11e      	bne.n	8007426 <HAL_RCC_GetSysClockFreq+0x72>
 80073e8:	4b34      	ldr	r3, [pc, #208]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d107      	bne.n	8007404 <HAL_RCC_GetSysClockFreq+0x50>
 80073f4:	4b31      	ldr	r3, [pc, #196]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 80073f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	61fb      	str	r3, [r7, #28]
 8007402:	e005      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x5c>
 8007404:	4b2d      	ldr	r3, [pc, #180]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	091b      	lsrs	r3, r3, #4
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	61fb      	str	r3, [r7, #28]
 8007410:	4a2b      	ldr	r2, [pc, #172]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <HAL_RCC_GetSysClockFreq+0x88>
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	e00a      	b.n	800743c <HAL_RCC_GetSysClockFreq+0x88>
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b04      	cmp	r3, #4
 800742a:	d102      	bne.n	8007432 <HAL_RCC_GetSysClockFreq+0x7e>
 800742c:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e004      	b.n	800743c <HAL_RCC_GetSysClockFreq+0x88>
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b08      	cmp	r3, #8
 8007436:	d101      	bne.n	800743c <HAL_RCC_GetSysClockFreq+0x88>
 8007438:	4b23      	ldr	r3, [pc, #140]	; (80074c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b0c      	cmp	r3, #12
 8007440:	d134      	bne.n	80074ac <HAL_RCC_GetSysClockFreq+0xf8>
 8007442:	4b1e      	ldr	r3, [pc, #120]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	60bb      	str	r3, [r7, #8]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d003      	beq.n	800745a <HAL_RCC_GetSysClockFreq+0xa6>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d003      	beq.n	8007460 <HAL_RCC_GetSysClockFreq+0xac>
 8007458:	e005      	b.n	8007466 <HAL_RCC_GetSysClockFreq+0xb2>
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	e005      	b.n	800746c <HAL_RCC_GetSysClockFreq+0xb8>
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e002      	b.n	800746c <HAL_RCC_GetSysClockFreq+0xb8>
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	bf00      	nop
 800746c:	4b13      	ldr	r3, [pc, #76]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	091b      	lsrs	r3, r3, #4
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	3301      	adds	r3, #1
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	4b10      	ldr	r3, [pc, #64]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	fb02 f203 	mul.w	r2, r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	0e5b      	lsrs	r3, r3, #25
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	3301      	adds	r3, #1
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	603b      	str	r3, [r7, #0]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	4618      	mov	r0, r3
 80074b0:	3724      	adds	r7, #36	; 0x24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40021000 	.word	0x40021000
 80074c0:	0800fb20 	.word	0x0800fb20
 80074c4:	00f42400 	.word	0x00f42400
 80074c8:	007a1200 	.word	0x007a1200

080074cc <HAL_RCC_GetHCLKFreq>:
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000158 	.word	0x20000158

080074e4 <HAL_RCC_GetPCLK1Freq>:
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	f7ff fff0 	bl	80074cc <HAL_RCC_GetHCLKFreq>
 80074ec:	4602      	mov	r2, r0
 80074ee:	4b06      	ldr	r3, [pc, #24]	; (8007508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	0a1b      	lsrs	r3, r3, #8
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	4904      	ldr	r1, [pc, #16]	; (800750c <HAL_RCC_GetPCLK1Freq+0x28>)
 80074fa:	5ccb      	ldrb	r3, [r1, r3]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
 8007504:	4618      	mov	r0, r3
 8007506:	bd80      	pop	{r7, pc}
 8007508:	40021000 	.word	0x40021000
 800750c:	0800fb18 	.word	0x0800fb18

08007510 <HAL_RCC_GetClockConfig>:
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	220f      	movs	r2, #15
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	4b12      	ldr	r3, [pc, #72]	; (800756c <HAL_RCC_GetClockConfig+0x5c>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 0203 	and.w	r2, r3, #3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <HAL_RCC_GetClockConfig+0x5c>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <HAL_RCC_GetClockConfig+0x5c>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	4b09      	ldr	r3, [pc, #36]	; (800756c <HAL_RCC_GetClockConfig+0x5c>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	08db      	lsrs	r3, r3, #3
 800754a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	611a      	str	r2, [r3, #16]
 8007552:	4b07      	ldr	r3, [pc, #28]	; (8007570 <HAL_RCC_GetClockConfig+0x60>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0207 	and.w	r2, r3, #7
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40021000 	.word	0x40021000
 8007570:	40022000 	.word	0x40022000

08007574 <RCC_SetFlashLatencyFromMSIRange>:
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	4b2a      	ldr	r3, [pc, #168]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <RCC_SetFlashLatencyFromMSIRange+0x20>
 800758c:	f7ff f9e6 	bl	800695c <HAL_PWREx_GetVoltageRange>
 8007590:	6178      	str	r0, [r7, #20]
 8007592:	e014      	b.n	80075be <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8007594:	4b25      	ldr	r3, [pc, #148]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007598:	4a24      	ldr	r2, [pc, #144]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800759a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759e:	6593      	str	r3, [r2, #88]	; 0x58
 80075a0:	4b22      	ldr	r3, [pc, #136]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f7ff f9d6 	bl	800695c <HAL_PWREx_GetVoltageRange>
 80075b0:	6178      	str	r0, [r7, #20]
 80075b2:	4b1e      	ldr	r3, [pc, #120]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	4a1d      	ldr	r2, [pc, #116]	; (800762c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075bc:	6593      	str	r3, [r2, #88]	; 0x58
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c4:	d10b      	bne.n	80075de <RCC_SetFlashLatencyFromMSIRange+0x6a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d919      	bls.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2ba0      	cmp	r3, #160	; 0xa0
 80075d0:	d902      	bls.n	80075d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
 80075d2:	2302      	movs	r3, #2
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e013      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80075d8:	2301      	movs	r3, #1
 80075da:	613b      	str	r3, [r7, #16]
 80075dc:	e010      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d902      	bls.n	80075ea <RCC_SetFlashLatencyFromMSIRange+0x76>
 80075e4:	2303      	movs	r3, #3
 80075e6:	613b      	str	r3, [r7, #16]
 80075e8:	e00a      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d102      	bne.n	80075f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
 80075f0:	2302      	movs	r3, #2
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	e004      	b.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b70      	cmp	r3, #112	; 0x70
 80075fa:	d101      	bne.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80075fc:	2301      	movs	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f023 0207 	bic.w	r2, r3, #7
 8007608:	4909      	ldr	r1, [pc, #36]	; (8007630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	600b      	str	r3, [r1, #0]
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	429a      	cmp	r2, r3
 800761c:	d001      	beq.n	8007622 <RCC_SetFlashLatencyFromMSIRange+0xae>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8007622:	2300      	movs	r3, #0
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40021000 	.word	0x40021000
 8007630:	40022000 	.word	0x40022000

08007634 <HAL_RCCEx_PeriphCLKConfig>:
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	2300      	movs	r3, #0
 800763e:	74fb      	strb	r3, [r7, #19]
 8007640:	2300      	movs	r3, #0
 8007642:	74bb      	strb	r3, [r7, #18]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800764c:	2b00      	cmp	r3, #0
 800764e:	d041      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007654:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007658:	d02a      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800765a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800765e:	d824      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007664:	d008      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007666:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800766a:	d81e      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007674:	d010      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007676:	e018      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007678:	4b86      	ldr	r3, [pc, #536]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4a85      	ldr	r2, [pc, #532]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800767e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007682:	60d3      	str	r3, [r2, #12]
 8007684:	e015      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3304      	adds	r3, #4
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fabb 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	74fb      	strb	r3, [r7, #19]
 8007696:	e00c      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3320      	adds	r3, #32
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fba6 	bl	8007df0 <RCCEx_PLLSAI2_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	74fb      	strb	r3, [r7, #19]
 80076a8:	e003      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80076aa:	2301      	movs	r3, #1
 80076ac:	74fb      	strb	r3, [r7, #19]
 80076ae:	e000      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80076b0:	bf00      	nop
 80076b2:	7cfb      	ldrb	r3, [r7, #19]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80076b8:	4b76      	ldr	r3, [pc, #472]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c6:	4973      	ldr	r1, [pc, #460]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076ce:	e001      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80076d0:	7cfb      	ldrb	r3, [r7, #19]
 80076d2:	74bb      	strb	r3, [r7, #18]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d041      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076e8:	d02a      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80076ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076ee:	d824      	bhi.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80076f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076f4:	d008      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80076f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076fa:	d81e      	bhi.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007704:	d010      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007706:	e018      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007708:	4b62      	ldr	r3, [pc, #392]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4a61      	ldr	r2, [pc, #388]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800770e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007712:	60d3      	str	r3, [r2, #12]
 8007714:	e015      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3304      	adds	r3, #4
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fa73 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	74fb      	strb	r3, [r7, #19]
 8007726:	e00c      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3320      	adds	r3, #32
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fb5e 	bl	8007df0 <RCCEx_PLLSAI2_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	74fb      	strb	r3, [r7, #19]
 8007738:	e003      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800773a:	2301      	movs	r3, #1
 800773c:	74fb      	strb	r3, [r7, #19]
 800773e:	e000      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007740:	bf00      	nop
 8007742:	7cfb      	ldrb	r3, [r7, #19]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10b      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8007748:	4b52      	ldr	r3, [pc, #328]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007756:	494f      	ldr	r1, [pc, #316]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007758:	4313      	orrs	r3, r2
 800775a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800775e:	e001      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8007760:	7cfb      	ldrb	r3, [r7, #19]
 8007762:	74bb      	strb	r3, [r7, #18]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80a0 	beq.w	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007772:	2300      	movs	r3, #0
 8007774:	747b      	strb	r3, [r7, #17]
 8007776:	4b47      	ldr	r3, [pc, #284]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00d      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800778c:	4b41      	ldr	r3, [pc, #260]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800778e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007790:	4a40      	ldr	r2, [pc, #256]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007796:	6593      	str	r3, [r2, #88]	; 0x58
 8007798:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800779a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2301      	movs	r3, #1
 80077a6:	747b      	strb	r3, [r7, #17]
 80077a8:	4b3b      	ldr	r3, [pc, #236]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a3a      	ldr	r2, [pc, #232]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	f7fe fe22 	bl	80063fc <HAL_GetTick>
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	e009      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80077bc:	f7fe fe1e 	bl	80063fc <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d902      	bls.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80077ca:	2303      	movs	r3, #3
 80077cc:	74fb      	strb	r3, [r7, #19]
 80077ce:	e005      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80077d0:	4b31      	ldr	r3, [pc, #196]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0ef      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x188>
 80077dc:	7cfb      	ldrb	r3, [r7, #19]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d15c      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x268>
 80077e2:	4b2c      	ldr	r3, [pc, #176]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01f      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d019      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007800:	4b24      	ldr	r3, [pc, #144]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	4b21      	ldr	r3, [pc, #132]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800780e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007812:	4a20      	ldr	r2, [pc, #128]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800781c:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007822:	4a1c      	ldr	r2, [pc, #112]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800782c:	4a19      	ldr	r2, [pc, #100]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d016      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800783e:	f7fe fddd 	bl	80063fc <HAL_GetTick>
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	e00b      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007846:	f7fe fdd9 	bl	80063fc <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f241 3288 	movw	r2, #5000	; 0x1388
 8007854:	4293      	cmp	r3, r2
 8007856:	d902      	bls.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007858:	2303      	movs	r3, #3
 800785a:	74fb      	strb	r3, [r7, #19]
 800785c:	e006      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0ec      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800786c:	7cfb      	ldrb	r3, [r7, #19]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10c      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007882:	4904      	ldr	r1, [pc, #16]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007884:	4313      	orrs	r3, r2
 8007886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800788a:	e009      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800788c:	7cfb      	ldrb	r3, [r7, #19]
 800788e:	74bb      	strb	r3, [r7, #18]
 8007890:	e006      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007892:	bf00      	nop
 8007894:	40021000 	.word	0x40021000
 8007898:	40007000 	.word	0x40007000
 800789c:	7cfb      	ldrb	r3, [r7, #19]
 800789e:	74bb      	strb	r3, [r7, #18]
 80078a0:	7c7b      	ldrb	r3, [r7, #17]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d105      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80078a6:	4b9e      	ldr	r3, [pc, #632]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078aa:	4a9d      	ldr	r2, [pc, #628]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078b0:	6593      	str	r3, [r2, #88]	; 0x58
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80078be:	4b98      	ldr	r3, [pc, #608]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c4:	f023 0203 	bic.w	r2, r3, #3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	4994      	ldr	r1, [pc, #592]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80078e0:	4b8f      	ldr	r3, [pc, #572]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e6:	f023 020c 	bic.w	r2, r3, #12
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ee:	498c      	ldr	r1, [pc, #560]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8007902:	4b87      	ldr	r3, [pc, #540]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007908:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	4983      	ldr	r1, [pc, #524]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0308 	and.w	r3, r3, #8
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8007924:	4b7e      	ldr	r3, [pc, #504]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007932:	497b      	ldr	r1, [pc, #492]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007934:	4313      	orrs	r3, r2
 8007936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0310 	and.w	r3, r3, #16
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007946:	4b76      	ldr	r3, [pc, #472]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007954:	4972      	ldr	r1, [pc, #456]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007968:	4b6d      	ldr	r3, [pc, #436]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800796a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007976:	496a      	ldr	r1, [pc, #424]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007978:	4313      	orrs	r3, r2
 800797a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800798a:	4b65      	ldr	r3, [pc, #404]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800798c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007990:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007998:	4961      	ldr	r1, [pc, #388]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800799a:	4313      	orrs	r3, r2
 800799c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80079ac:	4b5c      	ldr	r3, [pc, #368]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ba:	4959      	ldr	r1, [pc, #356]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80079ce:	4b54      	ldr	r3, [pc, #336]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079dc:	4950      	ldr	r1, [pc, #320]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00a      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80079f0:	4b4b      	ldr	r3, [pc, #300]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fe:	4948      	ldr	r1, [pc, #288]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007a12:	4b43      	ldr	r3, [pc, #268]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	493f      	ldr	r1, [pc, #252]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d028      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007a34:	4b3a      	ldr	r3, [pc, #232]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a42:	4937      	ldr	r1, [pc, #220]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a52:	d106      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007a54:	4b32      	ldr	r3, [pc, #200]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	4a31      	ldr	r2, [pc, #196]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a5e:	60d3      	str	r3, [r2, #12]
 8007a60:	e011      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a6a:	d10c      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	2101      	movs	r1, #1
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 f8c8 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	74fb      	strb	r3, [r7, #19]
 8007a7c:	7cfb      	ldrb	r3, [r7, #19]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007a82:	7cfb      	ldrb	r3, [r7, #19]
 8007a84:	74bb      	strb	r3, [r7, #18]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d028      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007a92:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa0:	491f      	ldr	r1, [pc, #124]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007ab2:	4b1b      	ldr	r3, [pc, #108]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	4a1a      	ldr	r2, [pc, #104]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007abc:	60d3      	str	r3, [r2, #12]
 8007abe:	e011      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	2101      	movs	r1, #1
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 f899 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	74fb      	strb	r3, [r7, #19]
 8007ada:	7cfb      	ldrb	r3, [r7, #19]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007ae0:	7cfb      	ldrb	r3, [r7, #19]
 8007ae2:	74bb      	strb	r3, [r7, #18]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d02b      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afe:	4908      	ldr	r1, [pc, #32]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b0e:	d109      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007b10:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	4a02      	ldr	r2, [pc, #8]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b1a:	60d3      	str	r3, [r2, #12]
 8007b1c:	e014      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007b1e:	bf00      	nop
 8007b20:	40021000 	.word	0x40021000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b2c:	d10c      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3304      	adds	r3, #4
 8007b32:	2101      	movs	r1, #1
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 f867 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	74fb      	strb	r3, [r7, #19]
 8007b3e:	7cfb      	ldrb	r3, [r7, #19]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007b44:	7cfb      	ldrb	r3, [r7, #19]
 8007b46:	74bb      	strb	r3, [r7, #18]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d02f      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8007b54:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b62:	4928      	ldr	r1, [pc, #160]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b72:	d10d      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3304      	adds	r3, #4
 8007b78:	2102      	movs	r1, #2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 f844 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	74fb      	strb	r3, [r7, #19]
 8007b84:	7cfb      	ldrb	r3, [r7, #19]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d014      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8007b8a:	7cfb      	ldrb	r3, [r7, #19]
 8007b8c:	74bb      	strb	r3, [r7, #18]
 8007b8e:	e011      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b98:	d10c      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3320      	adds	r3, #32
 8007b9e:	2102      	movs	r1, #2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f925 	bl	8007df0 <RCCEx_PLLSAI2_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	74fb      	strb	r3, [r7, #19]
 8007baa:	7cfb      	ldrb	r3, [r7, #19]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8007bb0:	7cfb      	ldrb	r3, [r7, #19]
 8007bb2:	74bb      	strb	r3, [r7, #18]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007bc0:	4b10      	ldr	r3, [pc, #64]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bce:	490d      	ldr	r1, [pc, #52]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00b      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf2:	4904      	ldr	r1, [pc, #16]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007bfa:	7cbb      	ldrb	r3, [r7, #18]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40021000 	.word	0x40021000

08007c08 <RCCEx_PLLSAI1_Config>:
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
 8007c16:	4b75      	ldr	r3, [pc, #468]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <RCCEx_PLLSAI1_Config+0x4c>
 8007c22:	4b72      	ldr	r3, [pc, #456]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f003 0203 	and.w	r2, r3, #3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d10d      	bne.n	8007c4e <RCCEx_PLLSAI1_Config+0x46>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <RCCEx_PLLSAI1_Config+0x46>
 8007c3a:	4b6c      	ldr	r3, [pc, #432]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d047      	beq.n	8007cde <RCCEx_PLLSAI1_Config+0xd6>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	e044      	b.n	8007cde <RCCEx_PLLSAI1_Config+0xd6>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d018      	beq.n	8007c8e <RCCEx_PLLSAI1_Config+0x86>
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d825      	bhi.n	8007cac <RCCEx_PLLSAI1_Config+0xa4>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d002      	beq.n	8007c6a <RCCEx_PLLSAI1_Config+0x62>
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d009      	beq.n	8007c7c <RCCEx_PLLSAI1_Config+0x74>
 8007c68:	e020      	b.n	8007cac <RCCEx_PLLSAI1_Config+0xa4>
 8007c6a:	4b60      	ldr	r3, [pc, #384]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d11d      	bne.n	8007cb2 <RCCEx_PLLSAI1_Config+0xaa>
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	e01a      	b.n	8007cb2 <RCCEx_PLLSAI1_Config+0xaa>
 8007c7c:	4b5b      	ldr	r3, [pc, #364]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d116      	bne.n	8007cb6 <RCCEx_PLLSAI1_Config+0xae>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
 8007c8c:	e013      	b.n	8007cb6 <RCCEx_PLLSAI1_Config+0xae>
 8007c8e:	4b57      	ldr	r3, [pc, #348]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10f      	bne.n	8007cba <RCCEx_PLLSAI1_Config+0xb2>
 8007c9a:	4b54      	ldr	r3, [pc, #336]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <RCCEx_PLLSAI1_Config+0xb2>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	73fb      	strb	r3, [r7, #15]
 8007caa:	e006      	b.n	8007cba <RCCEx_PLLSAI1_Config+0xb2>
 8007cac:	2301      	movs	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
 8007cb0:	e004      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xb4>
 8007cb2:	bf00      	nop
 8007cb4:	e002      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xb4>
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xb4>
 8007cba:	bf00      	nop
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10d      	bne.n	8007cde <RCCEx_PLLSAI1_Config+0xd6>
 8007cc2:	4b4a      	ldr	r3, [pc, #296]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6819      	ldr	r1, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	4944      	ldr	r1, [pc, #272]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60cb      	str	r3, [r1, #12]
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d17d      	bne.n	8007de0 <RCCEx_PLLSAI1_Config+0x1d8>
 8007ce4:	4b41      	ldr	r3, [pc, #260]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a40      	ldr	r2, [pc, #256]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	f7fe fb84 	bl	80063fc <HAL_GetTick>
 8007cf4:	60b8      	str	r0, [r7, #8]
 8007cf6:	e009      	b.n	8007d0c <RCCEx_PLLSAI1_Config+0x104>
 8007cf8:	f7fe fb80 	bl	80063fc <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d902      	bls.n	8007d0c <RCCEx_PLLSAI1_Config+0x104>
 8007d06:	2303      	movs	r3, #3
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	e005      	b.n	8007d18 <RCCEx_PLLSAI1_Config+0x110>
 8007d0c:	4b37      	ldr	r3, [pc, #220]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1ef      	bne.n	8007cf8 <RCCEx_PLLSAI1_Config+0xf0>
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d160      	bne.n	8007de0 <RCCEx_PLLSAI1_Config+0x1d8>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d111      	bne.n	8007d48 <RCCEx_PLLSAI1_Config+0x140>
 8007d24:	4b31      	ldr	r3, [pc, #196]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6892      	ldr	r2, [r2, #8]
 8007d34:	0211      	lsls	r1, r2, #8
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68d2      	ldr	r2, [r2, #12]
 8007d3a:	0912      	lsrs	r2, r2, #4
 8007d3c:	0452      	lsls	r2, r2, #17
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	492a      	ldr	r1, [pc, #168]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	610b      	str	r3, [r1, #16]
 8007d46:	e027      	b.n	8007d98 <RCCEx_PLLSAI1_Config+0x190>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d112      	bne.n	8007d74 <RCCEx_PLLSAI1_Config+0x16c>
 8007d4e:	4b27      	ldr	r3, [pc, #156]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007d56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6892      	ldr	r2, [r2, #8]
 8007d5e:	0211      	lsls	r1, r2, #8
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6912      	ldr	r2, [r2, #16]
 8007d64:	0852      	lsrs	r2, r2, #1
 8007d66:	3a01      	subs	r2, #1
 8007d68:	0552      	lsls	r2, r2, #21
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	491f      	ldr	r1, [pc, #124]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	610b      	str	r3, [r1, #16]
 8007d72:	e011      	b.n	8007d98 <RCCEx_PLLSAI1_Config+0x190>
 8007d74:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6892      	ldr	r2, [r2, #8]
 8007d84:	0211      	lsls	r1, r2, #8
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6952      	ldr	r2, [r2, #20]
 8007d8a:	0852      	lsrs	r2, r2, #1
 8007d8c:	3a01      	subs	r2, #1
 8007d8e:	0652      	lsls	r2, r2, #25
 8007d90:	430a      	orrs	r2, r1
 8007d92:	4916      	ldr	r1, [pc, #88]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	610b      	str	r3, [r1, #16]
 8007d98:	4b14      	ldr	r3, [pc, #80]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a13      	ldr	r2, [pc, #76]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	f7fe fb2a 	bl	80063fc <HAL_GetTick>
 8007da8:	60b8      	str	r0, [r7, #8]
 8007daa:	e009      	b.n	8007dc0 <RCCEx_PLLSAI1_Config+0x1b8>
 8007dac:	f7fe fb26 	bl	80063fc <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d902      	bls.n	8007dc0 <RCCEx_PLLSAI1_Config+0x1b8>
 8007dba:	2303      	movs	r3, #3
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	e005      	b.n	8007dcc <RCCEx_PLLSAI1_Config+0x1c4>
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ef      	beq.n	8007dac <RCCEx_PLLSAI1_Config+0x1a4>
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <RCCEx_PLLSAI1_Config+0x1d8>
 8007dd2:	4b06      	ldr	r3, [pc, #24]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	4904      	ldr	r1, [pc, #16]	; (8007dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	610b      	str	r3, [r1, #16]
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40021000 	.word	0x40021000

08007df0 <RCCEx_PLLSAI2_Config>:
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]
 8007dfe:	4b6a      	ldr	r3, [pc, #424]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d018      	beq.n	8007e3c <RCCEx_PLLSAI2_Config+0x4c>
 8007e0a:	4b67      	ldr	r3, [pc, #412]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f003 0203 	and.w	r2, r3, #3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d10d      	bne.n	8007e36 <RCCEx_PLLSAI2_Config+0x46>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <RCCEx_PLLSAI2_Config+0x46>
 8007e22:	4b61      	ldr	r3, [pc, #388]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	091b      	lsrs	r3, r3, #4
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d047      	beq.n	8007ec6 <RCCEx_PLLSAI2_Config+0xd6>
 8007e36:	2301      	movs	r3, #1
 8007e38:	73fb      	strb	r3, [r7, #15]
 8007e3a:	e044      	b.n	8007ec6 <RCCEx_PLLSAI2_Config+0xd6>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d018      	beq.n	8007e76 <RCCEx_PLLSAI2_Config+0x86>
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d825      	bhi.n	8007e94 <RCCEx_PLLSAI2_Config+0xa4>
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d002      	beq.n	8007e52 <RCCEx_PLLSAI2_Config+0x62>
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d009      	beq.n	8007e64 <RCCEx_PLLSAI2_Config+0x74>
 8007e50:	e020      	b.n	8007e94 <RCCEx_PLLSAI2_Config+0xa4>
 8007e52:	4b55      	ldr	r3, [pc, #340]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d11d      	bne.n	8007e9a <RCCEx_PLLSAI2_Config+0xaa>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	73fb      	strb	r3, [r7, #15]
 8007e62:	e01a      	b.n	8007e9a <RCCEx_PLLSAI2_Config+0xaa>
 8007e64:	4b50      	ldr	r3, [pc, #320]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d116      	bne.n	8007e9e <RCCEx_PLLSAI2_Config+0xae>
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
 8007e74:	e013      	b.n	8007e9e <RCCEx_PLLSAI2_Config+0xae>
 8007e76:	4b4c      	ldr	r3, [pc, #304]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10f      	bne.n	8007ea2 <RCCEx_PLLSAI2_Config+0xb2>
 8007e82:	4b49      	ldr	r3, [pc, #292]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d109      	bne.n	8007ea2 <RCCEx_PLLSAI2_Config+0xb2>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]
 8007e92:	e006      	b.n	8007ea2 <RCCEx_PLLSAI2_Config+0xb2>
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
 8007e98:	e004      	b.n	8007ea4 <RCCEx_PLLSAI2_Config+0xb4>
 8007e9a:	bf00      	nop
 8007e9c:	e002      	b.n	8007ea4 <RCCEx_PLLSAI2_Config+0xb4>
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <RCCEx_PLLSAI2_Config+0xb4>
 8007ea2:	bf00      	nop
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10d      	bne.n	8007ec6 <RCCEx_PLLSAI2_Config+0xd6>
 8007eaa:	4b3f      	ldr	r3, [pc, #252]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6819      	ldr	r1, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	4939      	ldr	r1, [pc, #228]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60cb      	str	r3, [r1, #12]
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d167      	bne.n	8007f9c <RCCEx_PLLSAI2_Config+0x1ac>
 8007ecc:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a35      	ldr	r2, [pc, #212]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	f7fe fa90 	bl	80063fc <HAL_GetTick>
 8007edc:	60b8      	str	r0, [r7, #8]
 8007ede:	e009      	b.n	8007ef4 <RCCEx_PLLSAI2_Config+0x104>
 8007ee0:	f7fe fa8c 	bl	80063fc <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d902      	bls.n	8007ef4 <RCCEx_PLLSAI2_Config+0x104>
 8007eee:	2303      	movs	r3, #3
 8007ef0:	73fb      	strb	r3, [r7, #15]
 8007ef2:	e005      	b.n	8007f00 <RCCEx_PLLSAI2_Config+0x110>
 8007ef4:	4b2c      	ldr	r3, [pc, #176]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1ef      	bne.n	8007ee0 <RCCEx_PLLSAI2_Config+0xf0>
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d14a      	bne.n	8007f9c <RCCEx_PLLSAI2_Config+0x1ac>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d111      	bne.n	8007f30 <RCCEx_PLLSAI2_Config+0x140>
 8007f0c:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6892      	ldr	r2, [r2, #8]
 8007f1c:	0211      	lsls	r1, r2, #8
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	68d2      	ldr	r2, [r2, #12]
 8007f22:	0912      	lsrs	r2, r2, #4
 8007f24:	0452      	lsls	r2, r2, #17
 8007f26:	430a      	orrs	r2, r1
 8007f28:	491f      	ldr	r1, [pc, #124]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	614b      	str	r3, [r1, #20]
 8007f2e:	e011      	b.n	8007f54 <RCCEx_PLLSAI2_Config+0x164>
 8007f30:	4b1d      	ldr	r3, [pc, #116]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6892      	ldr	r2, [r2, #8]
 8007f40:	0211      	lsls	r1, r2, #8
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6912      	ldr	r2, [r2, #16]
 8007f46:	0852      	lsrs	r2, r2, #1
 8007f48:	3a01      	subs	r2, #1
 8007f4a:	0652      	lsls	r2, r2, #25
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	4916      	ldr	r1, [pc, #88]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	614b      	str	r3, [r1, #20]
 8007f54:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	f7fe fa4c 	bl	80063fc <HAL_GetTick>
 8007f64:	60b8      	str	r0, [r7, #8]
 8007f66:	e009      	b.n	8007f7c <RCCEx_PLLSAI2_Config+0x18c>
 8007f68:	f7fe fa48 	bl	80063fc <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d902      	bls.n	8007f7c <RCCEx_PLLSAI2_Config+0x18c>
 8007f76:	2303      	movs	r3, #3
 8007f78:	73fb      	strb	r3, [r7, #15]
 8007f7a:	e005      	b.n	8007f88 <RCCEx_PLLSAI2_Config+0x198>
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0ef      	beq.n	8007f68 <RCCEx_PLLSAI2_Config+0x178>
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <RCCEx_PLLSAI2_Config+0x1ac>
 8007f8e:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f90:	695a      	ldr	r2, [r3, #20]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	4904      	ldr	r1, [pc, #16]	; (8007fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	614b      	str	r3, [r1, #20]
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40021000 	.word	0x40021000

08007fac <HAL_SPI_Init>:
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_SPI_Init+0x12>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e095      	b.n	80080ea <HAL_SPI_Init+0x13e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d108      	bne.n	8007fd8 <HAL_SPI_Init+0x2c>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fce:	d009      	beq.n	8007fe4 <HAL_SPI_Init+0x38>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	61da      	str	r2, [r3, #28]
 8007fd6:	e005      	b.n	8007fe4 <HAL_SPI_Init+0x38>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	611a      	str	r2, [r3, #16]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	615a      	str	r2, [r3, #20]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	629a      	str	r2, [r3, #40]	; 0x28
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d106      	bne.n	8008004 <HAL_SPI_Init+0x58>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fd fce6 	bl	80059d0 <HAL_SPI_MspInit>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008024:	d902      	bls.n	800802c <HAL_SPI_Init+0x80>
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e002      	b.n	8008032 <HAL_SPI_Init+0x86>
 800802c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800803a:	d007      	beq.n	800804c <HAL_SPI_Init+0xa0>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008044:	d002      	beq.n	800804c <HAL_SPI_Init+0xa0>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	431a      	orrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808e:	ea42 0103 	orr.w	r1, r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	f003 0204 	and.w	r2, r3, #4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80080c8:	ea42 0103 	orr.w	r1, r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	661a      	str	r2, [r3, #96]	; 0x60
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80080e8:	2300      	movs	r3, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_SPI_Receive>:
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b088      	sub	sp, #32
 80080f6:	af02      	add	r7, sp, #8
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	603b      	str	r3, [r7, #0]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
 8008102:	2300      	movs	r3, #0
 8008104:	75fb      	strb	r3, [r7, #23]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800810e:	d112      	bne.n	8008136 <HAL_SPI_Receive+0x44>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10e      	bne.n	8008136 <HAL_SPI_Receive+0x44>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2204      	movs	r2, #4
 800811c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8008120:	88fa      	ldrh	r2, [r7, #6]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	4613      	mov	r3, r2
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f910 	bl	8008352 <HAL_SPI_TransmitReceive>
 8008132:	4603      	mov	r3, r0
 8008134:	e109      	b.n	800834a <HAL_SPI_Receive+0x258>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_SPI_Receive+0x52>
 8008140:	2302      	movs	r3, #2
 8008142:	e102      	b.n	800834a <HAL_SPI_Receive+0x258>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800814c:	f7fe f956 	bl	80063fc <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b01      	cmp	r3, #1
 800815c:	d002      	beq.n	8008164 <HAL_SPI_Receive+0x72>
 800815e:	2302      	movs	r3, #2
 8008160:	75fb      	strb	r3, [r7, #23]
 8008162:	e0e9      	b.n	8008338 <HAL_SPI_Receive+0x246>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <HAL_SPI_Receive+0x7e>
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <HAL_SPI_Receive+0x84>
 8008170:	2301      	movs	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
 8008174:	e0e0      	b.n	8008338 <HAL_SPI_Receive+0x246>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2204      	movs	r2, #4
 800817a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	661a      	str	r2, [r3, #96]	; 0x60
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	641a      	str	r2, [r3, #64]	; 0x40
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	88fa      	ldrh	r2, [r7, #6]
 8008196:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	639a      	str	r2, [r3, #56]	; 0x38
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	879a      	strh	r2, [r3, #60]	; 0x3c
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	651a      	str	r2, [r3, #80]	; 0x50
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081c0:	d908      	bls.n	80081d4 <HAL_SPI_Receive+0xe2>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081d0:	605a      	str	r2, [r3, #4]
 80081d2:	e007      	b.n	80081e4 <HAL_SPI_Receive+0xf2>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081e2:	605a      	str	r2, [r3, #4]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ec:	d10f      	bne.n	800820e <HAL_SPI_Receive+0x11c>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d007      	beq.n	800822c <HAL_SPI_Receive+0x13a>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008234:	d867      	bhi.n	8008306 <HAL_SPI_Receive+0x214>
 8008236:	e030      	b.n	800829a <HAL_SPI_Receive+0x1a8>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b01      	cmp	r3, #1
 8008244:	d117      	bne.n	8008276 <HAL_SPI_Receive+0x184>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f103 020c 	add.w	r2, r3, #12
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	7812      	ldrb	r2, [r2, #0]
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008268:	b29b      	uxth	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008274:	e011      	b.n	800829a <HAL_SPI_Receive+0x1a8>
 8008276:	f7fe f8c1 	bl	80063fc <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d803      	bhi.n	800828e <HAL_SPI_Receive+0x19c>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828c:	d102      	bne.n	8008294 <HAL_SPI_Receive+0x1a2>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <HAL_SPI_Receive+0x1a8>
 8008294:	2303      	movs	r3, #3
 8008296:	75fb      	strb	r3, [r7, #23]
 8008298:	e04e      	b.n	8008338 <HAL_SPI_Receive+0x246>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1c8      	bne.n	8008238 <HAL_SPI_Receive+0x146>
 80082a6:	e034      	b.n	8008312 <HAL_SPI_Receive+0x220>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d115      	bne.n	80082e2 <HAL_SPI_Receive+0x1f0>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	b292      	uxth	r2, r2
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c8:	1c9a      	adds	r2, r3, #2
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80082e0:	e011      	b.n	8008306 <HAL_SPI_Receive+0x214>
 80082e2:	f7fe f88b 	bl	80063fc <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d803      	bhi.n	80082fa <HAL_SPI_Receive+0x208>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d102      	bne.n	8008300 <HAL_SPI_Receive+0x20e>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <HAL_SPI_Receive+0x214>
 8008300:	2303      	movs	r3, #3
 8008302:	75fb      	strb	r3, [r7, #23]
 8008304:	e018      	b.n	8008338 <HAL_SPI_Receive+0x246>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800830c:	b29b      	uxth	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1ca      	bne.n	80082a8 <HAL_SPI_Receive+0x1b6>
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fb48 	bl	80089ac <SPI_EndRxTransaction>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_SPI_Receive+0x236>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	661a      	str	r2, [r3, #96]	; 0x60
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_SPI_Receive+0x244>
 8008330:	2301      	movs	r3, #1
 8008332:	75fb      	strb	r3, [r7, #23]
 8008334:	e000      	b.n	8008338 <HAL_SPI_Receive+0x246>
 8008336:	bf00      	nop
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_SPI_TransmitReceive>:
 8008352:	b580      	push	{r7, lr}
 8008354:	b08a      	sub	sp, #40	; 0x28
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	60b9      	str	r1, [r7, #8]
 800835c:	607a      	str	r2, [r7, #4]
 800835e:	807b      	strh	r3, [r7, #2]
 8008360:	2301      	movs	r3, #1
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
 8008364:	2300      	movs	r3, #0
 8008366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_SPI_TransmitReceive+0x26>
 8008374:	2302      	movs	r3, #2
 8008376:	e1fb      	b.n	8008770 <HAL_SPI_TransmitReceive+0x41e>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008380:	f7fe f83c 	bl	80063fc <HAL_GetTick>
 8008384:	61f8      	str	r0, [r7, #28]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800838c:	76fb      	strb	r3, [r7, #27]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	887b      	ldrh	r3, [r7, #2]
 8008396:	827b      	strh	r3, [r7, #18]
 8008398:	887b      	ldrh	r3, [r7, #2]
 800839a:	823b      	strh	r3, [r7, #16]
 800839c:	7efb      	ldrb	r3, [r7, #27]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d00e      	beq.n	80083c0 <HAL_SPI_TransmitReceive+0x6e>
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083a8:	d106      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x66>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x66>
 80083b2:	7efb      	ldrb	r3, [r7, #27]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d003      	beq.n	80083c0 <HAL_SPI_TransmitReceive+0x6e>
 80083b8:	2302      	movs	r3, #2
 80083ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083be:	e1cd      	b.n	800875c <HAL_SPI_TransmitReceive+0x40a>
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x80>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x80>
 80083cc:	887b      	ldrh	r3, [r7, #2]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <HAL_SPI_TransmitReceive+0x88>
 80083d2:	2301      	movs	r3, #1
 80083d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d8:	e1c0      	b.n	800875c <HAL_SPI_TransmitReceive+0x40a>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d003      	beq.n	80083ee <HAL_SPI_TransmitReceive+0x9c>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2205      	movs	r2, #5
 80083ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	661a      	str	r2, [r3, #96]	; 0x60
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	887a      	ldrh	r2, [r7, #2]
 80083fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	887a      	ldrh	r2, [r7, #2]
 8008406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	887a      	ldrh	r2, [r7, #2]
 8008414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	887a      	ldrh	r2, [r7, #2]
 800841a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	64da      	str	r2, [r3, #76]	; 0x4c
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	651a      	str	r2, [r3, #80]	; 0x50
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008430:	d802      	bhi.n	8008438 <HAL_SPI_TransmitReceive+0xe6>
 8008432:	8a3b      	ldrh	r3, [r7, #16]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d908      	bls.n	800844a <HAL_SPI_TransmitReceive+0xf8>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008446:	605a      	str	r2, [r3, #4]
 8008448:	e007      	b.n	800845a <HAL_SPI_TransmitReceive+0x108>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008458:	605a      	str	r2, [r3, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d007      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x126>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008480:	d97c      	bls.n	800857c <HAL_SPI_TransmitReceive+0x22a>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_SPI_TransmitReceive+0x13e>
 800848a:	8a7b      	ldrh	r3, [r7, #18]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d169      	bne.n	8008564 <HAL_SPI_TransmitReceive+0x212>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	881a      	ldrh	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60da      	str	r2, [r3, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	1c9a      	adds	r2, r3, #2
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084b4:	e056      	b.n	8008564 <HAL_SPI_TransmitReceive+0x212>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d11b      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x1aa>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x1aa>
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d113      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x1aa>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	881a      	ldrh	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60da      	str	r2, [r3, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	1c9a      	adds	r2, r3, #2
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084f8:	2300      	movs	r3, #0
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b01      	cmp	r3, #1
 8008508:	d11c      	bne.n	8008544 <HAL_SPI_TransmitReceive+0x1f2>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d016      	beq.n	8008544 <HAL_SPI_TransmitReceive+0x1f2>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	b292      	uxth	r2, r2
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	1c9a      	adds	r2, r3, #2
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	641a      	str	r2, [r3, #64]	; 0x40
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008540:	2301      	movs	r3, #1
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
 8008544:	f7fd ff5a 	bl	80063fc <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008550:	429a      	cmp	r2, r3
 8008552:	d807      	bhi.n	8008564 <HAL_SPI_TransmitReceive+0x212>
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d003      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x212>
 800855c:	2303      	movs	r3, #3
 800855e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008562:	e0fb      	b.n	800875c <HAL_SPI_TransmitReceive+0x40a>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1a3      	bne.n	80084b6 <HAL_SPI_TransmitReceive+0x164>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d19d      	bne.n	80084b6 <HAL_SPI_TransmitReceive+0x164>
 800857a:	e0df      	b.n	800873c <HAL_SPI_TransmitReceive+0x3ea>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <HAL_SPI_TransmitReceive+0x23a>
 8008584:	8a7b      	ldrh	r3, [r7, #18]
 8008586:	2b01      	cmp	r3, #1
 8008588:	f040 80cb 	bne.w	8008722 <HAL_SPI_TransmitReceive+0x3d0>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b01      	cmp	r3, #1
 8008594:	d912      	bls.n	80085bc <HAL_SPI_TransmitReceive+0x26a>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	881a      	ldrh	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	1c9a      	adds	r2, r3, #2
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b02      	subs	r3, #2
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085ba:	e0b2      	b.n	8008722 <HAL_SPI_TransmitReceive+0x3d0>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	7812      	ldrb	r2, [r2, #0]
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3b01      	subs	r3, #1
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085e2:	e09e      	b.n	8008722 <HAL_SPI_TransmitReceive+0x3d0>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d134      	bne.n	800865c <HAL_SPI_TransmitReceive+0x30a>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d02f      	beq.n	800865c <HAL_SPI_TransmitReceive+0x30a>
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d12c      	bne.n	800865c <HAL_SPI_TransmitReceive+0x30a>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d912      	bls.n	8008632 <HAL_SPI_TransmitReceive+0x2e0>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	881a      	ldrh	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60da      	str	r2, [r3, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	1c9a      	adds	r2, r3, #2
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	639a      	str	r2, [r3, #56]	; 0x38
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008626:	b29b      	uxth	r3, r3
 8008628:	3b02      	subs	r3, #2
 800862a:	b29a      	uxth	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008630:	e012      	b.n	8008658 <HAL_SPI_TransmitReceive+0x306>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	330c      	adds	r3, #12
 800863c:	7812      	ldrb	r2, [r2, #0]
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008658:	2300      	movs	r3, #0
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b01      	cmp	r3, #1
 8008668:	d148      	bne.n	80086fc <HAL_SPI_TransmitReceive+0x3aa>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d042      	beq.n	80086fc <HAL_SPI_TransmitReceive+0x3aa>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b01      	cmp	r3, #1
 8008680:	d923      	bls.n	80086ca <HAL_SPI_TransmitReceive+0x378>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	b292      	uxth	r2, r2
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	1c9a      	adds	r2, r3, #2
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	641a      	str	r2, [r3, #64]	; 0x40
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b02      	subs	r3, #2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d81f      	bhi.n	80086f8 <HAL_SPI_TransmitReceive+0x3a6>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086c6:	605a      	str	r2, [r3, #4]
 80086c8:	e016      	b.n	80086f8 <HAL_SPI_TransmitReceive+0x3a6>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f103 020c 	add.w	r2, r3, #12
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	7812      	ldrb	r2, [r2, #0]
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	641a      	str	r2, [r3, #64]	; 0x40
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80086f8:	2301      	movs	r3, #1
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
 80086fc:	f7fd fe7e 	bl	80063fc <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008708:	429a      	cmp	r2, r3
 800870a:	d803      	bhi.n	8008714 <HAL_SPI_TransmitReceive+0x3c2>
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008712:	d102      	bne.n	800871a <HAL_SPI_TransmitReceive+0x3c8>
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <HAL_SPI_TransmitReceive+0x3d0>
 800871a:	2303      	movs	r3, #3
 800871c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008720:	e01c      	b.n	800875c <HAL_SPI_TransmitReceive+0x40a>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	f47f af5b 	bne.w	80085e4 <HAL_SPI_TransmitReceive+0x292>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	f47f af54 	bne.w	80085e4 <HAL_SPI_TransmitReceive+0x292>
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f98b 	bl	8008a5c <SPI_EndRxTxTransaction>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <HAL_SPI_TransmitReceive+0x408>
 800874c:	2301      	movs	r3, #1
 800874e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2220      	movs	r2, #32
 8008756:	661a      	str	r2, [r3, #96]	; 0x60
 8008758:	e000      	b.n	800875c <HAL_SPI_TransmitReceive+0x40a>
 800875a:	bf00      	nop
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800876c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SPI_WaitFlagStateUntilTimeout>:
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	71fb      	strb	r3, [r7, #7]
 8008788:	f7fd fe38 	bl	80063fc <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4413      	add	r3, r2
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	f7fd fe30 	bl	80063fc <HAL_GetTick>
 800879c:	61b8      	str	r0, [r7, #24]
 800879e:	4b39      	ldr	r3, [pc, #228]	; (8008884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	015b      	lsls	r3, r3, #5
 80087a4:	0d1b      	lsrs	r3, r3, #20
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	e054      	b.n	800885a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d050      	beq.n	800885a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80087b8:	f7fd fe20 	bl	80063fc <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d902      	bls.n	80087ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d13d      	bne.n	800884a <SPI_WaitFlagStateUntilTimeout+0xd2>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087dc:	605a      	str	r2, [r3, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087e6:	d111      	bne.n	800880c <SPI_WaitFlagStateUntilTimeout+0x94>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f0:	d004      	beq.n	80087fc <SPI_WaitFlagStateUntilTimeout+0x84>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fa:	d107      	bne.n	800880c <SPI_WaitFlagStateUntilTimeout+0x94>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008814:	d10f      	bne.n	8008836 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008846:	2303      	movs	r3, #3
 8008848:	e017      	b.n	800887a <SPI_WaitFlagStateUntilTimeout+0x102>
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3b01      	subs	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4013      	ands	r3, r2
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	429a      	cmp	r2, r3
 8008868:	bf0c      	ite	eq
 800886a:	2301      	moveq	r3, #1
 800886c:	2300      	movne	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	429a      	cmp	r2, r3
 8008876:	d19b      	bne.n	80087b0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8008878:	2300      	movs	r3, #0
 800887a:	4618      	mov	r0, r3
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20000158 	.word	0x20000158

08008888 <SPI_WaitFifoStateUntilTimeout>:
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	f7fd fdb1 	bl	80063fc <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	4413      	add	r3, r2
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	f7fd fda9 	bl	80063fc <HAL_GetTick>
 80088aa:	61b8      	str	r0, [r7, #24]
 80088ac:	4b3e      	ldr	r3, [pc, #248]	; (80089a8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	00da      	lsls	r2, r3, #3
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	0d1b      	lsrs	r3, r3, #20
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	fb02 f303 	mul.w	r3, r2, r3
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	e062      	b.n	800898c <SPI_WaitFifoStateUntilTimeout+0x104>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80088cc:	d109      	bne.n	80088e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d106      	bne.n	80088e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d050      	beq.n	800898c <SPI_WaitFifoStateUntilTimeout+0x104>
 80088ea:	f7fd fd87 	bl	80063fc <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d902      	bls.n	8008900 <SPI_WaitFifoStateUntilTimeout+0x78>
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d13d      	bne.n	800897c <SPI_WaitFifoStateUntilTimeout+0xf4>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800890e:	605a      	str	r2, [r3, #4]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008918:	d111      	bne.n	800893e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008922:	d004      	beq.n	800892e <SPI_WaitFifoStateUntilTimeout+0xa6>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892c:	d107      	bne.n	800893e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008946:	d10f      	bne.n	8008968 <SPI_WaitFifoStateUntilTimeout+0xe0>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008978:	2303      	movs	r3, #3
 800897a:	e010      	b.n	800899e <SPI_WaitFifoStateUntilTimeout+0x116>
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <SPI_WaitFifoStateUntilTimeout+0xfe>
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	3b01      	subs	r3, #1
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4013      	ands	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	429a      	cmp	r2, r3
 800899a:	d194      	bne.n	80088c6 <SPI_WaitFifoStateUntilTimeout+0x3e>
 800899c:	2300      	movs	r3, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20000158 	.word	0x20000158

080089ac <SPI_EndRxTransaction>:
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c0:	d111      	bne.n	80089e6 <SPI_EndRxTransaction+0x3a>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ca:	d004      	beq.n	80089d6 <SPI_EndRxTransaction+0x2a>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d4:	d107      	bne.n	80089e6 <SPI_EndRxTransaction+0x3a>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2200      	movs	r2, #0
 80089ee:	2180      	movs	r1, #128	; 0x80
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7ff fec1 	bl	8008778 <SPI_WaitFlagStateUntilTimeout>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d007      	beq.n	8008a0c <SPI_EndRxTransaction+0x60>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a00:	f043 0220 	orr.w	r2, r3, #32
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	661a      	str	r2, [r3, #96]	; 0x60
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e023      	b.n	8008a54 <SPI_EndRxTransaction+0xa8>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a14:	d11d      	bne.n	8008a52 <SPI_EndRxTransaction+0xa6>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1e:	d004      	beq.n	8008a2a <SPI_EndRxTransaction+0x7e>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a28:	d113      	bne.n	8008a52 <SPI_EndRxTransaction+0xa6>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff ff26 	bl	8008888 <SPI_WaitFifoStateUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <SPI_EndRxTransaction+0xa6>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a46:	f043 0220 	orr.w	r2, r3, #32
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	661a      	str	r2, [r3, #96]	; 0x60
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e000      	b.n	8008a54 <SPI_EndRxTransaction+0xa8>
 8008a52:	2300      	movs	r3, #0
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <SPI_EndRxTxTransaction>:
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff ff07 	bl	8008888 <SPI_WaitFifoStateUntilTimeout>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <SPI_EndRxTxTransaction+0x34>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a84:	f043 0220 	orr.w	r2, r3, #32
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	661a      	str	r2, [r3, #96]	; 0x60
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e027      	b.n	8008ae0 <SPI_EndRxTxTransaction+0x84>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2200      	movs	r2, #0
 8008a98:	2180      	movs	r1, #128	; 0x80
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f7ff fe6c 	bl	8008778 <SPI_WaitFlagStateUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d007      	beq.n	8008ab6 <SPI_EndRxTxTransaction+0x5a>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	661a      	str	r2, [r3, #96]	; 0x60
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e014      	b.n	8008ae0 <SPI_EndRxTxTransaction+0x84>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff fee0 	bl	8008888 <SPI_WaitFifoStateUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <SPI_EndRxTxTransaction+0x82>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad2:	f043 0220 	orr.w	r2, r3, #32
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	661a      	str	r2, [r3, #96]	; 0x60
 8008ada:	2303      	movs	r3, #3
 8008adc:	e000      	b.n	8008ae0 <SPI_EndRxTxTransaction+0x84>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_TIM_Base_Init>:
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_Base_Init+0x12>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e049      	b.n	8008b8e <HAL_TIM_Base_Init+0xa6>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_TIM_Base_Init+0x2c>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7fc ffc0 	bl	8005a94 <HAL_TIM_Base_MspInit>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f000 fdc2 	bl	80096b0 <TIM_Base_SetConfig>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <HAL_TIM_Base_Start_IT>:
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d001      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x18>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e04f      	b.n	8008c50 <HAL_TIM_Base_Start_IT+0xb8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a23      	ldr	r2, [pc, #140]	; (8008c5c <HAL_TIM_Base_Start_IT+0xc4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d01d      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0x76>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bda:	d018      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0x76>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <HAL_TIM_Base_Start_IT+0xc8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d013      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0x76>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a1e      	ldr	r2, [pc, #120]	; (8008c64 <HAL_TIM_Base_Start_IT+0xcc>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00e      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0x76>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a1c      	ldr	r2, [pc, #112]	; (8008c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d009      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0x76>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a1b      	ldr	r2, [pc, #108]	; (8008c6c <HAL_TIM_Base_Start_IT+0xd4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d004      	beq.n	8008c0e <HAL_TIM_Base_Start_IT+0x76>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a19      	ldr	r2, [pc, #100]	; (8008c70 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d115      	bne.n	8008c3a <HAL_TIM_Base_Start_IT+0xa2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	4b17      	ldr	r3, [pc, #92]	; (8008c74 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c16:	4013      	ands	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b06      	cmp	r3, #6
 8008c1e:	d015      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0xb4>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c26:	d011      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0xb4>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e008      	b.n	8008c4c <HAL_TIM_Base_Start_IT+0xb4>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f042 0201 	orr.w	r2, r2, #1
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	e000      	b.n	8008c4e <HAL_TIM_Base_Start_IT+0xb6>
 8008c4c:	bf00      	nop
 8008c4e:	2300      	movs	r3, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	40012c00 	.word	0x40012c00
 8008c60:	40000400 	.word	0x40000400
 8008c64:	40000800 	.word	0x40000800
 8008c68:	40000c00 	.word	0x40000c00
 8008c6c:	40013400 	.word	0x40013400
 8008c70:	40014000 	.word	0x40014000
 8008c74:	00010007 	.word	0x00010007

08008c78 <HAL_TIM_PWM_Init>:
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_TIM_PWM_Init+0x12>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e049      	b.n	8008d1e <HAL_TIM_PWM_Init+0xa6>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <HAL_TIM_PWM_Init+0x2c>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f841 	bl	8008d26 <HAL_TIM_PWM_MspInit>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	f000 fcfa 	bl	80096b0 <TIM_Base_SetConfig>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_TIM_PWM_MspInit>:
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
	...

08008d3c <HAL_TIM_PWM_Start>:
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d109      	bne.n	8008d60 <HAL_TIM_PWM_Start+0x24>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	bf14      	ite	ne
 8008d58:	2301      	movne	r3, #1
 8008d5a:	2300      	moveq	r3, #0
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	e03c      	b.n	8008dda <HAL_TIM_PWM_Start+0x9e>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d109      	bne.n	8008d7a <HAL_TIM_PWM_Start+0x3e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	bf14      	ite	ne
 8008d72:	2301      	movne	r3, #1
 8008d74:	2300      	moveq	r3, #0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	e02f      	b.n	8008dda <HAL_TIM_PWM_Start+0x9e>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b08      	cmp	r3, #8
 8008d7e:	d109      	bne.n	8008d94 <HAL_TIM_PWM_Start+0x58>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	bf14      	ite	ne
 8008d8c:	2301      	movne	r3, #1
 8008d8e:	2300      	moveq	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	e022      	b.n	8008dda <HAL_TIM_PWM_Start+0x9e>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b0c      	cmp	r3, #12
 8008d98:	d109      	bne.n	8008dae <HAL_TIM_PWM_Start+0x72>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	bf14      	ite	ne
 8008da6:	2301      	movne	r3, #1
 8008da8:	2300      	moveq	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	e015      	b.n	8008dda <HAL_TIM_PWM_Start+0x9e>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d109      	bne.n	8008dc8 <HAL_TIM_PWM_Start+0x8c>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	bf14      	ite	ne
 8008dc0:	2301      	movne	r3, #1
 8008dc2:	2300      	moveq	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	e008      	b.n	8008dda <HAL_TIM_PWM_Start+0x9e>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	bf14      	ite	ne
 8008dd4:	2301      	movne	r3, #1
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <HAL_TIM_PWM_Start+0xa6>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e09c      	b.n	8008f1c <HAL_TIM_PWM_Start+0x1e0>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <HAL_TIM_PWM_Start+0xb6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008df0:	e023      	b.n	8008e3a <HAL_TIM_PWM_Start+0xfe>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Start+0xc6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e00:	e01b      	b.n	8008e3a <HAL_TIM_PWM_Start+0xfe>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Start+0xd6>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e10:	e013      	b.n	8008e3a <HAL_TIM_PWM_Start+0xfe>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b0c      	cmp	r3, #12
 8008e16:	d104      	bne.n	8008e22 <HAL_TIM_PWM_Start+0xe6>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e20:	e00b      	b.n	8008e3a <HAL_TIM_PWM_Start+0xfe>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d104      	bne.n	8008e32 <HAL_TIM_PWM_Start+0xf6>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e30:	e003      	b.n	8008e3a <HAL_TIM_PWM_Start+0xfe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 f83e 	bl	8009ec4 <TIM_CCxChannelCmd>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a35      	ldr	r2, [pc, #212]	; (8008f24 <HAL_TIM_PWM_Start+0x1e8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d013      	beq.n	8008e7a <HAL_TIM_PWM_Start+0x13e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a34      	ldr	r2, [pc, #208]	; (8008f28 <HAL_TIM_PWM_Start+0x1ec>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d00e      	beq.n	8008e7a <HAL_TIM_PWM_Start+0x13e>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a32      	ldr	r2, [pc, #200]	; (8008f2c <HAL_TIM_PWM_Start+0x1f0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d009      	beq.n	8008e7a <HAL_TIM_PWM_Start+0x13e>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a31      	ldr	r2, [pc, #196]	; (8008f30 <HAL_TIM_PWM_Start+0x1f4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d004      	beq.n	8008e7a <HAL_TIM_PWM_Start+0x13e>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a2f      	ldr	r2, [pc, #188]	; (8008f34 <HAL_TIM_PWM_Start+0x1f8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d101      	bne.n	8008e7e <HAL_TIM_PWM_Start+0x142>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <HAL_TIM_PWM_Start+0x144>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d007      	beq.n	8008e94 <HAL_TIM_PWM_Start+0x158>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e92:	645a      	str	r2, [r3, #68]	; 0x44
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a22      	ldr	r2, [pc, #136]	; (8008f24 <HAL_TIM_PWM_Start+0x1e8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d01d      	beq.n	8008eda <HAL_TIM_PWM_Start+0x19e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea6:	d018      	beq.n	8008eda <HAL_TIM_PWM_Start+0x19e>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a22      	ldr	r2, [pc, #136]	; (8008f38 <HAL_TIM_PWM_Start+0x1fc>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d013      	beq.n	8008eda <HAL_TIM_PWM_Start+0x19e>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a21      	ldr	r2, [pc, #132]	; (8008f3c <HAL_TIM_PWM_Start+0x200>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00e      	beq.n	8008eda <HAL_TIM_PWM_Start+0x19e>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a1f      	ldr	r2, [pc, #124]	; (8008f40 <HAL_TIM_PWM_Start+0x204>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d009      	beq.n	8008eda <HAL_TIM_PWM_Start+0x19e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <HAL_TIM_PWM_Start+0x1ec>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d004      	beq.n	8008eda <HAL_TIM_PWM_Start+0x19e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a15      	ldr	r2, [pc, #84]	; (8008f2c <HAL_TIM_PWM_Start+0x1f0>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d115      	bne.n	8008f06 <HAL_TIM_PWM_Start+0x1ca>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	4b18      	ldr	r3, [pc, #96]	; (8008f44 <HAL_TIM_PWM_Start+0x208>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b06      	cmp	r3, #6
 8008eea:	d015      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1dc>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef2:	d011      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1dc>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0201 	orr.w	r2, r2, #1
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	e008      	b.n	8008f18 <HAL_TIM_PWM_Start+0x1dc>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0201 	orr.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	e000      	b.n	8008f1a <HAL_TIM_PWM_Start+0x1de>
 8008f18:	bf00      	nop
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	40012c00 	.word	0x40012c00
 8008f28:	40013400 	.word	0x40013400
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	40014400 	.word	0x40014400
 8008f34:	40014800 	.word	0x40014800
 8008f38:	40000400 	.word	0x40000400
 8008f3c:	40000800 	.word	0x40000800
 8008f40:	40000c00 	.word	0x40000c00
 8008f44:	00010007 	.word	0x00010007

08008f48 <HAL_TIM_PWM_Stop>:
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 ffb2 	bl	8009ec4 <TIM_CCxChannelCmd>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a3e      	ldr	r2, [pc, #248]	; (8009060 <HAL_TIM_PWM_Stop+0x118>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <HAL_TIM_PWM_Stop+0x4a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a3d      	ldr	r2, [pc, #244]	; (8009064 <HAL_TIM_PWM_Stop+0x11c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00e      	beq.n	8008f92 <HAL_TIM_PWM_Stop+0x4a>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a3b      	ldr	r2, [pc, #236]	; (8009068 <HAL_TIM_PWM_Stop+0x120>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_TIM_PWM_Stop+0x4a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a3a      	ldr	r2, [pc, #232]	; (800906c <HAL_TIM_PWM_Stop+0x124>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <HAL_TIM_PWM_Stop+0x4a>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a38      	ldr	r2, [pc, #224]	; (8009070 <HAL_TIM_PWM_Stop+0x128>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d101      	bne.n	8008f96 <HAL_TIM_PWM_Stop+0x4e>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <HAL_TIM_PWM_Stop+0x50>
 8008f96:	2300      	movs	r3, #0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d017      	beq.n	8008fcc <HAL_TIM_PWM_Stop+0x84>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6a1a      	ldr	r2, [r3, #32]
 8008fa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10f      	bne.n	8008fcc <HAL_TIM_PWM_Stop+0x84>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6a1a      	ldr	r2, [r3, #32]
 8008fb2:	f240 4344 	movw	r3, #1092	; 0x444
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d107      	bne.n	8008fcc <HAL_TIM_PWM_Stop+0x84>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fca:	645a      	str	r2, [r3, #68]	; 0x44
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6a1a      	ldr	r2, [r3, #32]
 8008fd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10f      	bne.n	8008ffc <HAL_TIM_PWM_Stop+0xb4>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a1a      	ldr	r2, [r3, #32]
 8008fe2:	f240 4344 	movw	r3, #1092	; 0x444
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d107      	bne.n	8008ffc <HAL_TIM_PWM_Stop+0xb4>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d104      	bne.n	800900c <HAL_TIM_PWM_Stop+0xc4>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800900a:	e023      	b.n	8009054 <HAL_TIM_PWM_Stop+0x10c>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b04      	cmp	r3, #4
 8009010:	d104      	bne.n	800901c <HAL_TIM_PWM_Stop+0xd4>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800901a:	e01b      	b.n	8009054 <HAL_TIM_PWM_Stop+0x10c>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b08      	cmp	r3, #8
 8009020:	d104      	bne.n	800902c <HAL_TIM_PWM_Stop+0xe4>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800902a:	e013      	b.n	8009054 <HAL_TIM_PWM_Stop+0x10c>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b0c      	cmp	r3, #12
 8009030:	d104      	bne.n	800903c <HAL_TIM_PWM_Stop+0xf4>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800903a:	e00b      	b.n	8009054 <HAL_TIM_PWM_Stop+0x10c>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b10      	cmp	r3, #16
 8009040:	d104      	bne.n	800904c <HAL_TIM_PWM_Stop+0x104>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800904a:	e003      	b.n	8009054 <HAL_TIM_PWM_Stop+0x10c>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009054:	2300      	movs	r3, #0
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	40012c00 	.word	0x40012c00
 8009064:	40013400 	.word	0x40013400
 8009068:	40014000 	.word	0x40014000
 800906c:	40014400 	.word	0x40014400
 8009070:	40014800 	.word	0x40014800

08009074 <HAL_TIM_IRQHandler>:
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b02      	cmp	r3, #2
 8009088:	d122      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x5c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b02      	cmp	r3, #2
 8009096:	d11b      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x5c>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f06f 0202 	mvn.w	r2, #2
 80090a0:	611a      	str	r2, [r3, #16]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	771a      	strb	r2, [r3, #28]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_TIM_IRQHandler+0x4a>
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fadc 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 80090bc:	e005      	b.n	80090ca <HAL_TIM_IRQHandler+0x56>
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 face 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fadf 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	771a      	strb	r2, [r3, #28]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d122      	bne.n	8009124 <HAL_TIM_IRQHandler+0xb0>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d11b      	bne.n	8009124 <HAL_TIM_IRQHandler+0xb0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f06f 0204 	mvn.w	r2, #4
 80090f4:	611a      	str	r2, [r3, #16]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	771a      	strb	r2, [r3, #28]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <HAL_TIM_IRQHandler+0x9e>
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fab2 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 8009110:	e005      	b.n	800911e <HAL_TIM_IRQHandler+0xaa>
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 faa4 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fab5 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	771a      	strb	r2, [r3, #28]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b08      	cmp	r3, #8
 8009130:	d122      	bne.n	8009178 <HAL_TIM_IRQHandler+0x104>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b08      	cmp	r3, #8
 800913e:	d11b      	bne.n	8009178 <HAL_TIM_IRQHandler+0x104>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0208 	mvn.w	r2, #8
 8009148:	611a      	str	r2, [r3, #16]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2204      	movs	r2, #4
 800914e:	771a      	strb	r2, [r3, #28]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_TIM_IRQHandler+0xf2>
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa88 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 8009164:	e005      	b.n	8009172 <HAL_TIM_IRQHandler+0xfe>
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fa7a 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fa8b 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	771a      	strb	r2, [r3, #28]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b10      	cmp	r3, #16
 8009184:	d122      	bne.n	80091cc <HAL_TIM_IRQHandler+0x158>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b10      	cmp	r3, #16
 8009192:	d11b      	bne.n	80091cc <HAL_TIM_IRQHandler+0x158>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f06f 0210 	mvn.w	r2, #16
 800919c:	611a      	str	r2, [r3, #16]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2208      	movs	r2, #8
 80091a2:	771a      	strb	r2, [r3, #28]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <HAL_TIM_IRQHandler+0x146>
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa5e 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 80091b8:	e005      	b.n	80091c6 <HAL_TIM_IRQHandler+0x152>
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa50 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa61 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	771a      	strb	r2, [r3, #28]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d10e      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x184>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d107      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x184>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0201 	mvn.w	r2, #1
 80091f0:	611a      	str	r2, [r3, #16]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7f9 fe02 	bl	8002dfc <HAL_TIM_PeriodElapsedCallback>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009202:	2b80      	cmp	r3, #128	; 0x80
 8009204:	d10e      	bne.n	8009224 <HAL_TIM_IRQHandler+0x1b0>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009210:	2b80      	cmp	r3, #128	; 0x80
 8009212:	d107      	bne.n	8009224 <HAL_TIM_IRQHandler+0x1b0>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800921c:	611a      	str	r2, [r3, #16]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 ff08 	bl	800a034 <HAL_TIMEx_BreakCallback>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009232:	d10e      	bne.n	8009252 <HAL_TIM_IRQHandler+0x1de>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923e:	2b80      	cmp	r3, #128	; 0x80
 8009240:	d107      	bne.n	8009252 <HAL_TIM_IRQHandler+0x1de>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800924a:	611a      	str	r2, [r3, #16]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fefb 	bl	800a048 <HAL_TIMEx_Break2Callback>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d10e      	bne.n	800927e <HAL_TIM_IRQHandler+0x20a>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926a:	2b40      	cmp	r3, #64	; 0x40
 800926c:	d107      	bne.n	800927e <HAL_TIM_IRQHandler+0x20a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009276:	611a      	str	r2, [r3, #16]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa0f 	bl	800969c <HAL_TIM_TriggerCallback>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b20      	cmp	r3, #32
 800928a:	d10e      	bne.n	80092aa <HAL_TIM_IRQHandler+0x236>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b20      	cmp	r3, #32
 8009298:	d107      	bne.n	80092aa <HAL_TIM_IRQHandler+0x236>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f06f 0220 	mvn.w	r2, #32
 80092a2:	611a      	str	r2, [r3, #16]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 febb 	bl	800a020 <HAL_TIMEx_CommutCallback>
 80092aa:	bf00      	nop
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <HAL_TIM_PWM_ConfigChannel>:
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d101      	bne.n	80092ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80092ca:	2302      	movs	r3, #2
 80092cc:	e0fd      	b.n	80094ca <HAL_TIM_PWM_ConfigChannel+0x216>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b14      	cmp	r3, #20
 80092da:	f200 80f0 	bhi.w	80094be <HAL_TIM_PWM_ConfigChannel+0x20a>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009339 	.word	0x08009339
 80092e8:	080094bf 	.word	0x080094bf
 80092ec:	080094bf 	.word	0x080094bf
 80092f0:	080094bf 	.word	0x080094bf
 80092f4:	08009379 	.word	0x08009379
 80092f8:	080094bf 	.word	0x080094bf
 80092fc:	080094bf 	.word	0x080094bf
 8009300:	080094bf 	.word	0x080094bf
 8009304:	080093bb 	.word	0x080093bb
 8009308:	080094bf 	.word	0x080094bf
 800930c:	080094bf 	.word	0x080094bf
 8009310:	080094bf 	.word	0x080094bf
 8009314:	080093fb 	.word	0x080093fb
 8009318:	080094bf 	.word	0x080094bf
 800931c:	080094bf 	.word	0x080094bf
 8009320:	080094bf 	.word	0x080094bf
 8009324:	0800943d 	.word	0x0800943d
 8009328:	080094bf 	.word	0x080094bf
 800932c:	080094bf 	.word	0x080094bf
 8009330:	080094bf 	.word	0x080094bf
 8009334:	0800947d 	.word	0x0800947d
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	4618      	mov	r0, r3
 8009340:	f000 fa50 	bl	80097e4 <TIM_OC1_SetConfig>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699a      	ldr	r2, [r3, #24]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0208 	orr.w	r2, r2, #8
 8009352:	619a      	str	r2, [r3, #24]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	699a      	ldr	r2, [r3, #24]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0204 	bic.w	r2, r2, #4
 8009362:	619a      	str	r2, [r3, #24]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6999      	ldr	r1, [r3, #24]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	691a      	ldr	r2, [r3, #16]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	619a      	str	r2, [r3, #24]
 8009376:	e0a3      	b.n	80094c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fac0 	bl	8009904 <TIM_OC2_SetConfig>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009392:	619a      	str	r2, [r3, #24]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093a2:	619a      	str	r2, [r3, #24]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6999      	ldr	r1, [r3, #24]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	021a      	lsls	r2, r3, #8
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	619a      	str	r2, [r3, #24]
 80093b8:	e082      	b.n	80094c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fb29 	bl	8009a18 <TIM_OC3_SetConfig>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69da      	ldr	r2, [r3, #28]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f042 0208 	orr.w	r2, r2, #8
 80093d4:	61da      	str	r2, [r3, #28]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	69da      	ldr	r2, [r3, #28]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0204 	bic.w	r2, r2, #4
 80093e4:	61da      	str	r2, [r3, #28]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69d9      	ldr	r1, [r3, #28]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	61da      	str	r2, [r3, #28]
 80093f8:	e062      	b.n	80094c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fb91 	bl	8009b28 <TIM_OC4_SetConfig>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69da      	ldr	r2, [r3, #28]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009414:	61da      	str	r2, [r3, #28]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009424:	61da      	str	r2, [r3, #28]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69d9      	ldr	r1, [r3, #28]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	021a      	lsls	r2, r3, #8
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	61da      	str	r2, [r3, #28]
 800943a:	e041      	b.n	80094c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fbda 	bl	8009bfc <TIM_OC5_SetConfig>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0208 	orr.w	r2, r2, #8
 8009456:	655a      	str	r2, [r3, #84]	; 0x54
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0204 	bic.w	r2, r2, #4
 8009466:	655a      	str	r2, [r3, #84]	; 0x54
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	655a      	str	r2, [r3, #84]	; 0x54
 800947a:	e021      	b.n	80094c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fc1e 	bl	8009cc4 <TIM_OC6_SetConfig>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009496:	655a      	str	r2, [r3, #84]	; 0x54
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a6:	655a      	str	r2, [r3, #84]	; 0x54
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	021a      	lsls	r2, r3, #8
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	655a      	str	r2, [r3, #84]	; 0x54
 80094bc:	e000      	b.n	80094c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
 80094be:	bf00      	nop
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094c8:	2300      	movs	r3, #0
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop

080094d4 <HAL_TIM_ConfigClockSource>:
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <HAL_TIM_ConfigClockSource+0x18>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e0b5      	b.n	8009658 <HAL_TIM_ConfigClockSource+0x184>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800950a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	609a      	str	r2, [r3, #8]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009528:	d03e      	beq.n	80095a8 <HAL_TIM_ConfigClockSource+0xd4>
 800952a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800952e:	f200 8087 	bhi.w	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009536:	f000 8085 	beq.w	8009644 <HAL_TIM_ConfigClockSource+0x170>
 800953a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953e:	d87f      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009540:	2b70      	cmp	r3, #112	; 0x70
 8009542:	d01a      	beq.n	800957a <HAL_TIM_ConfigClockSource+0xa6>
 8009544:	2b70      	cmp	r3, #112	; 0x70
 8009546:	d87b      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009548:	2b60      	cmp	r3, #96	; 0x60
 800954a:	d050      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x11a>
 800954c:	2b60      	cmp	r3, #96	; 0x60
 800954e:	d877      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009550:	2b50      	cmp	r3, #80	; 0x50
 8009552:	d03c      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0xfa>
 8009554:	2b50      	cmp	r3, #80	; 0x50
 8009556:	d873      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009558:	2b40      	cmp	r3, #64	; 0x40
 800955a:	d058      	beq.n	800960e <HAL_TIM_ConfigClockSource+0x13a>
 800955c:	2b40      	cmp	r3, #64	; 0x40
 800955e:	d86f      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009560:	2b30      	cmp	r3, #48	; 0x30
 8009562:	d064      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x15a>
 8009564:	2b30      	cmp	r3, #48	; 0x30
 8009566:	d86b      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009568:	2b20      	cmp	r3, #32
 800956a:	d060      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x15a>
 800956c:	2b20      	cmp	r3, #32
 800956e:	d867      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d05c      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x15a>
 8009574:	2b10      	cmp	r3, #16
 8009576:	d05a      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x15a>
 8009578:	e062      	b.n	8009640 <HAL_TIM_ConfigClockSource+0x16c>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	6899      	ldr	r1, [r3, #8]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f000 fc7b 	bl	8009e84 <TIM_ETR_SetConfig>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	609a      	str	r2, [r3, #8]
 80095a6:	e04e      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x172>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	6899      	ldr	r1, [r3, #8]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f000 fc64 	bl	8009e84 <TIM_ETR_SetConfig>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095ca:	609a      	str	r2, [r3, #8]
 80095cc:	e03b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x172>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6859      	ldr	r1, [r3, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	461a      	mov	r2, r3
 80095dc:	f000 fbd8 	bl	8009d90 <TIM_TI1_ConfigInputStage>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2150      	movs	r1, #80	; 0x50
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fc31 	bl	8009e4e <TIM_ITRx_SetConfig>
 80095ec:	e02b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x172>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6859      	ldr	r1, [r3, #4]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	461a      	mov	r2, r3
 80095fc:	f000 fbf7 	bl	8009dee <TIM_TI2_ConfigInputStage>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2160      	movs	r1, #96	; 0x60
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fc21 	bl	8009e4e <TIM_ITRx_SetConfig>
 800960c:	e01b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x172>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	6859      	ldr	r1, [r3, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	461a      	mov	r2, r3
 800961c:	f000 fbb8 	bl	8009d90 <TIM_TI1_ConfigInputStage>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2140      	movs	r1, #64	; 0x40
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fc11 	bl	8009e4e <TIM_ITRx_SetConfig>
 800962c:	e00b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x172>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f000 fc08 	bl	8009e4e <TIM_ITRx_SetConfig>
 800963e:	e002      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x172>
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x172>
 8009644:	bf00      	nop
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009656:	2300      	movs	r3, #0
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_TIM_OC_DelayElapsedCallback>:
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_TIM_IC_CaptureCallback>:
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_TIM_TriggerCallback>:
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <TIM_Base_SetConfig>:
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a40      	ldr	r2, [pc, #256]	; (80097c4 <TIM_Base_SetConfig+0x114>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d013      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ce:	d00f      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a3d      	ldr	r2, [pc, #244]	; (80097c8 <TIM_Base_SetConfig+0x118>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00b      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a3c      	ldr	r2, [pc, #240]	; (80097cc <TIM_Base_SetConfig+0x11c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d007      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a3b      	ldr	r2, [pc, #236]	; (80097d0 <TIM_Base_SetConfig+0x120>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a3a      	ldr	r2, [pc, #232]	; (80097d4 <TIM_Base_SetConfig+0x124>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d108      	bne.n	8009702 <TIM_Base_SetConfig+0x52>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f6:	60fb      	str	r3, [r7, #12]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a2f      	ldr	r2, [pc, #188]	; (80097c4 <TIM_Base_SetConfig+0x114>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d01f      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009710:	d01b      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a2c      	ldr	r2, [pc, #176]	; (80097c8 <TIM_Base_SetConfig+0x118>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d017      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a2b      	ldr	r2, [pc, #172]	; (80097cc <TIM_Base_SetConfig+0x11c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d013      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a2a      	ldr	r2, [pc, #168]	; (80097d0 <TIM_Base_SetConfig+0x120>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00f      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a29      	ldr	r2, [pc, #164]	; (80097d4 <TIM_Base_SetConfig+0x124>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00b      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a28      	ldr	r2, [pc, #160]	; (80097d8 <TIM_Base_SetConfig+0x128>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d007      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a27      	ldr	r2, [pc, #156]	; (80097dc <TIM_Base_SetConfig+0x12c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d003      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a26      	ldr	r2, [pc, #152]	; (80097e0 <TIM_Base_SetConfig+0x130>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d108      	bne.n	800975c <TIM_Base_SetConfig+0xac>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	62da      	str	r2, [r3, #44]	; 0x2c
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	629a      	str	r2, [r3, #40]	; 0x28
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a10      	ldr	r2, [pc, #64]	; (80097c4 <TIM_Base_SetConfig+0x114>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00f      	beq.n	80097a8 <TIM_Base_SetConfig+0xf8>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a12      	ldr	r2, [pc, #72]	; (80097d4 <TIM_Base_SetConfig+0x124>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d00b      	beq.n	80097a8 <TIM_Base_SetConfig+0xf8>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a11      	ldr	r2, [pc, #68]	; (80097d8 <TIM_Base_SetConfig+0x128>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d007      	beq.n	80097a8 <TIM_Base_SetConfig+0xf8>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a10      	ldr	r2, [pc, #64]	; (80097dc <TIM_Base_SetConfig+0x12c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d003      	beq.n	80097a8 <TIM_Base_SetConfig+0xf8>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a0f      	ldr	r2, [pc, #60]	; (80097e0 <TIM_Base_SetConfig+0x130>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d103      	bne.n	80097b0 <TIM_Base_SetConfig+0x100>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	691a      	ldr	r2, [r3, #16]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	631a      	str	r2, [r3, #48]	; 0x30
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	615a      	str	r2, [r3, #20]
 80097b6:	bf00      	nop
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	40012c00 	.word	0x40012c00
 80097c8:	40000400 	.word	0x40000400
 80097cc:	40000800 	.word	0x40000800
 80097d0:	40000c00 	.word	0x40000c00
 80097d4:	40013400 	.word	0x40013400
 80097d8:	40014000 	.word	0x40014000
 80097dc:	40014400 	.word	0x40014400
 80097e0:	40014800 	.word	0x40014800

080097e4 <TIM_OC1_SetConfig>:
 80097e4:	b480      	push	{r7}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	f023 0201 	bic.w	r2, r3, #1
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	621a      	str	r2, [r3, #32]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4313      	orrs	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f023 0302 	bic.w	r3, r3, #2
 8009830:	617b      	str	r3, [r7, #20]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a2c      	ldr	r2, [pc, #176]	; (80098f0 <TIM_OC1_SetConfig+0x10c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00f      	beq.n	8009864 <TIM_OC1_SetConfig+0x80>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a2b      	ldr	r2, [pc, #172]	; (80098f4 <TIM_OC1_SetConfig+0x110>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00b      	beq.n	8009864 <TIM_OC1_SetConfig+0x80>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a2a      	ldr	r2, [pc, #168]	; (80098f8 <TIM_OC1_SetConfig+0x114>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d007      	beq.n	8009864 <TIM_OC1_SetConfig+0x80>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a29      	ldr	r2, [pc, #164]	; (80098fc <TIM_OC1_SetConfig+0x118>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_OC1_SetConfig+0x80>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a28      	ldr	r2, [pc, #160]	; (8009900 <TIM_OC1_SetConfig+0x11c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d10c      	bne.n	800987e <TIM_OC1_SetConfig+0x9a>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f023 0308 	bic.w	r3, r3, #8
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f023 0304 	bic.w	r3, r3, #4
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <TIM_OC1_SetConfig+0x10c>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00f      	beq.n	80098a6 <TIM_OC1_SetConfig+0xc2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a1a      	ldr	r2, [pc, #104]	; (80098f4 <TIM_OC1_SetConfig+0x110>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00b      	beq.n	80098a6 <TIM_OC1_SetConfig+0xc2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a19      	ldr	r2, [pc, #100]	; (80098f8 <TIM_OC1_SetConfig+0x114>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d007      	beq.n	80098a6 <TIM_OC1_SetConfig+0xc2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a18      	ldr	r2, [pc, #96]	; (80098fc <TIM_OC1_SetConfig+0x118>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d003      	beq.n	80098a6 <TIM_OC1_SetConfig+0xc2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a17      	ldr	r2, [pc, #92]	; (8009900 <TIM_OC1_SetConfig+0x11c>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d111      	bne.n	80098ca <TIM_OC1_SetConfig+0xe6>
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098b4:	613b      	str	r3, [r7, #16]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	605a      	str	r2, [r3, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	619a      	str	r2, [r3, #24]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	635a      	str	r2, [r3, #52]	; 0x34
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	621a      	str	r2, [r3, #32]
 80098e4:	bf00      	nop
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	40012c00 	.word	0x40012c00
 80098f4:	40013400 	.word	0x40013400
 80098f8:	40014000 	.word	0x40014000
 80098fc:	40014400 	.word	0x40014400
 8009900:	40014800 	.word	0x40014800

08009904 <TIM_OC2_SetConfig>:
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f023 0210 	bic.w	r2, r3, #16
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	621a      	str	r2, [r3, #32]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f023 0320 	bic.w	r3, r3, #32
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4313      	orrs	r3, r2
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a28      	ldr	r2, [pc, #160]	; (8009a04 <TIM_OC2_SetConfig+0x100>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d003      	beq.n	8009970 <TIM_OC2_SetConfig+0x6c>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a27      	ldr	r2, [pc, #156]	; (8009a08 <TIM_OC2_SetConfig+0x104>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d10d      	bne.n	800998c <TIM_OC2_SetConfig+0x88>
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	011b      	lsls	r3, r3, #4
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <TIM_OC2_SetConfig+0x100>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d00f      	beq.n	80099b4 <TIM_OC2_SetConfig+0xb0>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a1c      	ldr	r2, [pc, #112]	; (8009a08 <TIM_OC2_SetConfig+0x104>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00b      	beq.n	80099b4 <TIM_OC2_SetConfig+0xb0>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a1b      	ldr	r2, [pc, #108]	; (8009a0c <TIM_OC2_SetConfig+0x108>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d007      	beq.n	80099b4 <TIM_OC2_SetConfig+0xb0>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a1a      	ldr	r2, [pc, #104]	; (8009a10 <TIM_OC2_SetConfig+0x10c>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d003      	beq.n	80099b4 <TIM_OC2_SetConfig+0xb0>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a19      	ldr	r2, [pc, #100]	; (8009a14 <TIM_OC2_SetConfig+0x110>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d113      	bne.n	80099dc <TIM_OC2_SetConfig+0xd8>
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ba:	613b      	str	r3, [r7, #16]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	4313      	orrs	r3, r2
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	605a      	str	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	619a      	str	r2, [r3, #24]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	621a      	str	r2, [r3, #32]
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	40012c00 	.word	0x40012c00
 8009a08:	40013400 	.word	0x40013400
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40014400 	.word	0x40014400
 8009a14:	40014800 	.word	0x40014800

08009a18 <TIM_OC3_SetConfig>:
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	621a      	str	r2, [r3, #32]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a64:	617b      	str	r3, [r7, #20]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a27      	ldr	r2, [pc, #156]	; (8009b14 <TIM_OC3_SetConfig+0xfc>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d003      	beq.n	8009a82 <TIM_OC3_SetConfig+0x6a>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a26      	ldr	r2, [pc, #152]	; (8009b18 <TIM_OC3_SetConfig+0x100>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d10d      	bne.n	8009a9e <TIM_OC3_SetConfig+0x86>
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	021b      	lsls	r3, r3, #8
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a1c      	ldr	r2, [pc, #112]	; (8009b14 <TIM_OC3_SetConfig+0xfc>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d00f      	beq.n	8009ac6 <TIM_OC3_SetConfig+0xae>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a1b      	ldr	r2, [pc, #108]	; (8009b18 <TIM_OC3_SetConfig+0x100>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d00b      	beq.n	8009ac6 <TIM_OC3_SetConfig+0xae>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a1a      	ldr	r2, [pc, #104]	; (8009b1c <TIM_OC3_SetConfig+0x104>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d007      	beq.n	8009ac6 <TIM_OC3_SetConfig+0xae>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a19      	ldr	r2, [pc, #100]	; (8009b20 <TIM_OC3_SetConfig+0x108>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d003      	beq.n	8009ac6 <TIM_OC3_SetConfig+0xae>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a18      	ldr	r2, [pc, #96]	; (8009b24 <TIM_OC3_SetConfig+0x10c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d113      	bne.n	8009aee <TIM_OC3_SetConfig+0xd6>
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	011b      	lsls	r3, r3, #4
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	605a      	str	r2, [r3, #4]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	61da      	str	r2, [r3, #28]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	621a      	str	r2, [r3, #32]
 8009b08:	bf00      	nop
 8009b0a:	371c      	adds	r7, #28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	40012c00 	.word	0x40012c00
 8009b18:	40013400 	.word	0x40013400
 8009b1c:	40014000 	.word	0x40014000
 8009b20:	40014400 	.word	0x40014400
 8009b24:	40014800 	.word	0x40014800

08009b28 <TIM_OC4_SetConfig>:
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	621a      	str	r2, [r3, #32]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	613b      	str	r3, [r7, #16]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	021b      	lsls	r3, r3, #8
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	031b      	lsls	r3, r3, #12
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <TIM_OC4_SetConfig+0xc0>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d00f      	beq.n	8009bac <TIM_OC4_SetConfig+0x84>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a17      	ldr	r2, [pc, #92]	; (8009bec <TIM_OC4_SetConfig+0xc4>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d00b      	beq.n	8009bac <TIM_OC4_SetConfig+0x84>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a16      	ldr	r2, [pc, #88]	; (8009bf0 <TIM_OC4_SetConfig+0xc8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d007      	beq.n	8009bac <TIM_OC4_SetConfig+0x84>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a15      	ldr	r2, [pc, #84]	; (8009bf4 <TIM_OC4_SetConfig+0xcc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d003      	beq.n	8009bac <TIM_OC4_SetConfig+0x84>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a14      	ldr	r2, [pc, #80]	; (8009bf8 <TIM_OC4_SetConfig+0xd0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d109      	bne.n	8009bc0 <TIM_OC4_SetConfig+0x98>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	019b      	lsls	r3, r3, #6
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	605a      	str	r2, [r3, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	61da      	str	r2, [r3, #28]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	641a      	str	r2, [r3, #64]	; 0x40
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	621a      	str	r2, [r3, #32]
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	40012c00 	.word	0x40012c00
 8009bec:	40013400 	.word	0x40013400
 8009bf0:	40014000 	.word	0x40014000
 8009bf4:	40014400 	.word	0x40014400
 8009bf8:	40014800 	.word	0x40014800

08009bfc <TIM_OC5_SetConfig>:
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	621a      	str	r2, [r3, #32]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	613b      	str	r3, [r7, #16]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	041b      	lsls	r3, r3, #16
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <TIM_OC5_SetConfig+0xb4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00f      	beq.n	8009c76 <TIM_OC5_SetConfig+0x7a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a16      	ldr	r2, [pc, #88]	; (8009cb4 <TIM_OC5_SetConfig+0xb8>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d00b      	beq.n	8009c76 <TIM_OC5_SetConfig+0x7a>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a15      	ldr	r2, [pc, #84]	; (8009cb8 <TIM_OC5_SetConfig+0xbc>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d007      	beq.n	8009c76 <TIM_OC5_SetConfig+0x7a>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a14      	ldr	r2, [pc, #80]	; (8009cbc <TIM_OC5_SetConfig+0xc0>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d003      	beq.n	8009c76 <TIM_OC5_SetConfig+0x7a>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a13      	ldr	r2, [pc, #76]	; (8009cc0 <TIM_OC5_SetConfig+0xc4>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d109      	bne.n	8009c8a <TIM_OC5_SetConfig+0x8e>
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	021b      	lsls	r3, r3, #8
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	605a      	str	r2, [r3, #4]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	655a      	str	r2, [r3, #84]	; 0x54
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	621a      	str	r2, [r3, #32]
 8009ca4:	bf00      	nop
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	40012c00 	.word	0x40012c00
 8009cb4:	40013400 	.word	0x40013400
 8009cb8:	40014000 	.word	0x40014000
 8009cbc:	40014400 	.word	0x40014400
 8009cc0:	40014800 	.word	0x40014800

08009cc4 <TIM_OC6_SetConfig>:
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	621a      	str	r2, [r3, #32]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	051b      	lsls	r3, r3, #20
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	613b      	str	r3, [r7, #16]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a18      	ldr	r2, [pc, #96]	; (8009d7c <TIM_OC6_SetConfig+0xb8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d00f      	beq.n	8009d40 <TIM_OC6_SetConfig+0x7c>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <TIM_OC6_SetConfig+0xbc>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00b      	beq.n	8009d40 <TIM_OC6_SetConfig+0x7c>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a16      	ldr	r2, [pc, #88]	; (8009d84 <TIM_OC6_SetConfig+0xc0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d007      	beq.n	8009d40 <TIM_OC6_SetConfig+0x7c>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a15      	ldr	r2, [pc, #84]	; (8009d88 <TIM_OC6_SetConfig+0xc4>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d003      	beq.n	8009d40 <TIM_OC6_SetConfig+0x7c>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a14      	ldr	r2, [pc, #80]	; (8009d8c <TIM_OC6_SetConfig+0xc8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d109      	bne.n	8009d54 <TIM_OC6_SetConfig+0x90>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	029b      	lsls	r3, r3, #10
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	605a      	str	r2, [r3, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	655a      	str	r2, [r3, #84]	; 0x54
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	621a      	str	r2, [r3, #32]
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	40012c00 	.word	0x40012c00
 8009d80:	40013400 	.word	0x40013400
 8009d84:	40014000 	.word	0x40014000
 8009d88:	40014400 	.word	0x40014400
 8009d8c:	40014800 	.word	0x40014800

08009d90 <TIM_TI1_ConfigInputStage>:
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	617b      	str	r3, [r7, #20]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	f023 0201 	bic.w	r2, r3, #1
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	621a      	str	r2, [r3, #32]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	613b      	str	r3, [r7, #16]
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	613b      	str	r3, [r7, #16]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f023 030a 	bic.w	r3, r3, #10
 8009dcc:	617b      	str	r3, [r7, #20]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	619a      	str	r2, [r3, #24]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	621a      	str	r2, [r3, #32]
 8009de2:	bf00      	nop
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <TIM_TI2_ConfigInputStage>:
 8009dee:	b480      	push	{r7}
 8009df0:	b087      	sub	sp, #28
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f023 0210 	bic.w	r2, r3, #16
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	621a      	str	r2, [r3, #32]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	613b      	str	r3, [r7, #16]
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e18:	617b      	str	r3, [r7, #20]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	031b      	lsls	r3, r3, #12
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e2a:	613b      	str	r3, [r7, #16]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	613b      	str	r3, [r7, #16]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	619a      	str	r2, [r3, #24]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	621a      	str	r2, [r3, #32]
 8009e42:	bf00      	nop
 8009e44:	371c      	adds	r7, #28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <TIM_ITRx_SetConfig>:
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e64:	60fb      	str	r3, [r7, #12]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	f043 0307 	orr.w	r3, r3, #7
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	609a      	str	r2, [r3, #8]
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <TIM_ETR_SetConfig>:
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e9e:	617b      	str	r3, [r7, #20]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	021a      	lsls	r2, r3, #8
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	617b      	str	r3, [r7, #20]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	609a      	str	r2, [r3, #8]
 8009eb8:	bf00      	nop
 8009eba:	371c      	adds	r7, #28
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <TIM_CCxChannelCmd>:
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f003 031f 	and.w	r3, r3, #31
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a1a      	ldr	r2, [r3, #32]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	43db      	mvns	r3, r3
 8009ee6:	401a      	ands	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	621a      	str	r2, [r3, #32]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a1a      	ldr	r2, [r3, #32]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f003 031f 	and.w	r3, r3, #31
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8009efc:	431a      	orrs	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	621a      	str	r2, [r3, #32]
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <HAL_TIMEx_MasterConfigSynchronization>:
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d101      	bne.n	8009f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f24:	2302      	movs	r3, #2
 8009f26:	e068      	b.n	8009ffa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	60bb      	str	r3, [r7, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a2e      	ldr	r2, [pc, #184]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d004      	beq.n	8009f5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a2d      	ldr	r2, [pc, #180]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d108      	bne.n	8009f6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	605a      	str	r2, [r3, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1e      	ldr	r2, [pc, #120]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d01d      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9a:	d018      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1b      	ldr	r2, [pc, #108]	; (800a010 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d013      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a1a      	ldr	r2, [pc, #104]	; (800a014 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d00e      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a18      	ldr	r2, [pc, #96]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d009      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a13      	ldr	r2, [pc, #76]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d004      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a14      	ldr	r2, [pc, #80]	; (800a01c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d10c      	bne.n	8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fd4:	60bb      	str	r3, [r7, #8]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	60bb      	str	r3, [r7, #8]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	609a      	str	r2, [r3, #8]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	40012c00 	.word	0x40012c00
 800a00c:	40013400 	.word	0x40013400
 800a010:	40000400 	.word	0x40000400
 800a014:	40000800 	.word	0x40000800
 800a018:	40000c00 	.word	0x40000c00
 800a01c:	40014000 	.word	0x40014000

0800a020 <HAL_TIMEx_CommutCallback>:
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_TIMEx_BreakCallback>:
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_TIMEx_Break2Callback>:
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <LL_GPIO_SetPinMode>:
 800a05c:	b480      	push	{r7}
 800a05e:	b08b      	sub	sp, #44	; 0x2c
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	fa93 f3a3 	rbit	r3, r3
 800a076:	613b      	str	r3, [r7, #16]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	61bb      	str	r3, [r7, #24]
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <LL_GPIO_SetPinMode+0x2a>
 800a082:	2320      	movs	r3, #32
 800a084:	e003      	b.n	800a08e <LL_GPIO_SetPinMode+0x32>
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	fab3 f383 	clz	r3, r3
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	2103      	movs	r1, #3
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	43db      	mvns	r3, r3
 800a098:	401a      	ands	r2, r3
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	623b      	str	r3, [r7, #32]
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	fa93 f3a3 	rbit	r3, r3
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <LL_GPIO_SetPinMode+0x58>
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	e003      	b.n	800a0bc <LL_GPIO_SetPinMode+0x60>
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	fab3 f383 	clz	r3, r3
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	bf00      	nop
 800a0cc:	372c      	adds	r7, #44	; 0x2c
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <LL_GPIO_SetPinOutputType>:
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	607a      	str	r2, [r7, #4]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	43db      	mvns	r3, r3
 800a0ea:	401a      	ands	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	605a      	str	r2, [r3, #4]
 800a0fa:	bf00      	nop
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <LL_GPIO_SetPinSpeed>:
 800a106:	b480      	push	{r7}
 800a108:	b08b      	sub	sp, #44	; 0x2c
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	fa93 f3a3 	rbit	r3, r3
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	61bb      	str	r3, [r7, #24]
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <LL_GPIO_SetPinSpeed+0x2a>
 800a12c:	2320      	movs	r3, #32
 800a12e:	e003      	b.n	800a138 <LL_GPIO_SetPinSpeed+0x32>
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	fab3 f383 	clz	r3, r3
 800a136:	b2db      	uxtb	r3, r3
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	2103      	movs	r1, #3
 800a13c:	fa01 f303 	lsl.w	r3, r1, r3
 800a140:	43db      	mvns	r3, r3
 800a142:	401a      	ands	r2, r3
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	623b      	str	r3, [r7, #32]
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	fa93 f3a3 	rbit	r3, r3
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <LL_GPIO_SetPinSpeed+0x58>
 800a15a:	2320      	movs	r3, #32
 800a15c:	e003      	b.n	800a166 <LL_GPIO_SetPinSpeed+0x60>
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	fab3 f383 	clz	r3, r3
 800a164:	b2db      	uxtb	r3, r3
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	fa01 f303 	lsl.w	r3, r1, r3
 800a16e:	431a      	orrs	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	609a      	str	r2, [r3, #8]
 800a174:	bf00      	nop
 800a176:	372c      	adds	r7, #44	; 0x2c
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <LL_GPIO_SetPinPull>:
 800a180:	b480      	push	{r7}
 800a182:	b08b      	sub	sp, #44	; 0x2c
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	fa93 f3a3 	rbit	r3, r3
 800a19a:	613b      	str	r3, [r7, #16]
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	61bb      	str	r3, [r7, #24]
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <LL_GPIO_SetPinPull+0x2a>
 800a1a6:	2320      	movs	r3, #32
 800a1a8:	e003      	b.n	800a1b2 <LL_GPIO_SetPinPull+0x32>
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	fab3 f383 	clz	r3, r3
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	2103      	movs	r1, #3
 800a1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ba:	43db      	mvns	r3, r3
 800a1bc:	401a      	ands	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	623b      	str	r3, [r7, #32]
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	fa93 f3a3 	rbit	r3, r3
 800a1c8:	61fb      	str	r3, [r7, #28]
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <LL_GPIO_SetPinPull+0x58>
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	e003      	b.n	800a1e0 <LL_GPIO_SetPinPull+0x60>
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	fab3 f383 	clz	r3, r3
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	60da      	str	r2, [r3, #12]
 800a1ee:	bf00      	nop
 800a1f0:	372c      	adds	r7, #44	; 0x2c
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <LL_GPIO_SetAFPin_0_7>:
 800a1fa:	b480      	push	{r7}
 800a1fc:	b08b      	sub	sp, #44	; 0x2c
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	607a      	str	r2, [r7, #4]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1a      	ldr	r2, [r3, #32]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	fa93 f3a3 	rbit	r3, r3
 800a214:	613b      	str	r3, [r7, #16]
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <LL_GPIO_SetAFPin_0_7+0x2a>
 800a220:	2320      	movs	r3, #32
 800a222:	e003      	b.n	800a22c <LL_GPIO_SetAFPin_0_7+0x32>
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	fab3 f383 	clz	r3, r3
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	210f      	movs	r1, #15
 800a230:	fa01 f303 	lsl.w	r3, r1, r3
 800a234:	43db      	mvns	r3, r3
 800a236:	401a      	ands	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	623b      	str	r3, [r7, #32]
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	fa93 f3a3 	rbit	r3, r3
 800a242:	61fb      	str	r3, [r7, #28]
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <LL_GPIO_SetAFPin_0_7+0x58>
 800a24e:	2320      	movs	r3, #32
 800a250:	e003      	b.n	800a25a <LL_GPIO_SetAFPin_0_7+0x60>
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	fab3 f383 	clz	r3, r3
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	fa01 f303 	lsl.w	r3, r1, r3
 800a262:	431a      	orrs	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	621a      	str	r2, [r3, #32]
 800a268:	bf00      	nop
 800a26a:	372c      	adds	r7, #44	; 0x2c
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <LL_GPIO_SetAFPin_8_15>:
 800a274:	b480      	push	{r7}
 800a276:	b08b      	sub	sp, #44	; 0x2c
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	0a1b      	lsrs	r3, r3, #8
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	fa93 f3a3 	rbit	r3, r3
 800a290:	613b      	str	r3, [r7, #16]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	61bb      	str	r3, [r7, #24]
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <LL_GPIO_SetAFPin_8_15+0x2c>
 800a29c:	2320      	movs	r3, #32
 800a29e:	e003      	b.n	800a2a8 <LL_GPIO_SetAFPin_8_15+0x34>
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	fab3 f383 	clz	r3, r3
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	210f      	movs	r1, #15
 800a2ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b0:	43db      	mvns	r3, r3
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	623b      	str	r3, [r7, #32]
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	fa93 f3a3 	rbit	r3, r3
 800a2c0:	61fb      	str	r3, [r7, #28]
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <LL_GPIO_SetAFPin_8_15+0x5c>
 800a2cc:	2320      	movs	r3, #32
 800a2ce:	e003      	b.n	800a2d8 <LL_GPIO_SetAFPin_8_15+0x64>
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	fab3 f383 	clz	r3, r3
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	625a      	str	r2, [r3, #36]	; 0x24
 800a2e6:	bf00      	nop
 800a2e8:	372c      	adds	r7, #44	; 0x2c
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <LL_GPIO_Init>:
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b088      	sub	sp, #32
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	fa93 f3a3 	rbit	r3, r3
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	617b      	str	r3, [r7, #20]
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <LL_GPIO_Init+0x26>
 800a314:	2320      	movs	r3, #32
 800a316:	e003      	b.n	800a320 <LL_GPIO_Init+0x2e>
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	fab3 f383 	clz	r3, r3
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	e048      	b.n	800a3b6 <LL_GPIO_Init+0xc4>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	2101      	movs	r1, #1
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	fa01 f303 	lsl.w	r3, r1, r3
 800a330:	4013      	ands	r3, r2
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d03a      	beq.n	800a3b0 <LL_GPIO_Init+0xbe>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d003      	beq.n	800a34a <LL_GPIO_Init+0x58>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	2b02      	cmp	r3, #2
 800a348:	d10e      	bne.n	800a368 <LL_GPIO_Init+0x76>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	461a      	mov	r2, r3
 800a350:	69b9      	ldr	r1, [r7, #24]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff fed7 	bl	800a106 <LL_GPIO_SetPinSpeed>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	6819      	ldr	r1, [r3, #0]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	461a      	mov	r2, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7ff feb7 	bl	800a0d6 <LL_GPIO_SetPinOutputType>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	461a      	mov	r2, r3
 800a36e:	69b9      	ldr	r1, [r7, #24]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff ff05 	bl	800a180 <LL_GPIO_SetPinPull>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d111      	bne.n	800a3a2 <LL_GPIO_Init+0xb0>
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2bff      	cmp	r3, #255	; 0xff
 800a382:	d807      	bhi.n	800a394 <LL_GPIO_Init+0xa2>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	461a      	mov	r2, r3
 800a38a:	69b9      	ldr	r1, [r7, #24]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff ff34 	bl	800a1fa <LL_GPIO_SetAFPin_0_7>
 800a392:	e006      	b.n	800a3a2 <LL_GPIO_Init+0xb0>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	461a      	mov	r2, r3
 800a39a:	69b9      	ldr	r1, [r7, #24]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff ff69 	bl	800a274 <LL_GPIO_SetAFPin_8_15>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	69b9      	ldr	r1, [r7, #24]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fe56 	bl	800a05c <LL_GPIO_SetPinMode>
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	61fb      	str	r3, [r7, #28]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1af      	bne.n	800a324 <LL_GPIO_Init+0x32>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3720      	adds	r7, #32
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <LL_RCC_HSI_IsReady>:
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <LL_RCC_HSI_IsReady+0x24>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e0:	d101      	bne.n	800a3e6 <LL_RCC_HSI_IsReady+0x16>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e000      	b.n	800a3e8 <LL_RCC_HSI_IsReady+0x18>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40021000 	.word	0x40021000

0800a3f8 <LL_RCC_LSE_IsReady>:
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	4b07      	ldr	r3, [pc, #28]	; (800a41c <LL_RCC_LSE_IsReady+0x24>)
 800a3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b02      	cmp	r3, #2
 800a408:	d101      	bne.n	800a40e <LL_RCC_LSE_IsReady+0x16>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <LL_RCC_LSE_IsReady+0x18>
 800a40e:	2300      	movs	r3, #0
 800a410:	4618      	mov	r0, r3
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	40021000 	.word	0x40021000

0800a420 <LL_RCC_MSI_IsEnabledRangeSelect>:
 800a420:	b480      	push	{r7}
 800a422:	af00      	add	r7, sp, #0
 800a424:	4b06      	ldr	r3, [pc, #24]	; (800a440 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0308 	and.w	r3, r3, #8
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d101      	bne.n	800a434 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800a430:	2301      	movs	r3, #1
 800a432:	e000      	b.n	800a436 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800a434:	2300      	movs	r3, #0
 800a436:	4618      	mov	r0, r3
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	40021000 	.word	0x40021000

0800a444 <LL_RCC_MSI_GetRange>:
 800a444:	b480      	push	{r7}
 800a446:	af00      	add	r7, sp, #0
 800a448:	4b04      	ldr	r3, [pc, #16]	; (800a45c <LL_RCC_MSI_GetRange+0x18>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a450:	4618      	mov	r0, r3
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40021000 	.word	0x40021000

0800a460 <LL_RCC_MSI_GetRangeAfterStandby>:
 800a460:	b480      	push	{r7}
 800a462:	af00      	add	r7, sp, #0
 800a464:	4b04      	ldr	r3, [pc, #16]	; (800a478 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800a466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a46a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a46e:	4618      	mov	r0, r3
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	40021000 	.word	0x40021000

0800a47c <LL_RCC_GetSysClkSource>:
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
 800a480:	4b04      	ldr	r3, [pc, #16]	; (800a494 <LL_RCC_GetSysClkSource+0x18>)
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f003 030c 	and.w	r3, r3, #12
 800a488:	4618      	mov	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	40021000 	.word	0x40021000

0800a498 <LL_RCC_GetAHBPrescaler>:
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <LL_RCC_GetAHBPrescaler+0x18>)
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	40021000 	.word	0x40021000

0800a4b4 <LL_RCC_GetAPB1Prescaler>:
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	4b04      	ldr	r3, [pc, #16]	; (800a4cc <LL_RCC_GetAPB1Prescaler+0x18>)
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	40021000 	.word	0x40021000

0800a4d0 <LL_RCC_GetAPB2Prescaler>:
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <LL_RCC_GetAPB2Prescaler+0x18>)
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a4dc:	4618      	mov	r0, r3
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	40021000 	.word	0x40021000

0800a4ec <LL_RCC_GetUSARTClockSource>:
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	4b06      	ldr	r3, [pc, #24]	; (800a510 <LL_RCC_GetUSARTClockSource+0x24>)
 800a4f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	401a      	ands	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	4313      	orrs	r3, r2
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	40021000 	.word	0x40021000

0800a514 <LL_RCC_GetUARTClockSource>:
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	4b06      	ldr	r3, [pc, #24]	; (800a538 <LL_RCC_GetUARTClockSource+0x24>)
 800a51e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	401a      	ands	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	4313      	orrs	r3, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	40021000 	.word	0x40021000

0800a53c <LL_RCC_PLL_GetMainSource>:
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
 800a540:	4b04      	ldr	r3, [pc, #16]	; (800a554 <LL_RCC_PLL_GetMainSource+0x18>)
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f003 0303 	and.w	r3, r3, #3
 800a548:	4618      	mov	r0, r3
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	40021000 	.word	0x40021000

0800a558 <LL_RCC_PLL_GetN>:
 800a558:	b480      	push	{r7}
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	4b04      	ldr	r3, [pc, #16]	; (800a570 <LL_RCC_PLL_GetN+0x18>)
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	0a1b      	lsrs	r3, r3, #8
 800a562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a566:	4618      	mov	r0, r3
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	40021000 	.word	0x40021000

0800a574 <LL_RCC_PLL_GetR>:
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <LL_RCC_PLL_GetR+0x18>)
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a580:	4618      	mov	r0, r3
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40021000 	.word	0x40021000

0800a590 <LL_RCC_PLL_GetDivider>:
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
 800a594:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <LL_RCC_PLL_GetDivider+0x18>)
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a59c:	4618      	mov	r0, r3
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	40021000 	.word	0x40021000

0800a5ac <LL_RCC_GetUSARTClockFreq>:
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d137      	bne.n	800a62e <LL_RCC_GetUSARTClockFreq+0x82>
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff ff94 	bl	800a4ec <LL_RCC_GetUSARTClockSource>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	f200 80b3 	bhi.w	800a736 <LL_RCC_GetUSARTClockFreq+0x18a>
 800a5d0:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a617 	.word	0x0800a617
 800a5dc:	0800a5e9 	.word	0x0800a5e9
 800a5e0:	0800a5f1 	.word	0x0800a5f1
 800a5e4:	0800a603 	.word	0x0800a603
 800a5e8:	f000 f95c 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	e0b5      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a5f0:	f7ff feee 	bl	800a3d0 <LL_RCC_HSI_IsReady>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 809f 	beq.w	800a73a <LL_RCC_GetUSARTClockFreq+0x18e>
 800a5fc:	4b5a      	ldr	r3, [pc, #360]	; (800a768 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	e09b      	b.n	800a73a <LL_RCC_GetUSARTClockFreq+0x18e>
 800a602:	f7ff fef9 	bl	800a3f8 <LL_RCC_LSE_IsReady>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 8098 	beq.w	800a73e <LL_RCC_GetUSARTClockFreq+0x192>
 800a60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e093      	b.n	800a73e <LL_RCC_GetUSARTClockFreq+0x192>
 800a616:	f000 f945 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a61a:	4603      	mov	r3, r0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f9d1 	bl	800a9c4 <RCC_GetHCLKClockFreq>
 800a622:	4603      	mov	r3, r0
 800a624:	4618      	mov	r0, r3
 800a626:	f000 f9f7 	bl	800aa18 <RCC_GetPCLK2ClockFreq>
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	e096      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b0c      	cmp	r3, #12
 800a632:	d146      	bne.n	800a6c2 <LL_RCC_GetUSARTClockFreq+0x116>
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff ff59 	bl	800a4ec <LL_RCC_GetUSARTClockSource>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a640:	2b0c      	cmp	r3, #12
 800a642:	d87e      	bhi.n	800a742 <LL_RCC_GetUSARTClockFreq+0x196>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <LL_RCC_GetUSARTClockFreq+0xa0>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a6ab 	.word	0x0800a6ab
 800a650:	0800a743 	.word	0x0800a743
 800a654:	0800a743 	.word	0x0800a743
 800a658:	0800a743 	.word	0x0800a743
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a743 	.word	0x0800a743
 800a664:	0800a743 	.word	0x0800a743
 800a668:	0800a743 	.word	0x0800a743
 800a66c:	0800a689 	.word	0x0800a689
 800a670:	0800a743 	.word	0x0800a743
 800a674:	0800a743 	.word	0x0800a743
 800a678:	0800a743 	.word	0x0800a743
 800a67c:	0800a699 	.word	0x0800a699
 800a680:	f000 f910 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	e069      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a688:	f7ff fea2 	bl	800a3d0 <LL_RCC_HSI_IsReady>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d059      	beq.n	800a746 <LL_RCC_GetUSARTClockFreq+0x19a>
 800a692:	4b35      	ldr	r3, [pc, #212]	; (800a768 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	e056      	b.n	800a746 <LL_RCC_GetUSARTClockFreq+0x19a>
 800a698:	f7ff feae 	bl	800a3f8 <LL_RCC_LSE_IsReady>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d053      	beq.n	800a74a <LL_RCC_GetUSARTClockFreq+0x19e>
 800a6a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	e04f      	b.n	800a74a <LL_RCC_GetUSARTClockFreq+0x19e>
 800a6aa:	f000 f8fb 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 f987 	bl	800a9c4 <RCC_GetHCLKClockFreq>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 f999 	bl	800a9f0 <RCC_GetPCLK1ClockFreq>
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	e04c      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b30      	cmp	r3, #48	; 0x30
 800a6c6:	d142      	bne.n	800a74e <LL_RCC_GetUSARTClockFreq+0x1a2>
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff ff0f 	bl	800a4ec <LL_RCC_GetUSARTClockSource>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800a6d4:	d01a      	beq.n	800a70c <LL_RCC_GetUSARTClockFreq+0x160>
 800a6d6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800a6da:	d83a      	bhi.n	800a752 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800a6dc:	4a23      	ldr	r2, [pc, #140]	; (800a76c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d00c      	beq.n	800a6fc <LL_RCC_GetUSARTClockFreq+0x150>
 800a6e2:	4a22      	ldr	r2, [pc, #136]	; (800a76c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d834      	bhi.n	800a752 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800a6e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6ec:	d017      	beq.n	800a71e <LL_RCC_GetUSARTClockFreq+0x172>
 800a6ee:	4a20      	ldr	r2, [pc, #128]	; (800a770 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d12e      	bne.n	800a752 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800a6f4:	f000 f8d6 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	e02f      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a6fc:	f7ff fe68 	bl	800a3d0 <LL_RCC_HSI_IsReady>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d027      	beq.n	800a756 <LL_RCC_GetUSARTClockFreq+0x1aa>
 800a706:	4b18      	ldr	r3, [pc, #96]	; (800a768 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a708:	60fb      	str	r3, [r7, #12]
 800a70a:	e024      	b.n	800a756 <LL_RCC_GetUSARTClockFreq+0x1aa>
 800a70c:	f7ff fe74 	bl	800a3f8 <LL_RCC_LSE_IsReady>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d021      	beq.n	800a75a <LL_RCC_GetUSARTClockFreq+0x1ae>
 800a716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	e01d      	b.n	800a75a <LL_RCC_GetUSARTClockFreq+0x1ae>
 800a71e:	f000 f8c1 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a722:	4603      	mov	r3, r0
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f94d 	bl	800a9c4 <RCC_GetHCLKClockFreq>
 800a72a:	4603      	mov	r3, r0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 f95f 	bl	800a9f0 <RCC_GetPCLK1ClockFreq>
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	e012      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a736:	bf00      	nop
 800a738:	e010      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a73a:	bf00      	nop
 800a73c:	e00e      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a73e:	bf00      	nop
 800a740:	e00c      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a742:	bf00      	nop
 800a744:	e00a      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a746:	bf00      	nop
 800a748:	e008      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a74a:	bf00      	nop
 800a74c:	e006      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a74e:	bf00      	nop
 800a750:	e004      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a752:	bf00      	nop
 800a754:	e002      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a756:	bf00      	nop
 800a758:	e000      	b.n	800a75c <LL_RCC_GetUSARTClockFreq+0x1b0>
 800a75a:	bf00      	nop
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	00f42400 	.word	0x00f42400
 800a76c:	00300020 	.word	0x00300020
 800a770:	00300010 	.word	0x00300010

0800a774 <LL_RCC_GetUARTClockFreq>:
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2bc0      	cmp	r3, #192	; 0xc0
 800a784:	d136      	bne.n	800a7f4 <LL_RCC_GetUARTClockFreq+0x80>
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7ff fec4 	bl	800a514 <LL_RCC_GetUARTClockSource>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800a792:	d01a      	beq.n	800a7ca <LL_RCC_GetUARTClockFreq+0x56>
 800a794:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800a798:	d82e      	bhi.n	800a7f8 <LL_RCC_GetUARTClockFreq+0x84>
 800a79a:	4a3d      	ldr	r2, [pc, #244]	; (800a890 <LL_RCC_GetUARTClockFreq+0x11c>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00c      	beq.n	800a7ba <LL_RCC_GetUARTClockFreq+0x46>
 800a7a0:	4a3b      	ldr	r2, [pc, #236]	; (800a890 <LL_RCC_GetUARTClockFreq+0x11c>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d828      	bhi.n	800a7f8 <LL_RCC_GetUARTClockFreq+0x84>
 800a7a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a7aa:	d017      	beq.n	800a7dc <LL_RCC_GetUARTClockFreq+0x68>
 800a7ac:	4a39      	ldr	r2, [pc, #228]	; (800a894 <LL_RCC_GetUARTClockFreq+0x120>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d122      	bne.n	800a7f8 <LL_RCC_GetUARTClockFreq+0x84>
 800a7b2:	f000 f877 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	e023      	b.n	800a802 <LL_RCC_GetUARTClockFreq+0x8e>
 800a7ba:	f7ff fe09 	bl	800a3d0 <LL_RCC_HSI_IsReady>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01b      	beq.n	800a7fc <LL_RCC_GetUARTClockFreq+0x88>
 800a7c4:	4b34      	ldr	r3, [pc, #208]	; (800a898 <LL_RCC_GetUARTClockFreq+0x124>)
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	e018      	b.n	800a7fc <LL_RCC_GetUARTClockFreq+0x88>
 800a7ca:	f7ff fe15 	bl	800a3f8 <LL_RCC_LSE_IsReady>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d015      	beq.n	800a800 <LL_RCC_GetUARTClockFreq+0x8c>
 800a7d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	e011      	b.n	800a800 <LL_RCC_GetUARTClockFreq+0x8c>
 800a7dc:	f000 f862 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f8ee 	bl	800a9c4 <RCC_GetHCLKClockFreq>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f900 	bl	800a9f0 <RCC_GetPCLK1ClockFreq>
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	e006      	b.n	800a802 <LL_RCC_GetUARTClockFreq+0x8e>
 800a7f4:	bf00      	nop
 800a7f6:	e004      	b.n	800a802 <LL_RCC_GetUARTClockFreq+0x8e>
 800a7f8:	bf00      	nop
 800a7fa:	e002      	b.n	800a802 <LL_RCC_GetUARTClockFreq+0x8e>
 800a7fc:	bf00      	nop
 800a7fe:	e000      	b.n	800a802 <LL_RCC_GetUARTClockFreq+0x8e>
 800a800:	bf00      	nop
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a808:	d136      	bne.n	800a878 <LL_RCC_GetUARTClockFreq+0x104>
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fe82 	bl	800a514 <LL_RCC_GetUARTClockSource>
 800a810:	4603      	mov	r3, r0
 800a812:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800a816:	d01a      	beq.n	800a84e <LL_RCC_GetUARTClockFreq+0xda>
 800a818:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800a81c:	d82e      	bhi.n	800a87c <LL_RCC_GetUARTClockFreq+0x108>
 800a81e:	4a1f      	ldr	r2, [pc, #124]	; (800a89c <LL_RCC_GetUARTClockFreq+0x128>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d00c      	beq.n	800a83e <LL_RCC_GetUARTClockFreq+0xca>
 800a824:	4a1d      	ldr	r2, [pc, #116]	; (800a89c <LL_RCC_GetUARTClockFreq+0x128>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d828      	bhi.n	800a87c <LL_RCC_GetUARTClockFreq+0x108>
 800a82a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a82e:	d017      	beq.n	800a860 <LL_RCC_GetUARTClockFreq+0xec>
 800a830:	4a1b      	ldr	r2, [pc, #108]	; (800a8a0 <LL_RCC_GetUARTClockFreq+0x12c>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d122      	bne.n	800a87c <LL_RCC_GetUARTClockFreq+0x108>
 800a836:	f000 f835 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	e023      	b.n	800a886 <LL_RCC_GetUARTClockFreq+0x112>
 800a83e:	f7ff fdc7 	bl	800a3d0 <LL_RCC_HSI_IsReady>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01b      	beq.n	800a880 <LL_RCC_GetUARTClockFreq+0x10c>
 800a848:	4b13      	ldr	r3, [pc, #76]	; (800a898 <LL_RCC_GetUARTClockFreq+0x124>)
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e018      	b.n	800a880 <LL_RCC_GetUARTClockFreq+0x10c>
 800a84e:	f7ff fdd3 	bl	800a3f8 <LL_RCC_LSE_IsReady>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d015      	beq.n	800a884 <LL_RCC_GetUARTClockFreq+0x110>
 800a858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	e011      	b.n	800a884 <LL_RCC_GetUARTClockFreq+0x110>
 800a860:	f000 f820 	bl	800a8a4 <RCC_GetSystemClockFreq>
 800a864:	4603      	mov	r3, r0
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f8ac 	bl	800a9c4 <RCC_GetHCLKClockFreq>
 800a86c:	4603      	mov	r3, r0
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 f8be 	bl	800a9f0 <RCC_GetPCLK1ClockFreq>
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	e006      	b.n	800a886 <LL_RCC_GetUARTClockFreq+0x112>
 800a878:	bf00      	nop
 800a87a:	e004      	b.n	800a886 <LL_RCC_GetUARTClockFreq+0x112>
 800a87c:	bf00      	nop
 800a87e:	e002      	b.n	800a886 <LL_RCC_GetUARTClockFreq+0x112>
 800a880:	bf00      	nop
 800a882:	e000      	b.n	800a886 <LL_RCC_GetUARTClockFreq+0x112>
 800a884:	bf00      	nop
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	00c00080 	.word	0x00c00080
 800a894:	00c00040 	.word	0x00c00040
 800a898:	00f42400 	.word	0x00f42400
 800a89c:	03000200 	.word	0x03000200
 800a8a0:	03000100 	.word	0x03000100

0800a8a4 <RCC_GetSystemClockFreq>:
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	f7ff fde7 	bl	800a47c <LL_RCC_GetSysClkSource>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b0c      	cmp	r3, #12
 800a8b2:	d851      	bhi.n	800a958 <RCC_GetSystemClockFreq+0xb4>
 800a8b4:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <RCC_GetSystemClockFreq+0x18>)
 800a8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ba:	bf00      	nop
 800a8bc:	0800a8f1 	.word	0x0800a8f1
 800a8c0:	0800a959 	.word	0x0800a959
 800a8c4:	0800a959 	.word	0x0800a959
 800a8c8:	0800a959 	.word	0x0800a959
 800a8cc:	0800a945 	.word	0x0800a945
 800a8d0:	0800a959 	.word	0x0800a959
 800a8d4:	0800a959 	.word	0x0800a959
 800a8d8:	0800a959 	.word	0x0800a959
 800a8dc:	0800a94b 	.word	0x0800a94b
 800a8e0:	0800a959 	.word	0x0800a959
 800a8e4:	0800a959 	.word	0x0800a959
 800a8e8:	0800a959 	.word	0x0800a959
 800a8ec:	0800a951 	.word	0x0800a951
 800a8f0:	f7ff fd96 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d111      	bne.n	800a91e <RCC_GetSystemClockFreq+0x7a>
 800a8fa:	f7ff fd91 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d004      	beq.n	800a90e <RCC_GetSystemClockFreq+0x6a>
 800a904:	f7ff fd9e 	bl	800a444 <LL_RCC_MSI_GetRange>
 800a908:	4603      	mov	r3, r0
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	e003      	b.n	800a916 <RCC_GetSystemClockFreq+0x72>
 800a90e:	f7ff fda7 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800a912:	4603      	mov	r3, r0
 800a914:	0a1b      	lsrs	r3, r3, #8
 800a916:	4a28      	ldr	r2, [pc, #160]	; (800a9b8 <RCC_GetSystemClockFreq+0x114>)
 800a918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a91c:	e010      	b.n	800a940 <RCC_GetSystemClockFreq+0x9c>
 800a91e:	f7ff fd7f 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <RCC_GetSystemClockFreq+0x8e>
 800a928:	f7ff fd8c 	bl	800a444 <LL_RCC_MSI_GetRange>
 800a92c:	4603      	mov	r3, r0
 800a92e:	091b      	lsrs	r3, r3, #4
 800a930:	e003      	b.n	800a93a <RCC_GetSystemClockFreq+0x96>
 800a932:	f7ff fd95 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800a936:	4603      	mov	r3, r0
 800a938:	091b      	lsrs	r3, r3, #4
 800a93a:	4a1f      	ldr	r2, [pc, #124]	; (800a9b8 <RCC_GetSystemClockFreq+0x114>)
 800a93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a940:	607b      	str	r3, [r7, #4]
 800a942:	e033      	b.n	800a9ac <RCC_GetSystemClockFreq+0x108>
 800a944:	4b1d      	ldr	r3, [pc, #116]	; (800a9bc <RCC_GetSystemClockFreq+0x118>)
 800a946:	607b      	str	r3, [r7, #4]
 800a948:	e030      	b.n	800a9ac <RCC_GetSystemClockFreq+0x108>
 800a94a:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <RCC_GetSystemClockFreq+0x11c>)
 800a94c:	607b      	str	r3, [r7, #4]
 800a94e:	e02d      	b.n	800a9ac <RCC_GetSystemClockFreq+0x108>
 800a950:	f000 f876 	bl	800aa40 <RCC_PLL_GetFreqDomain_SYS>
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	e029      	b.n	800a9ac <RCC_GetSystemClockFreq+0x108>
 800a958:	f7ff fd62 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d111      	bne.n	800a986 <RCC_GetSystemClockFreq+0xe2>
 800a962:	f7ff fd5d 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <RCC_GetSystemClockFreq+0xd2>
 800a96c:	f7ff fd6a 	bl	800a444 <LL_RCC_MSI_GetRange>
 800a970:	4603      	mov	r3, r0
 800a972:	0a1b      	lsrs	r3, r3, #8
 800a974:	e003      	b.n	800a97e <RCC_GetSystemClockFreq+0xda>
 800a976:	f7ff fd73 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800a97a:	4603      	mov	r3, r0
 800a97c:	0a1b      	lsrs	r3, r3, #8
 800a97e:	4a0e      	ldr	r2, [pc, #56]	; (800a9b8 <RCC_GetSystemClockFreq+0x114>)
 800a980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a984:	e010      	b.n	800a9a8 <RCC_GetSystemClockFreq+0x104>
 800a986:	f7ff fd4b 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <RCC_GetSystemClockFreq+0xf6>
 800a990:	f7ff fd58 	bl	800a444 <LL_RCC_MSI_GetRange>
 800a994:	4603      	mov	r3, r0
 800a996:	091b      	lsrs	r3, r3, #4
 800a998:	e003      	b.n	800a9a2 <RCC_GetSystemClockFreq+0xfe>
 800a99a:	f7ff fd61 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	091b      	lsrs	r3, r3, #4
 800a9a2:	4a05      	ldr	r2, [pc, #20]	; (800a9b8 <RCC_GetSystemClockFreq+0x114>)
 800a9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	bf00      	nop
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	0800fb20 	.word	0x0800fb20
 800a9bc:	00f42400 	.word	0x00f42400
 800a9c0:	007a1200 	.word	0x007a1200

0800a9c4 <RCC_GetHCLKClockFreq>:
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	f7ff fd64 	bl	800a498 <LL_RCC_GetAHBPrescaler>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	091b      	lsrs	r3, r3, #4
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <RCC_GetHCLKClockFreq+0x28>)
 800a9da:	5cd3      	ldrb	r3, [r2, r3]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	40d3      	lsrs	r3, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800fb08 	.word	0x0800fb08

0800a9f0 <RCC_GetPCLK1ClockFreq>:
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	f7ff fd5c 	bl	800a4b4 <LL_RCC_GetAPB1Prescaler>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	0a1b      	lsrs	r3, r3, #8
 800aa00:	4a04      	ldr	r2, [pc, #16]	; (800aa14 <RCC_GetPCLK1ClockFreq+0x24>)
 800aa02:	5cd3      	ldrb	r3, [r2, r3]
 800aa04:	461a      	mov	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	40d3      	lsrs	r3, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	0800fb18 	.word	0x0800fb18

0800aa18 <RCC_GetPCLK2ClockFreq>:
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	f7ff fd56 	bl	800a4d0 <LL_RCC_GetAPB2Prescaler>
 800aa24:	4603      	mov	r3, r0
 800aa26:	0adb      	lsrs	r3, r3, #11
 800aa28:	4a04      	ldr	r2, [pc, #16]	; (800aa3c <RCC_GetPCLK2ClockFreq+0x24>)
 800aa2a:	5cd3      	ldrb	r3, [r2, r3]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	40d3      	lsrs	r3, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0800fb18 	.word	0x0800fb18

0800aa40 <RCC_PLL_GetFreqDomain_SYS>:
 800aa40:	b590      	push	{r4, r7, lr}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	f7ff fd79 	bl	800a53c <LL_RCC_PLL_GetMainSource>
 800aa4a:	6038      	str	r0, [r7, #0]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d036      	beq.n	800aac0 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d836      	bhi.n	800aac6 <RCC_PLL_GetFreqDomain_SYS+0x86>
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d003      	beq.n	800aa66 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d02a      	beq.n	800aaba <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800aa64:	e02f      	b.n	800aac6 <RCC_PLL_GetFreqDomain_SYS+0x86>
 800aa66:	f7ff fcdb 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d111      	bne.n	800aa94 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800aa70:	f7ff fcd6 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800aa7a:	f7ff fce3 	bl	800a444 <LL_RCC_MSI_GetRange>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	0a1b      	lsrs	r3, r3, #8
 800aa82:	e003      	b.n	800aa8c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800aa84:	f7ff fcec 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	0a1b      	lsrs	r3, r3, #8
 800aa8c:	4a2f      	ldr	r2, [pc, #188]	; (800ab4c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aa8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa92:	e010      	b.n	800aab6 <RCC_PLL_GetFreqDomain_SYS+0x76>
 800aa94:	f7ff fcc4 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800aa9e:	f7ff fcd1 	bl	800a444 <LL_RCC_MSI_GetRange>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	091b      	lsrs	r3, r3, #4
 800aaa6:	e003      	b.n	800aab0 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800aaa8:	f7ff fcda 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800aaac:	4603      	mov	r3, r0
 800aaae:	091b      	lsrs	r3, r3, #4
 800aab0:	4a26      	ldr	r2, [pc, #152]	; (800ab4c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab6:	607b      	str	r3, [r7, #4]
 800aab8:	e02f      	b.n	800ab1a <RCC_PLL_GetFreqDomain_SYS+0xda>
 800aaba:	4b25      	ldr	r3, [pc, #148]	; (800ab50 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 800aabc:	607b      	str	r3, [r7, #4]
 800aabe:	e02c      	b.n	800ab1a <RCC_PLL_GetFreqDomain_SYS+0xda>
 800aac0:	4b24      	ldr	r3, [pc, #144]	; (800ab54 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800aac2:	607b      	str	r3, [r7, #4]
 800aac4:	e029      	b.n	800ab1a <RCC_PLL_GetFreqDomain_SYS+0xda>
 800aac6:	f7ff fcab 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d111      	bne.n	800aaf4 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800aad0:	f7ff fca6 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d004      	beq.n	800aae4 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800aada:	f7ff fcb3 	bl	800a444 <LL_RCC_MSI_GetRange>
 800aade:	4603      	mov	r3, r0
 800aae0:	0a1b      	lsrs	r3, r3, #8
 800aae2:	e003      	b.n	800aaec <RCC_PLL_GetFreqDomain_SYS+0xac>
 800aae4:	f7ff fcbc 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800aae8:	4603      	mov	r3, r0
 800aaea:	0a1b      	lsrs	r3, r3, #8
 800aaec:	4a17      	ldr	r2, [pc, #92]	; (800ab4c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aaee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaf2:	e010      	b.n	800ab16 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800aaf4:	f7ff fc94 	bl	800a420 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800aafe:	f7ff fca1 	bl	800a444 <LL_RCC_MSI_GetRange>
 800ab02:	4603      	mov	r3, r0
 800ab04:	091b      	lsrs	r3, r3, #4
 800ab06:	e003      	b.n	800ab10 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800ab08:	f7ff fcaa 	bl	800a460 <LL_RCC_MSI_GetRangeAfterStandby>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	091b      	lsrs	r3, r3, #4
 800ab10:	4a0e      	ldr	r2, [pc, #56]	; (800ab4c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800ab12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab16:	607b      	str	r3, [r7, #4]
 800ab18:	bf00      	nop
 800ab1a:	f7ff fd39 	bl	800a590 <LL_RCC_PLL_GetDivider>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	091b      	lsrs	r3, r3, #4
 800ab22:	3301      	adds	r3, #1
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	fbb2 f4f3 	udiv	r4, r2, r3
 800ab2a:	f7ff fd15 	bl	800a558 <LL_RCC_PLL_GetN>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	fb03 f404 	mul.w	r4, r3, r4
 800ab34:	f7ff fd1e 	bl	800a574 <LL_RCC_PLL_GetR>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	0e5b      	lsrs	r3, r3, #25
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	fbb4 f3f3 	udiv	r3, r4, r3
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd90      	pop	{r4, r7, pc}
 800ab4c:	0800fb20 	.word	0x0800fb20
 800ab50:	00f42400 	.word	0x00f42400
 800ab54:	007a1200 	.word	0x007a1200

0800ab58 <LL_USART_IsEnabled>:
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <LL_USART_IsEnabled+0x18>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e000      	b.n	800ab72 <LL_USART_IsEnabled+0x1a>
 800ab70:	2300      	movs	r3, #0
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <LL_USART_SetStopBitsLength>:
 800ab7e:	b480      	push	{r7}
 800ab80:	b083      	sub	sp, #12
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	431a      	orrs	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	605a      	str	r2, [r3, #4]
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <LL_USART_SetHWFlowCtrl>:
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	431a      	orrs	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	609a      	str	r2, [r3, #8]
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <LL_USART_SetBaudRate>:
 800abca:	b480      	push	{r7}
 800abcc:	b087      	sub	sp, #28
 800abce:	af00      	add	r7, sp, #0
 800abd0:	60f8      	str	r0, [r7, #12]
 800abd2:	60b9      	str	r1, [r7, #8]
 800abd4:	607a      	str	r2, [r7, #4]
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abde:	d11a      	bne.n	800ac16 <LL_USART_SetBaudRate+0x4c>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	005a      	lsls	r2, r3, #1
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	085b      	lsrs	r3, r3, #1
 800abe8:	441a      	add	r2, r3
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	617b      	str	r3, [r7, #20]
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800abfa:	4013      	ands	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	085b      	lsrs	r3, r3, #1
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	f003 0307 	and.w	r3, r3, #7
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	60da      	str	r2, [r3, #12]
 800ac14:	e00a      	b.n	800ac2c <LL_USART_SetBaudRate+0x62>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	085a      	lsrs	r2, r3, #1
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	441a      	add	r2, r3
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	60da      	str	r2, [r3, #12]
 800ac2c:	bf00      	nop
 800ac2e:	371c      	adds	r7, #28
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <LL_USART_Init>:
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
 800ac42:	2301      	movs	r3, #1
 800ac44:	73fb      	strb	r3, [r7, #15]
 800ac46:	2300      	movs	r3, #0
 800ac48:	60bb      	str	r3, [r7, #8]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ff84 	bl	800ab58 <LL_USART_IsEnabled>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d15b      	bne.n	800ad0e <LL_USART_Init+0xd6>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	4b2f      	ldr	r3, [pc, #188]	; (800ad18 <LL_USART_Init+0xe0>)
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	6851      	ldr	r1, [r2, #4]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	68d2      	ldr	r2, [r2, #12]
 800ac66:	4311      	orrs	r1, r2
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	6912      	ldr	r2, [r2, #16]
 800ac6c:	4311      	orrs	r1, r2
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	6992      	ldr	r2, [r2, #24]
 800ac72:	430a      	orrs	r2, r1
 800ac74:	431a      	orrs	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff ff7c 	bl	800ab7e <LL_USART_SetStopBitsLength>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff ff89 	bl	800aba4 <LL_USART_SetHWFlowCtrl>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a21      	ldr	r2, [pc, #132]	; (800ad1c <LL_USART_Init+0xe4>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d104      	bne.n	800aca4 <LL_USART_Init+0x6c>
 800ac9a:	2003      	movs	r0, #3
 800ac9c:	f7ff fc86 	bl	800a5ac <LL_RCC_GetUSARTClockFreq>
 800aca0:	60b8      	str	r0, [r7, #8]
 800aca2:	e023      	b.n	800acec <LL_USART_Init+0xb4>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a1e      	ldr	r2, [pc, #120]	; (800ad20 <LL_USART_Init+0xe8>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d104      	bne.n	800acb6 <LL_USART_Init+0x7e>
 800acac:	200c      	movs	r0, #12
 800acae:	f7ff fc7d 	bl	800a5ac <LL_RCC_GetUSARTClockFreq>
 800acb2:	60b8      	str	r0, [r7, #8]
 800acb4:	e01a      	b.n	800acec <LL_USART_Init+0xb4>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a1a      	ldr	r2, [pc, #104]	; (800ad24 <LL_USART_Init+0xec>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d104      	bne.n	800acc8 <LL_USART_Init+0x90>
 800acbe:	2030      	movs	r0, #48	; 0x30
 800acc0:	f7ff fc74 	bl	800a5ac <LL_RCC_GetUSARTClockFreq>
 800acc4:	60b8      	str	r0, [r7, #8]
 800acc6:	e011      	b.n	800acec <LL_USART_Init+0xb4>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a17      	ldr	r2, [pc, #92]	; (800ad28 <LL_USART_Init+0xf0>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d104      	bne.n	800acda <LL_USART_Init+0xa2>
 800acd0:	20c0      	movs	r0, #192	; 0xc0
 800acd2:	f7ff fd4f 	bl	800a774 <LL_RCC_GetUARTClockFreq>
 800acd6:	60b8      	str	r0, [r7, #8]
 800acd8:	e008      	b.n	800acec <LL_USART_Init+0xb4>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a13      	ldr	r2, [pc, #76]	; (800ad2c <LL_USART_Init+0xf4>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d104      	bne.n	800acec <LL_USART_Init+0xb4>
 800ace2:	f44f 7040 	mov.w	r0, #768	; 0x300
 800ace6:	f7ff fd45 	bl	800a774 <LL_RCC_GetUARTClockFreq>
 800acea:	60b8      	str	r0, [r7, #8]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00d      	beq.n	800ad0e <LL_USART_Init+0xd6>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d009      	beq.n	800ad0e <LL_USART_Init+0xd6>
 800acfa:	2300      	movs	r3, #0
 800acfc:	73fb      	strb	r3, [r7, #15]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	699a      	ldr	r2, [r3, #24]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68b9      	ldr	r1, [r7, #8]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff ff5e 	bl	800abca <LL_USART_SetBaudRate>
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	efff69f3 	.word	0xefff69f3
 800ad1c:	40013800 	.word	0x40013800
 800ad20:	40004400 	.word	0x40004400
 800ad24:	40004800 	.word	0x40004800
 800ad28:	40004c00 	.word	0x40004c00
 800ad2c:	40005000 	.word	0x40005000

0800ad30 <__NVIC_SetPriority>:
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	6039      	str	r1, [r7, #0]
 800ad3a:	71fb      	strb	r3, [r7, #7]
 800ad3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	db0a      	blt.n	800ad5a <__NVIC_SetPriority+0x2a>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	490c      	ldr	r1, [pc, #48]	; (800ad7c <__NVIC_SetPriority+0x4c>)
 800ad4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad4e:	0112      	lsls	r2, r2, #4
 800ad50:	b2d2      	uxtb	r2, r2
 800ad52:	440b      	add	r3, r1
 800ad54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800ad58:	e00a      	b.n	800ad70 <__NVIC_SetPriority+0x40>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	4908      	ldr	r1, [pc, #32]	; (800ad80 <__NVIC_SetPriority+0x50>)
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	f003 030f 	and.w	r3, r3, #15
 800ad66:	3b04      	subs	r3, #4
 800ad68:	0112      	lsls	r2, r2, #4
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	440b      	add	r3, r1
 800ad6e:	761a      	strb	r2, [r3, #24]
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	e000e100 	.word	0xe000e100
 800ad80:	e000ed00 	.word	0xe000ed00

0800ad84 <SysTick_Handler>:
 800ad84:	b580      	push	{r7, lr}
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <SysTick_Handler+0x1c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f002 f93c 	bl	800d008 <xTaskGetSchedulerState>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d001      	beq.n	800ad9a <SysTick_Handler+0x16>
 800ad96:	f003 f807 	bl	800dda8 <xPortSysTickHandler>
 800ad9a:	bf00      	nop
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	e000e010 	.word	0xe000e010

0800ada4 <SVC_Setup>:
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	2100      	movs	r1, #0
 800adaa:	f06f 0004 	mvn.w	r0, #4
 800adae:	f7ff ffbf 	bl	800ad30 <__NVIC_SetPriority>
 800adb2:	bf00      	nop
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <osKernelInitialize>:
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	f3ef 8305 	mrs	r3, IPSR
 800adc2:	603b      	str	r3, [r7, #0]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <osKernelInitialize+0x1a>
 800adca:	f06f 0305 	mvn.w	r3, #5
 800adce:	607b      	str	r3, [r7, #4]
 800add0:	e00c      	b.n	800adec <osKernelInitialize+0x34>
 800add2:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <osKernelInitialize+0x44>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d105      	bne.n	800ade6 <osKernelInitialize+0x2e>
 800adda:	4b08      	ldr	r3, [pc, #32]	; (800adfc <osKernelInitialize+0x44>)
 800addc:	2201      	movs	r2, #1
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	2300      	movs	r3, #0
 800ade2:	607b      	str	r3, [r7, #4]
 800ade4:	e002      	b.n	800adec <osKernelInitialize+0x34>
 800ade6:	f04f 33ff 	mov.w	r3, #4294967295
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	2000081c 	.word	0x2000081c

0800ae00 <osKernelStart>:
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	f3ef 8305 	mrs	r3, IPSR
 800ae0a:	603b      	str	r3, [r7, #0]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <osKernelStart+0x1a>
 800ae12:	f06f 0305 	mvn.w	r3, #5
 800ae16:	607b      	str	r3, [r7, #4]
 800ae18:	e010      	b.n	800ae3c <osKernelStart+0x3c>
 800ae1a:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <osKernelStart+0x48>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d109      	bne.n	800ae36 <osKernelStart+0x36>
 800ae22:	f7ff ffbf 	bl	800ada4 <SVC_Setup>
 800ae26:	4b08      	ldr	r3, [pc, #32]	; (800ae48 <osKernelStart+0x48>)
 800ae28:	2202      	movs	r2, #2
 800ae2a:	601a      	str	r2, [r3, #0]
 800ae2c:	f001 fca4 	bl	800c778 <vTaskStartScheduler>
 800ae30:	2300      	movs	r3, #0
 800ae32:	607b      	str	r3, [r7, #4]
 800ae34:	e002      	b.n	800ae3c <osKernelStart+0x3c>
 800ae36:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000081c 	.word	0x2000081c

0800ae4c <osKernelLock>:
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	f3ef 8305 	mrs	r3, IPSR
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <osKernelLock+0x1a>
 800ae5e:	f06f 0305 	mvn.w	r3, #5
 800ae62:	607b      	str	r3, [r7, #4]
 800ae64:	e013      	b.n	800ae8e <osKernelLock+0x42>
 800ae66:	f002 f8cf 	bl	800d008 <xTaskGetSchedulerState>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <osKernelLock+0x2a>
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d003      	beq.n	800ae7c <osKernelLock+0x30>
 800ae74:	e007      	b.n	800ae86 <osKernelLock+0x3a>
 800ae76:	2301      	movs	r3, #1
 800ae78:	607b      	str	r3, [r7, #4]
 800ae7a:	e008      	b.n	800ae8e <osKernelLock+0x42>
 800ae7c:	f001 fce2 	bl	800c844 <vTaskSuspendAll>
 800ae80:	2300      	movs	r3, #0
 800ae82:	607b      	str	r3, [r7, #4]
 800ae84:	e003      	b.n	800ae8e <osKernelLock+0x42>
 800ae86:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8a:	607b      	str	r3, [r7, #4]
 800ae8c:	bf00      	nop
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <osKernelUnlock>:
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	f3ef 8305 	mrs	r3, IPSR
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <osKernelUnlock+0x1a>
 800aeaa:	f06f 0305 	mvn.w	r3, #5
 800aeae:	607b      	str	r3, [r7, #4]
 800aeb0:	e01f      	b.n	800aef2 <osKernelUnlock+0x5a>
 800aeb2:	f002 f8a9 	bl	800d008 <xTaskGetSchedulerState>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <osKernelUnlock+0x2a>
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d010      	beq.n	800aee2 <osKernelUnlock+0x4a>
 800aec0:	e012      	b.n	800aee8 <osKernelUnlock+0x50>
 800aec2:	2301      	movs	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	f001 fccb 	bl	800c860 <xTaskResumeAll>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d00f      	beq.n	800aef0 <osKernelUnlock+0x58>
 800aed0:	f002 f89a 	bl	800d008 <xTaskGetSchedulerState>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <osKernelUnlock+0x58>
 800aeda:	f04f 33ff 	mov.w	r3, #4294967295
 800aede:	607b      	str	r3, [r7, #4]
 800aee0:	e006      	b.n	800aef0 <osKernelUnlock+0x58>
 800aee2:	2300      	movs	r3, #0
 800aee4:	607b      	str	r3, [r7, #4]
 800aee6:	e004      	b.n	800aef2 <osKernelUnlock+0x5a>
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeec:	607b      	str	r3, [r7, #4]
 800aeee:	e000      	b.n	800aef2 <osKernelUnlock+0x5a>
 800aef0:	bf00      	nop
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <osThreadNew>:
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08e      	sub	sp, #56	; 0x38
 800af00:	af04      	add	r7, sp, #16
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	2300      	movs	r3, #0
 800af0a:	613b      	str	r3, [r7, #16]
 800af0c:	f3ef 8305 	mrs	r3, IPSR
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d17e      	bne.n	800b016 <osThreadNew+0x11a>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d07b      	beq.n	800b016 <osThreadNew+0x11a>
 800af1e:	2380      	movs	r3, #128	; 0x80
 800af20:	623b      	str	r3, [r7, #32]
 800af22:	2318      	movs	r3, #24
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	2300      	movs	r3, #0
 800af28:	627b      	str	r3, [r7, #36]	; 0x24
 800af2a:	f04f 33ff 	mov.w	r3, #4294967295
 800af2e:	61bb      	str	r3, [r7, #24]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d045      	beq.n	800afc2 <osThreadNew+0xc6>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <osThreadNew+0x48>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	627b      	str	r3, [r7, #36]	; 0x24
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <osThreadNew+0x56>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	61fb      	str	r3, [r7, #28]
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d008      	beq.n	800af6a <osThreadNew+0x6e>
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	2b38      	cmp	r3, #56	; 0x38
 800af5c:	d805      	bhi.n	800af6a <osThreadNew+0x6e>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <osThreadNew+0x72>
 800af6a:	2300      	movs	r3, #0
 800af6c:	e054      	b.n	800b018 <osThreadNew+0x11c>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <osThreadNew+0x82>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	089b      	lsrs	r3, r3, #2
 800af7c:	623b      	str	r3, [r7, #32]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00e      	beq.n	800afa4 <osThreadNew+0xa8>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	2b5b      	cmp	r3, #91	; 0x5b
 800af8c:	d90a      	bls.n	800afa4 <osThreadNew+0xa8>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d006      	beq.n	800afa4 <osThreadNew+0xa8>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <osThreadNew+0xa8>
 800af9e:	2301      	movs	r3, #1
 800afa0:	61bb      	str	r3, [r7, #24]
 800afa2:	e010      	b.n	800afc6 <osThreadNew+0xca>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10c      	bne.n	800afc6 <osThreadNew+0xca>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d108      	bne.n	800afc6 <osThreadNew+0xca>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d104      	bne.n	800afc6 <osThreadNew+0xca>
 800afbc:	2300      	movs	r3, #0
 800afbe:	61bb      	str	r3, [r7, #24]
 800afc0:	e001      	b.n	800afc6 <osThreadNew+0xca>
 800afc2:	2300      	movs	r3, #0
 800afc4:	61bb      	str	r3, [r7, #24]
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d110      	bne.n	800afee <osThreadNew+0xf2>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6892      	ldr	r2, [r2, #8]
 800afd4:	9202      	str	r2, [sp, #8]
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	6a3a      	ldr	r2, [r7, #32]
 800afe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f001 f91a 	bl	800c21c <xTaskCreateStatic>
 800afe8:	4603      	mov	r3, r0
 800afea:	613b      	str	r3, [r7, #16]
 800afec:	e013      	b.n	800b016 <osThreadNew+0x11a>
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d110      	bne.n	800b016 <osThreadNew+0x11a>
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	f107 0310 	add.w	r3, r7, #16
 800affc:	9301      	str	r3, [sp, #4]
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f001 f965 	bl	800c2d6 <xTaskCreate>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d001      	beq.n	800b016 <osThreadNew+0x11a>
 800b012:	2300      	movs	r3, #0
 800b014:	613b      	str	r3, [r7, #16]
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	4618      	mov	r0, r3
 800b01a:	3728      	adds	r7, #40	; 0x28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <osThreadTerminate>:
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	613b      	str	r3, [r7, #16]
 800b02c:	f3ef 8305 	mrs	r3, IPSR
 800b030:	60bb      	str	r3, [r7, #8]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <osThreadTerminate+0x20>
 800b038:	f06f 0305 	mvn.w	r3, #5
 800b03c:	617b      	str	r3, [r7, #20]
 800b03e:	e017      	b.n	800b070 <osThreadTerminate+0x50>
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d103      	bne.n	800b04e <osThreadTerminate+0x2e>
 800b046:	f06f 0303 	mvn.w	r3, #3
 800b04a:	617b      	str	r3, [r7, #20]
 800b04c:	e010      	b.n	800b070 <osThreadTerminate+0x50>
 800b04e:	6938      	ldr	r0, [r7, #16]
 800b050:	f001 fb2c 	bl	800c6ac <eTaskGetState>
 800b054:	4603      	mov	r3, r0
 800b056:	73fb      	strb	r3, [r7, #15]
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d005      	beq.n	800b06a <osThreadTerminate+0x4a>
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]
 800b062:	6938      	ldr	r0, [r7, #16]
 800b064:	f001 fa7c 	bl	800c560 <vTaskDelete>
 800b068:	e002      	b.n	800b070 <osThreadTerminate+0x50>
 800b06a:	f06f 0302 	mvn.w	r3, #2
 800b06e:	617b      	str	r3, [r7, #20]
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <osDelay>:
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	f3ef 8305 	mrs	r3, IPSR
 800b086:	60bb      	str	r3, [r7, #8]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <osDelay+0x1c>
 800b08e:	f06f 0305 	mvn.w	r3, #5
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e007      	b.n	800b0a6 <osDelay+0x2c>
 800b096:	2300      	movs	r3, #0
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <osDelay+0x2c>
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 facf 	bl	800c644 <vTaskDelay>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <TimerCallback>:
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f002 fc96 	bl	800d9ea <pvTimerGetTimerID>
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d005      	beq.n	800b0d2 <TimerCallback+0x22>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	6852      	ldr	r2, [r2, #4]
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4798      	blx	r3
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <osTimerNew>:
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08c      	sub	sp, #48	; 0x30
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	72fb      	strb	r3, [r7, #11]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	623b      	str	r3, [r7, #32]
 800b0f0:	f3ef 8305 	mrs	r3, IPSR
 800b0f4:	613b      	str	r3, [r7, #16]
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d163      	bne.n	800b1c4 <osTimerNew+0xe8>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d060      	beq.n	800b1c4 <osTimerNew+0xe8>
 800b102:	2008      	movs	r0, #8
 800b104:	f002 fee0 	bl	800dec8 <pvPortMalloc>
 800b108:	6178      	str	r0, [r7, #20]
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d059      	beq.n	800b1c4 <osTimerNew+0xe8>
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	605a      	str	r2, [r3, #4]
 800b11c:	7afb      	ldrb	r3, [r7, #11]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <osTimerNew+0x4c>
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
 800b126:	e001      	b.n	800b12c <osTimerNew+0x50>
 800b128:	2301      	movs	r3, #1
 800b12a:	61fb      	str	r3, [r7, #28]
 800b12c:	f04f 33ff 	mov.w	r3, #4294967295
 800b130:	61bb      	str	r3, [r7, #24]
 800b132:	2300      	movs	r3, #0
 800b134:	627b      	str	r3, [r7, #36]	; 0x24
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d01c      	beq.n	800b176 <osTimerNew+0x9a>
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <osTimerNew+0x6e>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d006      	beq.n	800b160 <osTimerNew+0x84>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	2b2b      	cmp	r3, #43	; 0x2b
 800b158:	d902      	bls.n	800b160 <osTimerNew+0x84>
 800b15a:	2301      	movs	r3, #1
 800b15c:	61bb      	str	r3, [r7, #24]
 800b15e:	e00c      	b.n	800b17a <osTimerNew+0x9e>
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d108      	bne.n	800b17a <osTimerNew+0x9e>
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d104      	bne.n	800b17a <osTimerNew+0x9e>
 800b170:	2300      	movs	r3, #0
 800b172:	61bb      	str	r3, [r7, #24]
 800b174:	e001      	b.n	800b17a <osTimerNew+0x9e>
 800b176:	2300      	movs	r3, #0
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d10c      	bne.n	800b19a <osTimerNew+0xbe>
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	4b12      	ldr	r3, [pc, #72]	; (800b1d0 <osTimerNew+0xf4>)
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	2101      	movs	r1, #1
 800b190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b192:	f002 f882 	bl	800d29a <xTimerCreateStatic>
 800b196:	6238      	str	r0, [r7, #32]
 800b198:	e00b      	b.n	800b1b2 <osTimerNew+0xd6>
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <osTimerNew+0xd6>
 800b1a0:	4b0b      	ldr	r3, [pc, #44]	; (800b1d0 <osTimerNew+0xf4>)
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	69fa      	ldr	r2, [r7, #28]
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ac:	f002 f854 	bl	800d258 <xTimerCreate>
 800b1b0:	6238      	str	r0, [r7, #32]
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d105      	bne.n	800b1c4 <osTimerNew+0xe8>
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <osTimerNew+0xe8>
 800b1be:	6978      	ldr	r0, [r7, #20]
 800b1c0:	f002 ff4e 	bl	800e060 <vPortFree>
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3728      	adds	r7, #40	; 0x28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	0800b0b1 	.word	0x0800b0b1

0800b1d4 <osTimerStart>:
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b088      	sub	sp, #32
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	613b      	str	r3, [r7, #16]
 800b1e2:	f3ef 8305 	mrs	r3, IPSR
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <osTimerStart+0x22>
 800b1ee:	f06f 0305 	mvn.w	r3, #5
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	e017      	b.n	800b226 <osTimerStart+0x52>
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <osTimerStart+0x30>
 800b1fc:	f06f 0303 	mvn.w	r3, #3
 800b200:	617b      	str	r3, [r7, #20]
 800b202:	e010      	b.n	800b226 <osTimerStart+0x52>
 800b204:	2300      	movs	r3, #0
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	2104      	movs	r1, #4
 800b20e:	6938      	ldr	r0, [r7, #16]
 800b210:	f002 f8bc 	bl	800d38c <xTimerGenericCommand>
 800b214:	4603      	mov	r3, r0
 800b216:	2b01      	cmp	r3, #1
 800b218:	d102      	bne.n	800b220 <osTimerStart+0x4c>
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e002      	b.n	800b226 <osTimerStart+0x52>
 800b220:	f06f 0302 	mvn.w	r3, #2
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <osTimerStop>:
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af02      	add	r7, sp, #8
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	613b      	str	r3, [r7, #16]
 800b23c:	f3ef 8305 	mrs	r3, IPSR
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <osTimerStop+0x20>
 800b248:	f06f 0305 	mvn.w	r3, #5
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	e021      	b.n	800b294 <osTimerStop+0x64>
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d103      	bne.n	800b25e <osTimerStop+0x2e>
 800b256:	f06f 0303 	mvn.w	r3, #3
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e01a      	b.n	800b294 <osTimerStop+0x64>
 800b25e:	6938      	ldr	r0, [r7, #16]
 800b260:	f002 fb9a 	bl	800d998 <xTimerIsTimerActive>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d103      	bne.n	800b272 <osTimerStop+0x42>
 800b26a:	f06f 0302 	mvn.w	r3, #2
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	e010      	b.n	800b294 <osTimerStop+0x64>
 800b272:	2300      	movs	r3, #0
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	2300      	movs	r3, #0
 800b278:	2200      	movs	r2, #0
 800b27a:	2103      	movs	r1, #3
 800b27c:	6938      	ldr	r0, [r7, #16]
 800b27e:	f002 f885 	bl	800d38c <xTimerGenericCommand>
 800b282:	4603      	mov	r3, r0
 800b284:	2b01      	cmp	r3, #1
 800b286:	d102      	bne.n	800b28e <osTimerStop+0x5e>
 800b288:	2300      	movs	r3, #0
 800b28a:	617b      	str	r3, [r7, #20]
 800b28c:	e002      	b.n	800b294 <osTimerStop+0x64>
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	617b      	str	r3, [r7, #20]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	4618      	mov	r0, r3
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <osMessageQueueNew>:
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b08a      	sub	sp, #40	; 0x28
 800b2a2:	af02      	add	r7, sp, #8
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	f3ef 8305 	mrs	r3, IPSR
 800b2b2:	613b      	str	r3, [r7, #16]
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d15f      	bne.n	800b37a <osMessageQueueNew+0xdc>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d05c      	beq.n	800b37a <osMessageQueueNew+0xdc>
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d059      	beq.n	800b37a <osMessageQueueNew+0xdc>
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ca:	61bb      	str	r3, [r7, #24]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d029      	beq.n	800b326 <osMessageQueueNew+0x88>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d012      	beq.n	800b300 <osMessageQueueNew+0x62>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	2b4f      	cmp	r3, #79	; 0x4f
 800b2e0:	d90e      	bls.n	800b300 <osMessageQueueNew+0x62>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <osMessageQueueNew+0x62>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	695a      	ldr	r2, [r3, #20]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	68b9      	ldr	r1, [r7, #8]
 800b2f2:	fb01 f303 	mul.w	r3, r1, r3
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d302      	bcc.n	800b300 <osMessageQueueNew+0x62>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	61bb      	str	r3, [r7, #24]
 800b2fe:	e014      	b.n	800b32a <osMessageQueueNew+0x8c>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d110      	bne.n	800b32a <osMessageQueueNew+0x8c>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10c      	bne.n	800b32a <osMessageQueueNew+0x8c>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d108      	bne.n	800b32a <osMessageQueueNew+0x8c>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <osMessageQueueNew+0x8c>
 800b320:	2300      	movs	r3, #0
 800b322:	61bb      	str	r3, [r7, #24]
 800b324:	e001      	b.n	800b32a <osMessageQueueNew+0x8c>
 800b326:	2300      	movs	r3, #0
 800b328:	61bb      	str	r3, [r7, #24]
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d10b      	bne.n	800b348 <osMessageQueueNew+0xaa>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	691a      	ldr	r2, [r3, #16]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	2100      	movs	r1, #0
 800b33a:	9100      	str	r1, [sp, #0]
 800b33c:	68b9      	ldr	r1, [r7, #8]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fa2e 	bl	800b7a0 <xQueueGenericCreateStatic>
 800b344:	61f8      	str	r0, [r7, #28]
 800b346:	e008      	b.n	800b35a <osMessageQueueNew+0xbc>
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d105      	bne.n	800b35a <osMessageQueueNew+0xbc>
 800b34e:	2200      	movs	r2, #0
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 fa9c 	bl	800b890 <xQueueGenericCreate>
 800b358:	61f8      	str	r0, [r7, #28]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00c      	beq.n	800b37a <osMessageQueueNew+0xdc>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <osMessageQueueNew+0xd0>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e001      	b.n	800b372 <osMessageQueueNew+0xd4>
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]
 800b372:	6979      	ldr	r1, [r7, #20]
 800b374:	69f8      	ldr	r0, [r7, #28]
 800b376:	f000 fef3 	bl	800c160 <vQueueAddToRegistry>
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	4618      	mov	r0, r3
 800b37e:	3720      	adds	r7, #32
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <osMessageQueuePut>:
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	603b      	str	r3, [r7, #0]
 800b390:	4613      	mov	r3, r2
 800b392:	71fb      	strb	r3, [r7, #7]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	61bb      	str	r3, [r7, #24]
 800b398:	2300      	movs	r3, #0
 800b39a:	61fb      	str	r3, [r7, #28]
 800b39c:	f3ef 8305 	mrs	r3, IPSR
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d028      	beq.n	800b3fa <osMessageQueuePut+0x76>
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <osMessageQueuePut+0x36>
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <osMessageQueuePut+0x36>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <osMessageQueuePut+0x3e>
 800b3ba:	f06f 0303 	mvn.w	r3, #3
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	e038      	b.n	800b434 <osMessageQueuePut+0xb0>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	613b      	str	r3, [r7, #16]
 800b3c6:	f107 0210 	add.w	r2, r7, #16
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	68b9      	ldr	r1, [r7, #8]
 800b3ce:	69b8      	ldr	r0, [r7, #24]
 800b3d0:	f000 fbba 	bl	800bb48 <xQueueGenericSendFromISR>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d003      	beq.n	800b3e2 <osMessageQueuePut+0x5e>
 800b3da:	f06f 0302 	mvn.w	r3, #2
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	e028      	b.n	800b434 <osMessageQueuePut+0xb0>
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d025      	beq.n	800b434 <osMessageQueuePut+0xb0>
 800b3e8:	4b15      	ldr	r3, [pc, #84]	; (800b440 <osMessageQueuePut+0xbc>)
 800b3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	e01c      	b.n	800b434 <osMessageQueuePut+0xb0>
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <osMessageQueuePut+0x82>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d103      	bne.n	800b40e <osMessageQueuePut+0x8a>
 800b406:	f06f 0303 	mvn.w	r3, #3
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	e012      	b.n	800b434 <osMessageQueuePut+0xb0>
 800b40e:	2300      	movs	r3, #0
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	68b9      	ldr	r1, [r7, #8]
 800b414:	69b8      	ldr	r0, [r7, #24]
 800b416:	f000 fa99 	bl	800b94c <xQueueGenericSend>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d009      	beq.n	800b434 <osMessageQueuePut+0xb0>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <osMessageQueuePut+0xaa>
 800b426:	f06f 0301 	mvn.w	r3, #1
 800b42a:	61fb      	str	r3, [r7, #28]
 800b42c:	e002      	b.n	800b434 <osMessageQueuePut+0xb0>
 800b42e:	f06f 0302 	mvn.w	r3, #2
 800b432:	61fb      	str	r3, [r7, #28]
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4618      	mov	r0, r3
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	e000ed04 	.word	0xe000ed04

0800b444 <osMessageQueueGet>:
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
 800b450:	603b      	str	r3, [r7, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	61bb      	str	r3, [r7, #24]
 800b456:	2300      	movs	r3, #0
 800b458:	61fb      	str	r3, [r7, #28]
 800b45a:	f3ef 8305 	mrs	r3, IPSR
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d028      	beq.n	800b4b8 <osMessageQueueGet+0x74>
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <osMessageQueueGet+0x34>
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <osMessageQueueGet+0x34>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d003      	beq.n	800b480 <osMessageQueueGet+0x3c>
 800b478:	f06f 0303 	mvn.w	r3, #3
 800b47c:	61fb      	str	r3, [r7, #28]
 800b47e:	e037      	b.n	800b4f0 <osMessageQueueGet+0xac>
 800b480:	2300      	movs	r3, #0
 800b482:	613b      	str	r3, [r7, #16]
 800b484:	f107 0310 	add.w	r3, r7, #16
 800b488:	461a      	mov	r2, r3
 800b48a:	68b9      	ldr	r1, [r7, #8]
 800b48c:	69b8      	ldr	r0, [r7, #24]
 800b48e:	f000 fcd7 	bl	800be40 <xQueueReceiveFromISR>
 800b492:	4603      	mov	r3, r0
 800b494:	2b01      	cmp	r3, #1
 800b496:	d003      	beq.n	800b4a0 <osMessageQueueGet+0x5c>
 800b498:	f06f 0302 	mvn.w	r3, #2
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	e027      	b.n	800b4f0 <osMessageQueueGet+0xac>
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d024      	beq.n	800b4f0 <osMessageQueueGet+0xac>
 800b4a6:	4b15      	ldr	r3, [pc, #84]	; (800b4fc <osMessageQueueGet+0xb8>)
 800b4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	e01b      	b.n	800b4f0 <osMessageQueueGet+0xac>
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <osMessageQueueGet+0x80>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d103      	bne.n	800b4cc <osMessageQueueGet+0x88>
 800b4c4:	f06f 0303 	mvn.w	r3, #3
 800b4c8:	61fb      	str	r3, [r7, #28]
 800b4ca:	e011      	b.n	800b4f0 <osMessageQueueGet+0xac>
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	69b8      	ldr	r0, [r7, #24]
 800b4d2:	f000 fbd5 	bl	800bc80 <xQueueReceive>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d009      	beq.n	800b4f0 <osMessageQueueGet+0xac>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <osMessageQueueGet+0xa6>
 800b4e2:	f06f 0301 	mvn.w	r3, #1
 800b4e6:	61fb      	str	r3, [r7, #28]
 800b4e8:	e002      	b.n	800b4f0 <osMessageQueueGet+0xac>
 800b4ea:	f06f 0302 	mvn.w	r3, #2
 800b4ee:	61fb      	str	r3, [r7, #28]
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3720      	adds	r7, #32
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	e000ed04 	.word	0xe000ed04

0800b500 <vApplicationGetIdleTaskMemory>:
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4a07      	ldr	r2, [pc, #28]	; (800b52c <vApplicationGetIdleTaskMemory+0x2c>)
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	4a06      	ldr	r2, [pc, #24]	; (800b530 <vApplicationGetIdleTaskMemory+0x30>)
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2280      	movs	r2, #128	; 0x80
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	20000820 	.word	0x20000820
 800b530:	2000087c 	.word	0x2000087c

0800b534 <vApplicationGetTimerTaskMemory>:
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4a07      	ldr	r2, [pc, #28]	; (800b560 <vApplicationGetTimerTaskMemory+0x2c>)
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	4a06      	ldr	r2, [pc, #24]	; (800b564 <vApplicationGetTimerTaskMemory+0x30>)
 800b54a:	601a      	str	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	bf00      	nop
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	20000a7c 	.word	0x20000a7c
 800b564:	20000ad8 	.word	0x20000ad8

0800b568 <vListInitialise>:
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f103 0208 	add.w	r2, r3, #8
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	605a      	str	r2, [r3, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295
 800b580:	609a      	str	r2, [r3, #8]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f103 0208 	add.w	r2, r3, #8
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	60da      	str	r2, [r3, #12]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f103 0208 	add.w	r2, r3, #8
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	611a      	str	r2, [r3, #16]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <vListInitialiseItem>:
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	611a      	str	r2, [r3, #16]
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <vListInsertEnd>:
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	60fb      	str	r3, [r7, #12]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	605a      	str	r2, [r3, #4]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	609a      	str	r2, [r3, #8]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	605a      	str	r2, [r3, #4]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	609a      	str	r2, [r3, #8]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	611a      	str	r2, [r3, #16]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	bf00      	nop
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <vListInsert>:
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60bb      	str	r3, [r7, #8]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b620:	d103      	bne.n	800b62a <vListInsert+0x20>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	e00c      	b.n	800b644 <vListInsert+0x3a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3308      	adds	r3, #8
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	e002      	b.n	800b638 <vListInsert+0x2e>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	429a      	cmp	r2, r3
 800b642:	d2f6      	bcs.n	800b632 <vListInsert+0x28>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	605a      	str	r2, [r3, #4]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	609a      	str	r2, [r3, #8]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	609a      	str	r2, [r3, #8]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	605a      	str	r2, [r3, #4]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	611a      	str	r2, [r3, #16]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	bf00      	nop
 800b672:	3714      	adds	r7, #20
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <uxListRemove>:
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6892      	ldr	r2, [r2, #8]
 800b692:	609a      	str	r2, [r3, #8]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	6852      	ldr	r2, [r2, #4]
 800b69c:	605a      	str	r2, [r3, #4]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d103      	bne.n	800b6b0 <uxListRemove+0x34>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	689a      	ldr	r2, [r3, #8]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	605a      	str	r2, [r3, #4]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	611a      	str	r2, [r3, #16]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	1e5a      	subs	r2, r3, #1
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <xQueueGenericReset>:
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	60fb      	str	r3, [r7, #12]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10a      	bne.n	800b6fa <xQueueGenericReset+0x2a>
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	60bb      	str	r3, [r7, #8]
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <xQueueGenericReset+0x28>
 800b6fa:	f002 fac3 	bl	800dc84 <vPortEnterCritical>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b706:	68f9      	ldr	r1, [r7, #12]
 800b708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b70a:	fb01 f303 	mul.w	r3, r1, r3
 800b70e:	441a      	add	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	609a      	str	r2, [r3, #8]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	639a      	str	r2, [r3, #56]	; 0x38
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	605a      	str	r2, [r3, #4]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72a:	3b01      	subs	r3, #1
 800b72c:	68f9      	ldr	r1, [r7, #12]
 800b72e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b730:	fb01 f303 	mul.w	r3, r1, r3
 800b734:	441a      	add	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	60da      	str	r2, [r3, #12]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	22ff      	movs	r2, #255	; 0xff
 800b73e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	22ff      	movs	r2, #255	; 0xff
 800b746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d114      	bne.n	800b77a <xQueueGenericReset+0xaa>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d01a      	beq.n	800b78e <xQueueGenericReset+0xbe>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3310      	adds	r3, #16
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 fa95 	bl	800cc8c <xTaskRemoveFromEventList>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d012      	beq.n	800b78e <xQueueGenericReset+0xbe>
 800b768:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <xQueueGenericReset+0xcc>)
 800b76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	e009      	b.n	800b78e <xQueueGenericReset+0xbe>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	3310      	adds	r3, #16
 800b77e:	4618      	mov	r0, r3
 800b780:	f7ff fef2 	bl	800b568 <vListInitialise>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3324      	adds	r3, #36	; 0x24
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff feed 	bl	800b568 <vListInitialise>
 800b78e:	f002 faa9 	bl	800dce4 <vPortExitCritical>
 800b792:	2301      	movs	r3, #1
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <xQueueGenericCreateStatic>:
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08e      	sub	sp, #56	; 0x38
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xQueueGenericCreateStatic+0x2a>
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueGenericCreateStatic+0x28>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <xQueueGenericCreateStatic+0x46>
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xQueueGenericCreateStatic+0x44>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <xQueueGenericCreateStatic+0x52>
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <xQueueGenericCreateStatic+0x56>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <xQueueGenericCreateStatic+0x58>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10a      	bne.n	800b812 <xQueueGenericCreateStatic+0x72>
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	623b      	str	r3, [r7, #32]
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <xQueueGenericCreateStatic+0x70>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <xQueueGenericCreateStatic+0x7e>
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d101      	bne.n	800b822 <xQueueGenericCreateStatic+0x82>
 800b81e:	2301      	movs	r3, #1
 800b820:	e000      	b.n	800b824 <xQueueGenericCreateStatic+0x84>
 800b822:	2300      	movs	r3, #0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <xQueueGenericCreateStatic+0x9e>
 800b828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	61fb      	str	r3, [r7, #28]
 800b83a:	bf00      	nop
 800b83c:	e7fe      	b.n	800b83c <xQueueGenericCreateStatic+0x9c>
 800b83e:	2350      	movs	r3, #80	; 0x50
 800b840:	617b      	str	r3, [r7, #20]
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2b50      	cmp	r3, #80	; 0x50
 800b846:	d00a      	beq.n	800b85e <xQueueGenericCreateStatic+0xbe>
 800b848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	61bb      	str	r3, [r7, #24]
 800b85a:	bf00      	nop
 800b85c:	e7fe      	b.n	800b85c <xQueueGenericCreateStatic+0xbc>
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00d      	beq.n	800b886 <xQueueGenericCreateStatic+0xe6>
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b872:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	4613      	mov	r3, r2
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	68b9      	ldr	r1, [r7, #8]
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 f83f 	bl	800b904 <prvInitialiseNewQueue>
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	4618      	mov	r0, r3
 800b88a:	3730      	adds	r7, #48	; 0x30
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <xQueueGenericCreate>:
 800b890:	b580      	push	{r7, lr}
 800b892:	b08a      	sub	sp, #40	; 0x28
 800b894:	af02      	add	r7, sp, #8
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	4613      	mov	r3, r2
 800b89c:	71fb      	strb	r3, [r7, #7]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10a      	bne.n	800b8ba <xQueueGenericCreate+0x2a>
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	613b      	str	r3, [r7, #16]
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <xQueueGenericCreate+0x28>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	fb02 f303 	mul.w	r3, r2, r3
 800b8c2:	61fb      	str	r3, [r7, #28]
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	3350      	adds	r3, #80	; 0x50
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f002 fafd 	bl	800dec8 <pvPortMalloc>
 800b8ce:	61b8      	str	r0, [r7, #24]
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d011      	beq.n	800b8fa <xQueueGenericCreate+0x6a>
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	3350      	adds	r3, #80	; 0x50
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8e8:	79fa      	ldrb	r2, [r7, #7]
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 f805 	bl	800b904 <prvInitialiseNewQueue>
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <prvInitialiseNewQueue>:
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	70fb      	strb	r3, [r7, #3]
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d103      	bne.n	800b920 <prvInitialiseNewQueue+0x1c>
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	e002      	b.n	800b926 <prvInitialiseNewQueue+0x22>
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	641a      	str	r2, [r3, #64]	; 0x40
 800b932:	2101      	movs	r1, #1
 800b934:	69b8      	ldr	r0, [r7, #24]
 800b936:	f7ff fecb 	bl	800b6d0 <xQueueGenericReset>
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	78fa      	ldrb	r2, [r7, #3]
 800b93e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <xQueueGenericSend>:
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08e      	sub	sp, #56	; 0x38
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
 800b95a:	2300      	movs	r3, #0
 800b95c:	637b      	str	r3, [r7, #52]	; 0x34
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	633b      	str	r3, [r7, #48]	; 0x30
 800b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <xQueueGenericSend+0x32>
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	62bb      	str	r3, [r7, #40]	; 0x28
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <xQueueGenericSend+0x30>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d103      	bne.n	800b98c <xQueueGenericSend+0x40>
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <xQueueGenericSend+0x44>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e000      	b.n	800b992 <xQueueGenericSend+0x46>
 800b990:	2300      	movs	r3, #0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <xQueueGenericSend+0x60>
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9a8:	bf00      	nop
 800b9aa:	e7fe      	b.n	800b9aa <xQueueGenericSend+0x5e>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d103      	bne.n	800b9ba <xQueueGenericSend+0x6e>
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d101      	bne.n	800b9be <xQueueGenericSend+0x72>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e000      	b.n	800b9c0 <xQueueGenericSend+0x74>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <xQueueGenericSend+0x8e>
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	623b      	str	r3, [r7, #32]
 800b9d6:	bf00      	nop
 800b9d8:	e7fe      	b.n	800b9d8 <xQueueGenericSend+0x8c>
 800b9da:	f001 fb15 	bl	800d008 <xTaskGetSchedulerState>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <xQueueGenericSend+0x9e>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <xQueueGenericSend+0xa2>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <xQueueGenericSend+0xa4>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10a      	bne.n	800ba0a <xQueueGenericSend+0xbe>
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	61fb      	str	r3, [r7, #28]
 800ba06:	bf00      	nop
 800ba08:	e7fe      	b.n	800ba08 <xQueueGenericSend+0xbc>
 800ba0a:	f002 f93b 	bl	800dc84 <vPortEnterCritical>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d302      	bcc.n	800ba20 <xQueueGenericSend+0xd4>
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d129      	bne.n	800ba74 <xQueueGenericSend+0x128>
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba26:	f000 fa8b 	bl	800bf40 <prvCopyDataToQueue>
 800ba2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d010      	beq.n	800ba56 <xQueueGenericSend+0x10a>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	3324      	adds	r3, #36	; 0x24
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f001 f927 	bl	800cc8c <xTaskRemoveFromEventList>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d013      	beq.n	800ba6c <xQueueGenericSend+0x120>
 800ba44:	4b3f      	ldr	r3, [pc, #252]	; (800bb44 <xQueueGenericSend+0x1f8>)
 800ba46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	e00a      	b.n	800ba6c <xQueueGenericSend+0x120>
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <xQueueGenericSend+0x120>
 800ba5c:	4b39      	ldr	r3, [pc, #228]	; (800bb44 <xQueueGenericSend+0x1f8>)
 800ba5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f002 f93a 	bl	800dce4 <vPortExitCritical>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e063      	b.n	800bb3c <xQueueGenericSend+0x1f0>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d103      	bne.n	800ba82 <xQueueGenericSend+0x136>
 800ba7a:	f002 f933 	bl	800dce4 <vPortExitCritical>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e05c      	b.n	800bb3c <xQueueGenericSend+0x1f0>
 800ba82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d106      	bne.n	800ba96 <xQueueGenericSend+0x14a>
 800ba88:	f107 0314 	add.w	r3, r7, #20
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 f961 	bl	800cd54 <vTaskInternalSetTimeOutState>
 800ba92:	2301      	movs	r3, #1
 800ba94:	637b      	str	r3, [r7, #52]	; 0x34
 800ba96:	f002 f925 	bl	800dce4 <vPortExitCritical>
 800ba9a:	f000 fed3 	bl	800c844 <vTaskSuspendAll>
 800ba9e:	f002 f8f1 	bl	800dc84 <vPortEnterCritical>
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baa8:	b25b      	sxtb	r3, r3
 800baaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baae:	d103      	bne.n	800bab8 <xQueueGenericSend+0x16c>
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800babe:	b25b      	sxtb	r3, r3
 800bac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac4:	d103      	bne.n	800bace <xQueueGenericSend+0x182>
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bace:	f002 f909 	bl	800dce4 <vPortExitCritical>
 800bad2:	1d3a      	adds	r2, r7, #4
 800bad4:	f107 0314 	add.w	r3, r7, #20
 800bad8:	4611      	mov	r1, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f001 f950 	bl	800cd80 <xTaskCheckForTimeOut>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d124      	bne.n	800bb30 <xQueueGenericSend+0x1e4>
 800bae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae8:	f000 fb22 	bl	800c130 <prvIsQueueFull>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d018      	beq.n	800bb24 <xQueueGenericSend+0x1d8>
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	3310      	adds	r3, #16
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	4611      	mov	r1, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 f876 	bl	800cbec <vTaskPlaceOnEventList>
 800bb00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb02:	f000 faad 	bl	800c060 <prvUnlockQueue>
 800bb06:	f000 feab 	bl	800c860 <xTaskResumeAll>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f47f af7c 	bne.w	800ba0a <xQueueGenericSend+0xbe>
 800bb12:	4b0c      	ldr	r3, [pc, #48]	; (800bb44 <xQueueGenericSend+0x1f8>)
 800bb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	e772      	b.n	800ba0a <xQueueGenericSend+0xbe>
 800bb24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb26:	f000 fa9b 	bl	800c060 <prvUnlockQueue>
 800bb2a:	f000 fe99 	bl	800c860 <xTaskResumeAll>
 800bb2e:	e76c      	b.n	800ba0a <xQueueGenericSend+0xbe>
 800bb30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb32:	f000 fa95 	bl	800c060 <prvUnlockQueue>
 800bb36:	f000 fe93 	bl	800c860 <xTaskResumeAll>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3738      	adds	r7, #56	; 0x38
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	e000ed04 	.word	0xe000ed04

0800bb48 <xQueueGenericSendFromISR>:
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b090      	sub	sp, #64	; 0x40
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10a      	bne.n	800bb76 <xQueueGenericSendFromISR+0x2e>
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xQueueGenericSendFromISR+0x2c>
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d103      	bne.n	800bb84 <xQueueGenericSendFromISR+0x3c>
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <xQueueGenericSendFromISR+0x40>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e000      	b.n	800bb8a <xQueueGenericSendFromISR+0x42>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10a      	bne.n	800bba4 <xQueueGenericSendFromISR+0x5c>
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	627b      	str	r3, [r7, #36]	; 0x24
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <xQueueGenericSendFromISR+0x5a>
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	d103      	bne.n	800bbb2 <xQueueGenericSendFromISR+0x6a>
 800bbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d101      	bne.n	800bbb6 <xQueueGenericSendFromISR+0x6e>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <xQueueGenericSendFromISR+0x70>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10a      	bne.n	800bbd2 <xQueueGenericSendFromISR+0x8a>
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	623b      	str	r3, [r7, #32]
 800bbce:	bf00      	nop
 800bbd0:	e7fe      	b.n	800bbd0 <xQueueGenericSendFromISR+0x88>
 800bbd2:	f002 f939 	bl	800de48 <vPortValidateInterruptPriority>
 800bbd6:	f3ef 8211 	mrs	r2, BASEPRI
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	61fa      	str	r2, [r7, #28]
 800bbec:	61bb      	str	r3, [r7, #24]
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d302      	bcc.n	800bc04 <xQueueGenericSendFromISR+0xbc>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d12f      	bne.n	800bc64 <xQueueGenericSendFromISR+0x11c>
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc1a:	f000 f991 	bl	800bf40 <prvCopyDataToQueue>
 800bc1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d112      	bne.n	800bc4e <xQueueGenericSendFromISR+0x106>
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d016      	beq.n	800bc5e <xQueueGenericSendFromISR+0x116>
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	3324      	adds	r3, #36	; 0x24
 800bc34:	4618      	mov	r0, r3
 800bc36:	f001 f829 	bl	800cc8c <xTaskRemoveFromEventList>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00e      	beq.n	800bc5e <xQueueGenericSendFromISR+0x116>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00b      	beq.n	800bc5e <xQueueGenericSendFromISR+0x116>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	e007      	b.n	800bc5e <xQueueGenericSendFromISR+0x116>
 800bc4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc52:	3301      	adds	r3, #1
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	b25a      	sxtb	r2, r3
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc5e:	2301      	movs	r3, #1
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc62:	e001      	b.n	800bc68 <xQueueGenericSendFromISR+0x120>
 800bc64:	2300      	movs	r3, #0
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	bf00      	nop
 800bc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc76:	4618      	mov	r0, r3
 800bc78:	3740      	adds	r7, #64	; 0x40
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <xQueueReceive>:
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08c      	sub	sp, #48	; 0x30
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10a      	bne.n	800bcb0 <xQueueReceive+0x30>
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	623b      	str	r3, [r7, #32]
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <xQueueReceive+0x2e>
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d103      	bne.n	800bcbe <xQueueReceive+0x3e>
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <xQueueReceive+0x42>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e000      	b.n	800bcc4 <xQueueReceive+0x44>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <xQueueReceive+0x5e>
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <xQueueReceive+0x5c>
 800bcde:	f001 f993 	bl	800d008 <xTaskGetSchedulerState>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d102      	bne.n	800bcee <xQueueReceive+0x6e>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <xQueueReceive+0x72>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e000      	b.n	800bcf4 <xQueueReceive+0x74>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10a      	bne.n	800bd0e <xQueueReceive+0x8e>
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	61bb      	str	r3, [r7, #24]
 800bd0a:	bf00      	nop
 800bd0c:	e7fe      	b.n	800bd0c <xQueueReceive+0x8c>
 800bd0e:	f001 ffb9 	bl	800dc84 <vPortEnterCritical>
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	627b      	str	r3, [r7, #36]	; 0x24
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01f      	beq.n	800bd5e <xQueueReceive+0xde>
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd22:	f000 f977 	bl	800c014 <prvCopyDataFromQueue>
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	1e5a      	subs	r2, r3, #1
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	639a      	str	r2, [r3, #56]	; 0x38
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00f      	beq.n	800bd56 <xQueueReceive+0xd6>
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	3310      	adds	r3, #16
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 ffa6 	bl	800cc8c <xTaskRemoveFromEventList>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d007      	beq.n	800bd56 <xQueueReceive+0xd6>
 800bd46:	4b3d      	ldr	r3, [pc, #244]	; (800be3c <xQueueReceive+0x1bc>)
 800bd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f001 ffc5 	bl	800dce4 <vPortExitCritical>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e069      	b.n	800be32 <xQueueReceive+0x1b2>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d103      	bne.n	800bd6c <xQueueReceive+0xec>
 800bd64:	f001 ffbe 	bl	800dce4 <vPortExitCritical>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e062      	b.n	800be32 <xQueueReceive+0x1b2>
 800bd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d106      	bne.n	800bd80 <xQueueReceive+0x100>
 800bd72:	f107 0310 	add.w	r3, r7, #16
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 ffec 	bl	800cd54 <vTaskInternalSetTimeOutState>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd80:	f001 ffb0 	bl	800dce4 <vPortExitCritical>
 800bd84:	f000 fd5e 	bl	800c844 <vTaskSuspendAll>
 800bd88:	f001 ff7c 	bl	800dc84 <vPortEnterCritical>
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd92:	b25b      	sxtb	r3, r3
 800bd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd98:	d103      	bne.n	800bda2 <xQueueReceive+0x122>
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bda8:	b25b      	sxtb	r3, r3
 800bdaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdae:	d103      	bne.n	800bdb8 <xQueueReceive+0x138>
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdb8:	f001 ff94 	bl	800dce4 <vPortExitCritical>
 800bdbc:	1d3a      	adds	r2, r7, #4
 800bdbe:	f107 0310 	add.w	r3, r7, #16
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 ffdb 	bl	800cd80 <xTaskCheckForTimeOut>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d123      	bne.n	800be18 <xQueueReceive+0x198>
 800bdd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd2:	f000 f997 	bl	800c104 <prvIsQueueEmpty>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d017      	beq.n	800be0c <xQueueReceive+0x18c>
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	3324      	adds	r3, #36	; 0x24
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	4611      	mov	r1, r2
 800bde4:	4618      	mov	r0, r3
 800bde6:	f000 ff01 	bl	800cbec <vTaskPlaceOnEventList>
 800bdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdec:	f000 f938 	bl	800c060 <prvUnlockQueue>
 800bdf0:	f000 fd36 	bl	800c860 <xTaskResumeAll>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d189      	bne.n	800bd0e <xQueueReceive+0x8e>
 800bdfa:	4b10      	ldr	r3, [pc, #64]	; (800be3c <xQueueReceive+0x1bc>)
 800bdfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	e780      	b.n	800bd0e <xQueueReceive+0x8e>
 800be0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be0e:	f000 f927 	bl	800c060 <prvUnlockQueue>
 800be12:	f000 fd25 	bl	800c860 <xTaskResumeAll>
 800be16:	e77a      	b.n	800bd0e <xQueueReceive+0x8e>
 800be18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be1a:	f000 f921 	bl	800c060 <prvUnlockQueue>
 800be1e:	f000 fd1f 	bl	800c860 <xTaskResumeAll>
 800be22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be24:	f000 f96e 	bl	800c104 <prvIsQueueEmpty>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f43f af6f 	beq.w	800bd0e <xQueueReceive+0x8e>
 800be30:	2300      	movs	r3, #0
 800be32:	4618      	mov	r0, r3
 800be34:	3730      	adds	r7, #48	; 0x30
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	e000ed04 	.word	0xe000ed04

0800be40 <xQueueReceiveFromISR>:
 800be40:	b580      	push	{r7, lr}
 800be42:	b08e      	sub	sp, #56	; 0x38
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	633b      	str	r3, [r7, #48]	; 0x30
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10a      	bne.n	800be6c <xQueueReceiveFromISR+0x2c>
 800be56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	623b      	str	r3, [r7, #32]
 800be68:	bf00      	nop
 800be6a:	e7fe      	b.n	800be6a <xQueueReceiveFromISR+0x2a>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d103      	bne.n	800be7a <xQueueReceiveFromISR+0x3a>
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <xQueueReceiveFromISR+0x3e>
 800be7a:	2301      	movs	r3, #1
 800be7c:	e000      	b.n	800be80 <xQueueReceiveFromISR+0x40>
 800be7e:	2300      	movs	r3, #0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xQueueReceiveFromISR+0x5a>
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	61fb      	str	r3, [r7, #28]
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xQueueReceiveFromISR+0x58>
 800be9a:	f001 ffd5 	bl	800de48 <vPortValidateInterruptPriority>
 800be9e:	f3ef 8211 	mrs	r2, BASEPRI
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	61ba      	str	r2, [r7, #24]
 800beb4:	617b      	str	r3, [r7, #20]
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bebe:	62bb      	str	r3, [r7, #40]	; 0x28
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d02f      	beq.n	800bf26 <xQueueReceiveFromISR+0xe6>
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800becc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bed0:	68b9      	ldr	r1, [r7, #8]
 800bed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bed4:	f000 f89e 	bl	800c014 <prvCopyDataFromQueue>
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	1e5a      	subs	r2, r3, #1
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	639a      	str	r2, [r3, #56]	; 0x38
 800bee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee8:	d112      	bne.n	800bf10 <xQueueReceiveFromISR+0xd0>
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d016      	beq.n	800bf20 <xQueueReceiveFromISR+0xe0>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	3310      	adds	r3, #16
 800bef6:	4618      	mov	r0, r3
 800bef8:	f000 fec8 	bl	800cc8c <xTaskRemoveFromEventList>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00e      	beq.n	800bf20 <xQueueReceiveFromISR+0xe0>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00b      	beq.n	800bf20 <xQueueReceiveFromISR+0xe0>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e007      	b.n	800bf20 <xQueueReceiveFromISR+0xe0>
 800bf10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf14:	3301      	adds	r3, #1
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	b25a      	sxtb	r2, r3
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf20:	2301      	movs	r3, #1
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
 800bf24:	e001      	b.n	800bf2a <xQueueReceiveFromISR+0xea>
 800bf26:	2300      	movs	r3, #0
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	613b      	str	r3, [r7, #16]
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	bf00      	nop
 800bf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3738      	adds	r7, #56	; 0x38
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <prvCopyDataToQueue>:
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf54:	613b      	str	r3, [r7, #16]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10d      	bne.n	800bf7a <prvCopyDataToQueue+0x3a>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d14d      	bne.n	800c002 <prvCopyDataToQueue+0xc2>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f001 f86a 	bl	800d044 <xTaskPriorityDisinherit>
 800bf70:	6178      	str	r0, [r7, #20]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	609a      	str	r2, [r3, #8]
 800bf78:	e043      	b.n	800c002 <prvCopyDataToQueue+0xc2>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d119      	bne.n	800bfb4 <prvCopyDataToQueue+0x74>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6858      	ldr	r0, [r3, #4]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf88:	461a      	mov	r2, r3
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	f002 f9c0 	bl	800e310 <memcpy>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf98:	441a      	add	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	605a      	str	r2, [r3, #4]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d32b      	bcc.n	800c002 <prvCopyDataToQueue+0xc2>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	605a      	str	r2, [r3, #4]
 800bfb2:	e026      	b.n	800c002 <prvCopyDataToQueue+0xc2>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68d8      	ldr	r0, [r3, #12]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	68b9      	ldr	r1, [r7, #8]
 800bfc0:	f002 f9a6 	bl	800e310 <memcpy>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfcc:	425b      	negs	r3, r3
 800bfce:	441a      	add	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	60da      	str	r2, [r3, #12]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68da      	ldr	r2, [r3, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d207      	bcs.n	800bff0 <prvCopyDataToQueue+0xb0>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe8:	425b      	negs	r3, r3
 800bfea:	441a      	add	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	60da      	str	r2, [r3, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d105      	bne.n	800c002 <prvCopyDataToQueue+0xc2>
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <prvCopyDataToQueue+0xc2>
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	3b01      	subs	r3, #1
 800c000:	613b      	str	r3, [r7, #16]
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	639a      	str	r2, [r3, #56]	; 0x38
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <prvCopyDataFromQueue>:
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	2b00      	cmp	r3, #0
 800c024:	d018      	beq.n	800c058 <prvCopyDataFromQueue+0x44>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	441a      	add	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60da      	str	r2, [r3, #12]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d303      	bcc.n	800c048 <prvCopyDataFromQueue+0x34>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	60da      	str	r2, [r3, #12]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68d9      	ldr	r1, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c050:	461a      	mov	r2, r3
 800c052:	6838      	ldr	r0, [r7, #0]
 800c054:	f002 f95c 	bl	800e310 <memcpy>
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <prvUnlockQueue>:
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	f001 fe0c 	bl	800dc84 <vPortEnterCritical>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c072:	73fb      	strb	r3, [r7, #15]
 800c074:	e011      	b.n	800c09a <prvUnlockQueue+0x3a>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d012      	beq.n	800c0a4 <prvUnlockQueue+0x44>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3324      	adds	r3, #36	; 0x24
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fe02 	bl	800cc8c <xTaskRemoveFromEventList>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <prvUnlockQueue+0x32>
 800c08e:	f000 fed9 	bl	800ce44 <vTaskMissedYield>
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	3b01      	subs	r3, #1
 800c096:	b2db      	uxtb	r3, r3
 800c098:	73fb      	strb	r3, [r7, #15]
 800c09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dce9      	bgt.n	800c076 <prvUnlockQueue+0x16>
 800c0a2:	e000      	b.n	800c0a6 <prvUnlockQueue+0x46>
 800c0a4:	bf00      	nop
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	22ff      	movs	r2, #255	; 0xff
 800c0aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0ae:	f001 fe19 	bl	800dce4 <vPortExitCritical>
 800c0b2:	f001 fde7 	bl	800dc84 <vPortEnterCritical>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0bc:	73bb      	strb	r3, [r7, #14]
 800c0be:	e011      	b.n	800c0e4 <prvUnlockQueue+0x84>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d012      	beq.n	800c0ee <prvUnlockQueue+0x8e>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3310      	adds	r3, #16
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fddd 	bl	800cc8c <xTaskRemoveFromEventList>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d001      	beq.n	800c0dc <prvUnlockQueue+0x7c>
 800c0d8:	f000 feb4 	bl	800ce44 <vTaskMissedYield>
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	73bb      	strb	r3, [r7, #14]
 800c0e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dce9      	bgt.n	800c0c0 <prvUnlockQueue+0x60>
 800c0ec:	e000      	b.n	800c0f0 <prvUnlockQueue+0x90>
 800c0ee:	bf00      	nop
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	22ff      	movs	r2, #255	; 0xff
 800c0f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0f8:	f001 fdf4 	bl	800dce4 <vPortExitCritical>
 800c0fc:	bf00      	nop
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <prvIsQueueEmpty>:
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	f001 fdba 	bl	800dc84 <vPortEnterCritical>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c114:	2b00      	cmp	r3, #0
 800c116:	d102      	bne.n	800c11e <prvIsQueueEmpty+0x1a>
 800c118:	2301      	movs	r3, #1
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	e001      	b.n	800c122 <prvIsQueueEmpty+0x1e>
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	f001 fddf 	bl	800dce4 <vPortExitCritical>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <prvIsQueueFull>:
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	f001 fda4 	bl	800dc84 <vPortEnterCritical>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c144:	429a      	cmp	r2, r3
 800c146:	d102      	bne.n	800c14e <prvIsQueueFull+0x1e>
 800c148:	2301      	movs	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e001      	b.n	800c152 <prvIsQueueFull+0x22>
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	f001 fdc7 	bl	800dce4 <vPortExitCritical>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <vQueueAddToRegistry>:
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
 800c16a:	2300      	movs	r3, #0
 800c16c:	60fb      	str	r3, [r7, #12]
 800c16e:	e014      	b.n	800c19a <vQueueAddToRegistry+0x3a>
 800c170:	4a0f      	ldr	r2, [pc, #60]	; (800c1b0 <vQueueAddToRegistry+0x50>)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10b      	bne.n	800c194 <vQueueAddToRegistry+0x34>
 800c17c:	490c      	ldr	r1, [pc, #48]	; (800c1b0 <vQueueAddToRegistry+0x50>)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c186:	4a0a      	ldr	r2, [pc, #40]	; (800c1b0 <vQueueAddToRegistry+0x50>)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	00db      	lsls	r3, r3, #3
 800c18c:	4413      	add	r3, r2
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	605a      	str	r2, [r3, #4]
 800c192:	e006      	b.n	800c1a2 <vQueueAddToRegistry+0x42>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3301      	adds	r3, #1
 800c198:	60fb      	str	r3, [r7, #12]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b07      	cmp	r3, #7
 800c19e:	d9e7      	bls.n	800c170 <vQueueAddToRegistry+0x10>
 800c1a0:	bf00      	nop
 800c1a2:	bf00      	nop
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	200050d8 	.word	0x200050d8

0800c1b4 <vQueueWaitForMessageRestricted>:
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	f001 fd5e 	bl	800dc84 <vPortEnterCritical>
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ce:	b25b      	sxtb	r3, r3
 800c1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d4:	d103      	bne.n	800c1de <vQueueWaitForMessageRestricted+0x2a>
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1e4:	b25b      	sxtb	r3, r3
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ea:	d103      	bne.n	800c1f4 <vQueueWaitForMessageRestricted+0x40>
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1f4:	f001 fd76 	bl	800dce4 <vPortExitCritical>
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d106      	bne.n	800c20e <vQueueWaitForMessageRestricted+0x5a>
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	3324      	adds	r3, #36	; 0x24
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 fd13 	bl	800cc34 <vTaskPlaceOnEventListRestricted>
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f7ff ff26 	bl	800c060 <prvUnlockQueue>
 800c214:	bf00      	nop
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <xTaskCreateStatic>:
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08e      	sub	sp, #56	; 0x38
 800c220:	af04      	add	r7, sp, #16
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
 800c22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <xTaskCreateStatic+0x2a>
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	623b      	str	r3, [r7, #32]
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <xTaskCreateStatic+0x28>
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <xTaskCreateStatic+0x46>
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	61fb      	str	r3, [r7, #28]
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <xTaskCreateStatic+0x44>
 800c262:	235c      	movs	r3, #92	; 0x5c
 800c264:	613b      	str	r3, [r7, #16]
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2b5c      	cmp	r3, #92	; 0x5c
 800c26a:	d00a      	beq.n	800c282 <xTaskCreateStatic+0x66>
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	bf00      	nop
 800c280:	e7fe      	b.n	800c280 <xTaskCreateStatic+0x64>
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c286:	2b00      	cmp	r3, #0
 800c288:	d01e      	beq.n	800c2c8 <xTaskCreateStatic+0xac>
 800c28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d01b      	beq.n	800c2c8 <xTaskCreateStatic+0xac>
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c298:	631a      	str	r2, [r3, #48]	; 0x30
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	2202      	movs	r2, #2
 800c29e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9303      	str	r3, [sp, #12]
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	9302      	str	r3, [sp, #8]
 800c2aa:	f107 0314 	add.w	r3, r7, #20
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68b9      	ldr	r1, [r7, #8]
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 f850 	bl	800c360 <prvInitialiseNewTask>
 800c2c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2c2:	f000 f8dd 	bl	800c480 <prvAddNewTaskToReadyList>
 800c2c6:	e001      	b.n	800c2cc <xTaskCreateStatic+0xb0>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3728      	adds	r7, #40	; 0x28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <xTaskCreate>:
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b08c      	sub	sp, #48	; 0x30
 800c2da:	af04      	add	r7, sp, #16
 800c2dc:	60f8      	str	r0, [r7, #12]
 800c2de:	60b9      	str	r1, [r7, #8]
 800c2e0:	603b      	str	r3, [r7, #0]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	80fb      	strh	r3, [r7, #6]
 800c2e6:	88fb      	ldrh	r3, [r7, #6]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f001 fdec 	bl	800dec8 <pvPortMalloc>
 800c2f0:	6178      	str	r0, [r7, #20]
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00e      	beq.n	800c316 <xTaskCreate+0x40>
 800c2f8:	205c      	movs	r0, #92	; 0x5c
 800c2fa:	f001 fde5 	bl	800dec8 <pvPortMalloc>
 800c2fe:	61f8      	str	r0, [r7, #28]
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <xTaskCreate+0x38>
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	631a      	str	r2, [r3, #48]	; 0x30
 800c30c:	e005      	b.n	800c31a <xTaskCreate+0x44>
 800c30e:	6978      	ldr	r0, [r7, #20]
 800c310:	f001 fea6 	bl	800e060 <vPortFree>
 800c314:	e001      	b.n	800c31a <xTaskCreate+0x44>
 800c316:	2300      	movs	r3, #0
 800c318:	61fb      	str	r3, [r7, #28]
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d017      	beq.n	800c350 <xTaskCreate+0x7a>
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800c328:	88fa      	ldrh	r2, [r7, #6]
 800c32a:	2300      	movs	r3, #0
 800c32c:	9303      	str	r3, [sp, #12]
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	9302      	str	r3, [sp, #8]
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 f80e 	bl	800c360 <prvInitialiseNewTask>
 800c344:	69f8      	ldr	r0, [r7, #28]
 800c346:	f000 f89b 	bl	800c480 <prvAddNewTaskToReadyList>
 800c34a:	2301      	movs	r3, #1
 800c34c:	61bb      	str	r3, [r7, #24]
 800c34e:	e002      	b.n	800c356 <xTaskCreate+0x80>
 800c350:	f04f 33ff 	mov.w	r3, #4294967295
 800c354:	61bb      	str	r3, [r7, #24]
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	4618      	mov	r0, r3
 800c35a:	3720      	adds	r7, #32
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <prvInitialiseNewTask>:
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	603b      	str	r3, [r7, #0]
 800c36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c370:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	461a      	mov	r2, r3
 800c378:	21a5      	movs	r1, #165	; 0xa5
 800c37a:	f001 ffd7 	bl	800e32c <memset>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c388:	3b01      	subs	r3, #1
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4413      	add	r3, r2
 800c38e:	61bb      	str	r3, [r7, #24]
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	f023 0307 	bic.w	r3, r3, #7
 800c396:	61bb      	str	r3, [r7, #24]
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	f003 0307 	and.w	r3, r3, #7
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00a      	beq.n	800c3b8 <prvInitialiseNewTask+0x58>
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	617b      	str	r3, [r7, #20]
 800c3b4:	bf00      	nop
 800c3b6:	e7fe      	b.n	800c3b6 <prvInitialiseNewTask+0x56>
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d01f      	beq.n	800c3fe <prvInitialiseNewTask+0x9e>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	e012      	b.n	800c3ea <prvInitialiseNewTask+0x8a>
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	7819      	ldrb	r1, [r3, #0]
 800c3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	3334      	adds	r3, #52	; 0x34
 800c3d4:	460a      	mov	r2, r1
 800c3d6:	701a      	strb	r2, [r3, #0]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	4413      	add	r3, r2
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d006      	beq.n	800c3f2 <prvInitialiseNewTask+0x92>
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	61fb      	str	r3, [r7, #28]
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	2b0f      	cmp	r3, #15
 800c3ee:	d9e9      	bls.n	800c3c4 <prvInitialiseNewTask+0x64>
 800c3f0:	e000      	b.n	800c3f4 <prvInitialiseNewTask+0x94>
 800c3f2:	bf00      	nop
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3fc:	e003      	b.n	800c406 <prvInitialiseNewTask+0xa6>
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	2200      	movs	r2, #0
 800c402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	2b37      	cmp	r3, #55	; 0x37
 800c40a:	d901      	bls.n	800c410 <prvInitialiseNewTask+0xb0>
 800c40c:	2337      	movs	r3, #55	; 0x37
 800c40e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c414:	62da      	str	r2, [r3, #44]	; 0x2c
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c41a:	64da      	str	r2, [r3, #76]	; 0x4c
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	2200      	movs	r2, #0
 800c420:	651a      	str	r2, [r3, #80]	; 0x50
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	3304      	adds	r3, #4
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff f8be 	bl	800b5a8 <vListInitialiseItem>
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	3318      	adds	r3, #24
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff f8b9 	bl	800b5a8 <vListInitialiseItem>
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43a:	611a      	str	r2, [r3, #16]
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	619a      	str	r2, [r3, #24]
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44a:	625a      	str	r2, [r3, #36]	; 0x24
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	2200      	movs	r2, #0
 800c450:	655a      	str	r2, [r3, #84]	; 0x54
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	68f9      	ldr	r1, [r7, #12]
 800c45e:	69b8      	ldr	r0, [r7, #24]
 800c460:	f001 fae4 	bl	800da2c <pxPortInitialiseStack>
 800c464:	4602      	mov	r2, r0
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <prvInitialiseNewTask+0x116>
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	bf00      	nop
 800c478:	3720      	adds	r7, #32
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <prvAddNewTaskToReadyList>:
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	f001 fbfc 	bl	800dc84 <vPortEnterCritical>
 800c48c:	4b2d      	ldr	r3, [pc, #180]	; (800c544 <prvAddNewTaskToReadyList+0xc4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3301      	adds	r3, #1
 800c492:	4a2c      	ldr	r2, [pc, #176]	; (800c544 <prvAddNewTaskToReadyList+0xc4>)
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	4b2c      	ldr	r3, [pc, #176]	; (800c548 <prvAddNewTaskToReadyList+0xc8>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d109      	bne.n	800c4b2 <prvAddNewTaskToReadyList+0x32>
 800c49e:	4a2a      	ldr	r2, [pc, #168]	; (800c548 <prvAddNewTaskToReadyList+0xc8>)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	4b27      	ldr	r3, [pc, #156]	; (800c544 <prvAddNewTaskToReadyList+0xc4>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d110      	bne.n	800c4ce <prvAddNewTaskToReadyList+0x4e>
 800c4ac:	f000 fcee 	bl	800ce8c <prvInitialiseTaskLists>
 800c4b0:	e00d      	b.n	800c4ce <prvAddNewTaskToReadyList+0x4e>
 800c4b2:	4b26      	ldr	r3, [pc, #152]	; (800c54c <prvAddNewTaskToReadyList+0xcc>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d109      	bne.n	800c4ce <prvAddNewTaskToReadyList+0x4e>
 800c4ba:	4b23      	ldr	r3, [pc, #140]	; (800c548 <prvAddNewTaskToReadyList+0xc8>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d802      	bhi.n	800c4ce <prvAddNewTaskToReadyList+0x4e>
 800c4c8:	4a1f      	ldr	r2, [pc, #124]	; (800c548 <prvAddNewTaskToReadyList+0xc8>)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	4b20      	ldr	r3, [pc, #128]	; (800c550 <prvAddNewTaskToReadyList+0xd0>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a1e      	ldr	r2, [pc, #120]	; (800c550 <prvAddNewTaskToReadyList+0xd0>)
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	4b1d      	ldr	r3, [pc, #116]	; (800c550 <prvAddNewTaskToReadyList+0xd0>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	645a      	str	r2, [r3, #68]	; 0x44
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e4:	4b1b      	ldr	r3, [pc, #108]	; (800c554 <prvAddNewTaskToReadyList+0xd4>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d903      	bls.n	800c4f4 <prvAddNewTaskToReadyList+0x74>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f0:	4a18      	ldr	r2, [pc, #96]	; (800c554 <prvAddNewTaskToReadyList+0xd4>)
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4a15      	ldr	r2, [pc, #84]	; (800c558 <prvAddNewTaskToReadyList+0xd8>)
 800c502:	441a      	add	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3304      	adds	r3, #4
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f7ff f859 	bl	800b5c2 <vListInsertEnd>
 800c510:	f001 fbe8 	bl	800dce4 <vPortExitCritical>
 800c514:	4b0d      	ldr	r3, [pc, #52]	; (800c54c <prvAddNewTaskToReadyList+0xcc>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00e      	beq.n	800c53a <prvAddNewTaskToReadyList+0xba>
 800c51c:	4b0a      	ldr	r3, [pc, #40]	; (800c548 <prvAddNewTaskToReadyList+0xc8>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c526:	429a      	cmp	r2, r3
 800c528:	d207      	bcs.n	800c53a <prvAddNewTaskToReadyList+0xba>
 800c52a:	4b0c      	ldr	r3, [pc, #48]	; (800c55c <prvAddNewTaskToReadyList+0xdc>)
 800c52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	200013ac 	.word	0x200013ac
 800c548:	20000ed8 	.word	0x20000ed8
 800c54c:	200013b8 	.word	0x200013b8
 800c550:	200013c8 	.word	0x200013c8
 800c554:	200013b4 	.word	0x200013b4
 800c558:	20000edc 	.word	0x20000edc
 800c55c:	e000ed04 	.word	0xe000ed04

0800c560 <vTaskDelete>:
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	f001 fb8c 	bl	800dc84 <vPortEnterCritical>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <vTaskDelete+0x18>
 800c572:	4b2c      	ldr	r3, [pc, #176]	; (800c624 <vTaskDelete+0xc4>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	e000      	b.n	800c57a <vTaskDelete+0x1a>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3304      	adds	r3, #4
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff f87b 	bl	800b67c <uxListRemove>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <vTaskDelete+0x38>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3318      	adds	r3, #24
 800c592:	4618      	mov	r0, r3
 800c594:	f7ff f872 	bl	800b67c <uxListRemove>
 800c598:	4b23      	ldr	r3, [pc, #140]	; (800c628 <vTaskDelete+0xc8>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	4a22      	ldr	r2, [pc, #136]	; (800c628 <vTaskDelete+0xc8>)
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	4b20      	ldr	r3, [pc, #128]	; (800c624 <vTaskDelete+0xc4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d10b      	bne.n	800c5c4 <vTaskDelete+0x64>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	481e      	ldr	r0, [pc, #120]	; (800c62c <vTaskDelete+0xcc>)
 800c5b4:	f7ff f805 	bl	800b5c2 <vListInsertEnd>
 800c5b8:	4b1d      	ldr	r3, [pc, #116]	; (800c630 <vTaskDelete+0xd0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	4a1c      	ldr	r2, [pc, #112]	; (800c630 <vTaskDelete+0xd0>)
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	e009      	b.n	800c5d8 <vTaskDelete+0x78>
 800c5c4:	4b1b      	ldr	r3, [pc, #108]	; (800c634 <vTaskDelete+0xd4>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	4a1a      	ldr	r2, [pc, #104]	; (800c634 <vTaskDelete+0xd4>)
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 fcca 	bl	800cf68 <prvDeleteTCB>
 800c5d4:	f000 fcf8 	bl	800cfc8 <prvResetNextTaskUnblockTime>
 800c5d8:	f001 fb84 	bl	800dce4 <vPortExitCritical>
 800c5dc:	4b16      	ldr	r3, [pc, #88]	; (800c638 <vTaskDelete+0xd8>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d01b      	beq.n	800c61c <vTaskDelete+0xbc>
 800c5e4:	4b0f      	ldr	r3, [pc, #60]	; (800c624 <vTaskDelete+0xc4>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d116      	bne.n	800c61c <vTaskDelete+0xbc>
 800c5ee:	4b13      	ldr	r3, [pc, #76]	; (800c63c <vTaskDelete+0xdc>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00a      	beq.n	800c60c <vTaskDelete+0xac>
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	60bb      	str	r3, [r7, #8]
 800c608:	bf00      	nop
 800c60a:	e7fe      	b.n	800c60a <vTaskDelete+0xaa>
 800c60c:	4b0c      	ldr	r3, [pc, #48]	; (800c640 <vTaskDelete+0xe0>)
 800c60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c612:	601a      	str	r2, [r3, #0]
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	20000ed8 	.word	0x20000ed8
 800c628:	200013c8 	.word	0x200013c8
 800c62c:	20001380 	.word	0x20001380
 800c630:	20001394 	.word	0x20001394
 800c634:	200013ac 	.word	0x200013ac
 800c638:	200013b8 	.word	0x200013b8
 800c63c:	200013d4 	.word	0x200013d4
 800c640:	e000ed04 	.word	0xe000ed04

0800c644 <vTaskDelay>:
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	2300      	movs	r3, #0
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d017      	beq.n	800c686 <vTaskDelay+0x42>
 800c656:	4b13      	ldr	r3, [pc, #76]	; (800c6a4 <vTaskDelay+0x60>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00a      	beq.n	800c674 <vTaskDelay+0x30>
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60bb      	str	r3, [r7, #8]
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <vTaskDelay+0x2e>
 800c674:	f000 f8e6 	bl	800c844 <vTaskSuspendAll>
 800c678:	2100      	movs	r1, #0
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fd50 	bl	800d120 <prvAddCurrentTaskToDelayedList>
 800c680:	f000 f8ee 	bl	800c860 <xTaskResumeAll>
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d107      	bne.n	800c69c <vTaskDelay+0x58>
 800c68c:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <vTaskDelay+0x64>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	bf00      	nop
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	200013d4 	.word	0x200013d4
 800c6a8:	e000ed04 	.word	0xe000ed04

0800c6ac <eTaskGetState>:
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	61bb      	str	r3, [r7, #24]
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <eTaskGetState+0x28>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60bb      	str	r3, [r7, #8]
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <eTaskGetState+0x26>
 800c6d4:	4b23      	ldr	r3, [pc, #140]	; (800c764 <eTaskGetState+0xb8>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	69ba      	ldr	r2, [r7, #24]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d102      	bne.n	800c6e4 <eTaskGetState+0x38>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	77fb      	strb	r3, [r7, #31]
 800c6e2:	e03a      	b.n	800c75a <eTaskGetState+0xae>
 800c6e4:	f001 face 	bl	800dc84 <vPortEnterCritical>
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	617b      	str	r3, [r7, #20]
 800c6ee:	4b1e      	ldr	r3, [pc, #120]	; (800c768 <eTaskGetState+0xbc>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	613b      	str	r3, [r7, #16]
 800c6f4:	4b1d      	ldr	r3, [pc, #116]	; (800c76c <eTaskGetState+0xc0>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	f001 faf3 	bl	800dce4 <vPortExitCritical>
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	429a      	cmp	r2, r3
 800c704:	d003      	beq.n	800c70e <eTaskGetState+0x62>
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d102      	bne.n	800c714 <eTaskGetState+0x68>
 800c70e:	2302      	movs	r3, #2
 800c710:	77fb      	strb	r3, [r7, #31]
 800c712:	e022      	b.n	800c75a <eTaskGetState+0xae>
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	4a16      	ldr	r2, [pc, #88]	; (800c770 <eTaskGetState+0xc4>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d112      	bne.n	800c742 <eTaskGetState+0x96>
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10b      	bne.n	800c73c <eTaskGetState+0x90>
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d102      	bne.n	800c736 <eTaskGetState+0x8a>
 800c730:	2302      	movs	r3, #2
 800c732:	77fb      	strb	r3, [r7, #31]
 800c734:	e011      	b.n	800c75a <eTaskGetState+0xae>
 800c736:	2303      	movs	r3, #3
 800c738:	77fb      	strb	r3, [r7, #31]
 800c73a:	e00e      	b.n	800c75a <eTaskGetState+0xae>
 800c73c:	2302      	movs	r3, #2
 800c73e:	77fb      	strb	r3, [r7, #31]
 800c740:	e00b      	b.n	800c75a <eTaskGetState+0xae>
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	4a0b      	ldr	r2, [pc, #44]	; (800c774 <eTaskGetState+0xc8>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d002      	beq.n	800c750 <eTaskGetState+0xa4>
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d102      	bne.n	800c756 <eTaskGetState+0xaa>
 800c750:	2304      	movs	r3, #4
 800c752:	77fb      	strb	r3, [r7, #31]
 800c754:	e001      	b.n	800c75a <eTaskGetState+0xae>
 800c756:	2301      	movs	r3, #1
 800c758:	77fb      	strb	r3, [r7, #31]
 800c75a:	7ffb      	ldrb	r3, [r7, #31]
 800c75c:	4618      	mov	r0, r3
 800c75e:	3720      	adds	r7, #32
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20000ed8 	.word	0x20000ed8
 800c768:	20001364 	.word	0x20001364
 800c76c:	20001368 	.word	0x20001368
 800c770:	20001398 	.word	0x20001398
 800c774:	20001380 	.word	0x20001380

0800c778 <vTaskStartScheduler>:
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08a      	sub	sp, #40	; 0x28
 800c77c:	af04      	add	r7, sp, #16
 800c77e:	2300      	movs	r3, #0
 800c780:	60bb      	str	r3, [r7, #8]
 800c782:	2300      	movs	r3, #0
 800c784:	607b      	str	r3, [r7, #4]
 800c786:	463a      	mov	r2, r7
 800c788:	1d39      	adds	r1, r7, #4
 800c78a:	f107 0308 	add.w	r3, r7, #8
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fe feb6 	bl	800b500 <vApplicationGetIdleTaskMemory>
 800c794:	6839      	ldr	r1, [r7, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	9202      	str	r2, [sp, #8]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	460a      	mov	r2, r1
 800c7a6:	4921      	ldr	r1, [pc, #132]	; (800c82c <vTaskStartScheduler+0xb4>)
 800c7a8:	4821      	ldr	r0, [pc, #132]	; (800c830 <vTaskStartScheduler+0xb8>)
 800c7aa:	f7ff fd37 	bl	800c21c <xTaskCreateStatic>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4a20      	ldr	r2, [pc, #128]	; (800c834 <vTaskStartScheduler+0xbc>)
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	4b1f      	ldr	r3, [pc, #124]	; (800c834 <vTaskStartScheduler+0xbc>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <vTaskStartScheduler+0x4a>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	617b      	str	r3, [r7, #20]
 800c7c0:	e001      	b.n	800c7c6 <vTaskStartScheduler+0x4e>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	617b      	str	r3, [r7, #20]
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d102      	bne.n	800c7d2 <vTaskStartScheduler+0x5a>
 800c7cc:	f000 fcfc 	bl	800d1c8 <xTimerCreateTimerTask>
 800c7d0:	6178      	str	r0, [r7, #20]
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d116      	bne.n	800c806 <vTaskStartScheduler+0x8e>
 800c7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	613b      	str	r3, [r7, #16]
 800c7ea:	bf00      	nop
 800c7ec:	4b12      	ldr	r3, [pc, #72]	; (800c838 <vTaskStartScheduler+0xc0>)
 800c7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	4b11      	ldr	r3, [pc, #68]	; (800c83c <vTaskStartScheduler+0xc4>)
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	4b11      	ldr	r3, [pc, #68]	; (800c840 <vTaskStartScheduler+0xc8>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	f001 f99e 	bl	800db40 <xPortStartScheduler>
 800c804:	e00e      	b.n	800c824 <vTaskStartScheduler+0xac>
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80c:	d10a      	bne.n	800c824 <vTaskStartScheduler+0xac>
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	bf00      	nop
 800c822:	e7fe      	b.n	800c822 <vTaskStartScheduler+0xaa>
 800c824:	bf00      	nop
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	0800f934 	.word	0x0800f934
 800c830:	0800ce5d 	.word	0x0800ce5d
 800c834:	200013d0 	.word	0x200013d0
 800c838:	200013cc 	.word	0x200013cc
 800c83c:	200013b8 	.word	0x200013b8
 800c840:	200013b0 	.word	0x200013b0

0800c844 <vTaskSuspendAll>:
 800c844:	b480      	push	{r7}
 800c846:	af00      	add	r7, sp, #0
 800c848:	4b04      	ldr	r3, [pc, #16]	; (800c85c <vTaskSuspendAll+0x18>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3301      	adds	r3, #1
 800c84e:	4a03      	ldr	r2, [pc, #12]	; (800c85c <vTaskSuspendAll+0x18>)
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	bf00      	nop
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	200013d4 	.word	0x200013d4

0800c860 <xTaskResumeAll>:
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	2300      	movs	r3, #0
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	2300      	movs	r3, #0
 800c86c:	60bb      	str	r3, [r7, #8]
 800c86e:	4b42      	ldr	r3, [pc, #264]	; (800c978 <xTaskResumeAll+0x118>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10a      	bne.n	800c88c <xTaskResumeAll+0x2c>
 800c876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	bf00      	nop
 800c88a:	e7fe      	b.n	800c88a <xTaskResumeAll+0x2a>
 800c88c:	f001 f9fa 	bl	800dc84 <vPortEnterCritical>
 800c890:	4b39      	ldr	r3, [pc, #228]	; (800c978 <xTaskResumeAll+0x118>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3b01      	subs	r3, #1
 800c896:	4a38      	ldr	r2, [pc, #224]	; (800c978 <xTaskResumeAll+0x118>)
 800c898:	6013      	str	r3, [r2, #0]
 800c89a:	4b37      	ldr	r3, [pc, #220]	; (800c978 <xTaskResumeAll+0x118>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d162      	bne.n	800c968 <xTaskResumeAll+0x108>
 800c8a2:	4b36      	ldr	r3, [pc, #216]	; (800c97c <xTaskResumeAll+0x11c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d05e      	beq.n	800c968 <xTaskResumeAll+0x108>
 800c8aa:	e02f      	b.n	800c90c <xTaskResumeAll+0xac>
 800c8ac:	4b34      	ldr	r3, [pc, #208]	; (800c980 <xTaskResumeAll+0x120>)
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3318      	adds	r3, #24
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fe fedf 	bl	800b67c <uxListRemove>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fe feda 	bl	800b67c <uxListRemove>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8cc:	4b2d      	ldr	r3, [pc, #180]	; (800c984 <xTaskResumeAll+0x124>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d903      	bls.n	800c8dc <xTaskResumeAll+0x7c>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d8:	4a2a      	ldr	r2, [pc, #168]	; (800c984 <xTaskResumeAll+0x124>)
 800c8da:	6013      	str	r3, [r2, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4a27      	ldr	r2, [pc, #156]	; (800c988 <xTaskResumeAll+0x128>)
 800c8ea:	441a      	add	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	f7fe fe65 	bl	800b5c2 <vListInsertEnd>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fc:	4b23      	ldr	r3, [pc, #140]	; (800c98c <xTaskResumeAll+0x12c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c902:	429a      	cmp	r2, r3
 800c904:	d302      	bcc.n	800c90c <xTaskResumeAll+0xac>
 800c906:	4b22      	ldr	r3, [pc, #136]	; (800c990 <xTaskResumeAll+0x130>)
 800c908:	2201      	movs	r2, #1
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	4b1c      	ldr	r3, [pc, #112]	; (800c980 <xTaskResumeAll+0x120>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1cb      	bne.n	800c8ac <xTaskResumeAll+0x4c>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <xTaskResumeAll+0xbe>
 800c91a:	f000 fb55 	bl	800cfc8 <prvResetNextTaskUnblockTime>
 800c91e:	4b1d      	ldr	r3, [pc, #116]	; (800c994 <xTaskResumeAll+0x134>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	607b      	str	r3, [r7, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d010      	beq.n	800c94c <xTaskResumeAll+0xec>
 800c92a:	f000 f847 	bl	800c9bc <xTaskIncrementTick>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <xTaskResumeAll+0xda>
 800c934:	4b16      	ldr	r3, [pc, #88]	; (800c990 <xTaskResumeAll+0x130>)
 800c936:	2201      	movs	r2, #1
 800c938:	601a      	str	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	607b      	str	r3, [r7, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1f1      	bne.n	800c92a <xTaskResumeAll+0xca>
 800c946:	4b13      	ldr	r3, [pc, #76]	; (800c994 <xTaskResumeAll+0x134>)
 800c948:	2200      	movs	r2, #0
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	4b10      	ldr	r3, [pc, #64]	; (800c990 <xTaskResumeAll+0x130>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <xTaskResumeAll+0x108>
 800c954:	2301      	movs	r3, #1
 800c956:	60bb      	str	r3, [r7, #8]
 800c958:	4b0f      	ldr	r3, [pc, #60]	; (800c998 <xTaskResumeAll+0x138>)
 800c95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c95e:	601a      	str	r2, [r3, #0]
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f001 f9bc 	bl	800dce4 <vPortExitCritical>
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	200013d4 	.word	0x200013d4
 800c97c:	200013ac 	.word	0x200013ac
 800c980:	2000136c 	.word	0x2000136c
 800c984:	200013b4 	.word	0x200013b4
 800c988:	20000edc 	.word	0x20000edc
 800c98c:	20000ed8 	.word	0x20000ed8
 800c990:	200013c0 	.word	0x200013c0
 800c994:	200013bc 	.word	0x200013bc
 800c998:	e000ed04 	.word	0xe000ed04

0800c99c <xTaskGetTickCount>:
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <xTaskGetTickCount+0x1c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	607b      	str	r3, [r7, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	200013b0 	.word	0x200013b0

0800c9bc <xTaskIncrementTick>:
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	617b      	str	r3, [r7, #20]
 800c9c6:	4b4f      	ldr	r3, [pc, #316]	; (800cb04 <xTaskIncrementTick+0x148>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f040 808f 	bne.w	800caee <xTaskIncrementTick+0x132>
 800c9d0:	4b4d      	ldr	r3, [pc, #308]	; (800cb08 <xTaskIncrementTick+0x14c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	613b      	str	r3, [r7, #16]
 800c9d8:	4a4b      	ldr	r2, [pc, #300]	; (800cb08 <xTaskIncrementTick+0x14c>)
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d120      	bne.n	800ca26 <xTaskIncrementTick+0x6a>
 800c9e4:	4b49      	ldr	r3, [pc, #292]	; (800cb0c <xTaskIncrementTick+0x150>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00a      	beq.n	800ca04 <xTaskIncrementTick+0x48>
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	603b      	str	r3, [r7, #0]
 800ca00:	bf00      	nop
 800ca02:	e7fe      	b.n	800ca02 <xTaskIncrementTick+0x46>
 800ca04:	4b41      	ldr	r3, [pc, #260]	; (800cb0c <xTaskIncrementTick+0x150>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	4b41      	ldr	r3, [pc, #260]	; (800cb10 <xTaskIncrementTick+0x154>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a3f      	ldr	r2, [pc, #252]	; (800cb0c <xTaskIncrementTick+0x150>)
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	4a3f      	ldr	r2, [pc, #252]	; (800cb10 <xTaskIncrementTick+0x154>)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6013      	str	r3, [r2, #0]
 800ca18:	4b3e      	ldr	r3, [pc, #248]	; (800cb14 <xTaskIncrementTick+0x158>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	4a3d      	ldr	r2, [pc, #244]	; (800cb14 <xTaskIncrementTick+0x158>)
 800ca20:	6013      	str	r3, [r2, #0]
 800ca22:	f000 fad1 	bl	800cfc8 <prvResetNextTaskUnblockTime>
 800ca26:	4b3c      	ldr	r3, [pc, #240]	; (800cb18 <xTaskIncrementTick+0x15c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d349      	bcc.n	800cac4 <xTaskIncrementTick+0x108>
 800ca30:	4b36      	ldr	r3, [pc, #216]	; (800cb0c <xTaskIncrementTick+0x150>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d104      	bne.n	800ca44 <xTaskIncrementTick+0x88>
 800ca3a:	4b37      	ldr	r3, [pc, #220]	; (800cb18 <xTaskIncrementTick+0x15c>)
 800ca3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca40:	601a      	str	r2, [r3, #0]
 800ca42:	e03f      	b.n	800cac4 <xTaskIncrementTick+0x108>
 800ca44:	4b31      	ldr	r3, [pc, #196]	; (800cb0c <xTaskIncrementTick+0x150>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	60bb      	str	r3, [r7, #8]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	607b      	str	r3, [r7, #4]
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d203      	bcs.n	800ca64 <xTaskIncrementTick+0xa8>
 800ca5c:	4a2e      	ldr	r2, [pc, #184]	; (800cb18 <xTaskIncrementTick+0x15c>)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6013      	str	r3, [r2, #0]
 800ca62:	e02f      	b.n	800cac4 <xTaskIncrementTick+0x108>
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	3304      	adds	r3, #4
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fe fe07 	bl	800b67c <uxListRemove>
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d004      	beq.n	800ca80 <xTaskIncrementTick+0xc4>
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	3318      	adds	r3, #24
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe fdfe 	bl	800b67c <uxListRemove>
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca84:	4b25      	ldr	r3, [pc, #148]	; (800cb1c <xTaskIncrementTick+0x160>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d903      	bls.n	800ca94 <xTaskIncrementTick+0xd8>
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca90:	4a22      	ldr	r2, [pc, #136]	; (800cb1c <xTaskIncrementTick+0x160>)
 800ca92:	6013      	str	r3, [r2, #0]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca98:	4613      	mov	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	4413      	add	r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4a1f      	ldr	r2, [pc, #124]	; (800cb20 <xTaskIncrementTick+0x164>)
 800caa2:	441a      	add	r2, r3
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	3304      	adds	r3, #4
 800caa8:	4619      	mov	r1, r3
 800caaa:	4610      	mov	r0, r2
 800caac:	f7fe fd89 	bl	800b5c2 <vListInsertEnd>
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab4:	4b1b      	ldr	r3, [pc, #108]	; (800cb24 <xTaskIncrementTick+0x168>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	429a      	cmp	r2, r3
 800cabc:	d3b8      	bcc.n	800ca30 <xTaskIncrementTick+0x74>
 800cabe:	2301      	movs	r3, #1
 800cac0:	617b      	str	r3, [r7, #20]
 800cac2:	e7b5      	b.n	800ca30 <xTaskIncrementTick+0x74>
 800cac4:	4b17      	ldr	r3, [pc, #92]	; (800cb24 <xTaskIncrementTick+0x168>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caca:	4915      	ldr	r1, [pc, #84]	; (800cb20 <xTaskIncrementTick+0x164>)
 800cacc:	4613      	mov	r3, r2
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4413      	add	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	440b      	add	r3, r1
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d901      	bls.n	800cae0 <xTaskIncrementTick+0x124>
 800cadc:	2301      	movs	r3, #1
 800cade:	617b      	str	r3, [r7, #20]
 800cae0:	4b11      	ldr	r3, [pc, #68]	; (800cb28 <xTaskIncrementTick+0x16c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d007      	beq.n	800caf8 <xTaskIncrementTick+0x13c>
 800cae8:	2301      	movs	r3, #1
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	e004      	b.n	800caf8 <xTaskIncrementTick+0x13c>
 800caee:	4b0f      	ldr	r3, [pc, #60]	; (800cb2c <xTaskIncrementTick+0x170>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3301      	adds	r3, #1
 800caf4:	4a0d      	ldr	r2, [pc, #52]	; (800cb2c <xTaskIncrementTick+0x170>)
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	200013d4 	.word	0x200013d4
 800cb08:	200013b0 	.word	0x200013b0
 800cb0c:	20001364 	.word	0x20001364
 800cb10:	20001368 	.word	0x20001368
 800cb14:	200013c4 	.word	0x200013c4
 800cb18:	200013cc 	.word	0x200013cc
 800cb1c:	200013b4 	.word	0x200013b4
 800cb20:	20000edc 	.word	0x20000edc
 800cb24:	20000ed8 	.word	0x20000ed8
 800cb28:	200013c0 	.word	0x200013c0
 800cb2c:	200013bc 	.word	0x200013bc

0800cb30 <vTaskSwitchContext>:
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4b28      	ldr	r3, [pc, #160]	; (800cbd8 <vTaskSwitchContext+0xa8>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <vTaskSwitchContext+0x16>
 800cb3e:	4b27      	ldr	r3, [pc, #156]	; (800cbdc <vTaskSwitchContext+0xac>)
 800cb40:	2201      	movs	r2, #1
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	e041      	b.n	800cbca <vTaskSwitchContext+0x9a>
 800cb46:	4b25      	ldr	r3, [pc, #148]	; (800cbdc <vTaskSwitchContext+0xac>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	4b24      	ldr	r3, [pc, #144]	; (800cbe0 <vTaskSwitchContext+0xb0>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	60fb      	str	r3, [r7, #12]
 800cb52:	e010      	b.n	800cb76 <vTaskSwitchContext+0x46>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10a      	bne.n	800cb70 <vTaskSwitchContext+0x40>
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	607b      	str	r3, [r7, #4]
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <vTaskSwitchContext+0x3e>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3b01      	subs	r3, #1
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	491b      	ldr	r1, [pc, #108]	; (800cbe4 <vTaskSwitchContext+0xb4>)
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0e4      	beq.n	800cb54 <vTaskSwitchContext+0x24>
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4a13      	ldr	r2, [pc, #76]	; (800cbe4 <vTaskSwitchContext+0xb4>)
 800cb96:	4413      	add	r3, r2
 800cb98:	60bb      	str	r3, [r7, #8]
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	605a      	str	r2, [r3, #4]
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	3308      	adds	r3, #8
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d104      	bne.n	800cbba <vTaskSwitchContext+0x8a>
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	605a      	str	r2, [r3, #4]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	4a09      	ldr	r2, [pc, #36]	; (800cbe8 <vTaskSwitchContext+0xb8>)
 800cbc2:	6013      	str	r3, [r2, #0]
 800cbc4:	4a06      	ldr	r2, [pc, #24]	; (800cbe0 <vTaskSwitchContext+0xb0>)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	bf00      	nop
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	200013d4 	.word	0x200013d4
 800cbdc:	200013c0 	.word	0x200013c0
 800cbe0:	200013b4 	.word	0x200013b4
 800cbe4:	20000edc 	.word	0x20000edc
 800cbe8:	20000ed8 	.word	0x20000ed8

0800cbec <vTaskPlaceOnEventList>:
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <vTaskPlaceOnEventList+0x26>
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <vTaskPlaceOnEventList+0x24>
 800cc12:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <vTaskPlaceOnEventList+0x44>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3318      	adds	r3, #24
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7fe fcf5 	bl	800b60a <vListInsert>
 800cc20:	2101      	movs	r1, #1
 800cc22:	6838      	ldr	r0, [r7, #0]
 800cc24:	f000 fa7c 	bl	800d120 <prvAddCurrentTaskToDelayedList>
 800cc28:	bf00      	nop
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20000ed8 	.word	0x20000ed8

0800cc34 <vTaskPlaceOnEventListRestricted>:
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10a      	bne.n	800cc5c <vTaskPlaceOnEventListRestricted+0x28>
 800cc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	617b      	str	r3, [r7, #20]
 800cc58:	bf00      	nop
 800cc5a:	e7fe      	b.n	800cc5a <vTaskPlaceOnEventListRestricted+0x26>
 800cc5c:	4b0a      	ldr	r3, [pc, #40]	; (800cc88 <vTaskPlaceOnEventListRestricted+0x54>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3318      	adds	r3, #24
 800cc62:	4619      	mov	r1, r3
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7fe fcac 	bl	800b5c2 <vListInsertEnd>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <vTaskPlaceOnEventListRestricted+0x42>
 800cc70:	f04f 33ff 	mov.w	r3, #4294967295
 800cc74:	60bb      	str	r3, [r7, #8]
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	68b8      	ldr	r0, [r7, #8]
 800cc7a:	f000 fa51 	bl	800d120 <prvAddCurrentTaskToDelayedList>
 800cc7e:	bf00      	nop
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20000ed8 	.word	0x20000ed8

0800cc8c <xTaskRemoveFromEventList>:
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b086      	sub	sp, #24
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	613b      	str	r3, [r7, #16]
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10a      	bne.n	800ccb8 <xTaskRemoveFromEventList+0x2c>
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60fb      	str	r3, [r7, #12]
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <xTaskRemoveFromEventList+0x2a>
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	3318      	adds	r3, #24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe fcdd 	bl	800b67c <uxListRemove>
 800ccc2:	4b1e      	ldr	r3, [pc, #120]	; (800cd3c <xTaskRemoveFromEventList+0xb0>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d11d      	bne.n	800cd06 <xTaskRemoveFromEventList+0x7a>
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	3304      	adds	r3, #4
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fcd4 	bl	800b67c <uxListRemove>
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd8:	4b19      	ldr	r3, [pc, #100]	; (800cd40 <xTaskRemoveFromEventList+0xb4>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d903      	bls.n	800cce8 <xTaskRemoveFromEventList+0x5c>
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce4:	4a16      	ldr	r2, [pc, #88]	; (800cd40 <xTaskRemoveFromEventList+0xb4>)
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccec:	4613      	mov	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4413      	add	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4a13      	ldr	r2, [pc, #76]	; (800cd44 <xTaskRemoveFromEventList+0xb8>)
 800ccf6:	441a      	add	r2, r3
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	4610      	mov	r0, r2
 800cd00:	f7fe fc5f 	bl	800b5c2 <vListInsertEnd>
 800cd04:	e005      	b.n	800cd12 <xTaskRemoveFromEventList+0x86>
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	3318      	adds	r3, #24
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	480e      	ldr	r0, [pc, #56]	; (800cd48 <xTaskRemoveFromEventList+0xbc>)
 800cd0e:	f7fe fc58 	bl	800b5c2 <vListInsertEnd>
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd16:	4b0d      	ldr	r3, [pc, #52]	; (800cd4c <xTaskRemoveFromEventList+0xc0>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d905      	bls.n	800cd2c <xTaskRemoveFromEventList+0xa0>
 800cd20:	2301      	movs	r3, #1
 800cd22:	617b      	str	r3, [r7, #20]
 800cd24:	4b0a      	ldr	r3, [pc, #40]	; (800cd50 <xTaskRemoveFromEventList+0xc4>)
 800cd26:	2201      	movs	r2, #1
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	e001      	b.n	800cd30 <xTaskRemoveFromEventList+0xa4>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	617b      	str	r3, [r7, #20]
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200013d4 	.word	0x200013d4
 800cd40:	200013b4 	.word	0x200013b4
 800cd44:	20000edc 	.word	0x20000edc
 800cd48:	2000136c 	.word	0x2000136c
 800cd4c:	20000ed8 	.word	0x20000ed8
 800cd50:	200013c0 	.word	0x200013c0

0800cd54 <vTaskInternalSetTimeOutState>:
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <vTaskInternalSetTimeOutState+0x24>)
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <vTaskInternalSetTimeOutState+0x28>)
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	605a      	str	r2, [r3, #4]
 800cd6c:	bf00      	nop
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	200013c4 	.word	0x200013c4
 800cd7c:	200013b0 	.word	0x200013b0

0800cd80 <xTaskCheckForTimeOut>:
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b088      	sub	sp, #32
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10a      	bne.n	800cda6 <xTaskCheckForTimeOut+0x26>
 800cd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	613b      	str	r3, [r7, #16]
 800cda2:	bf00      	nop
 800cda4:	e7fe      	b.n	800cda4 <xTaskCheckForTimeOut+0x24>
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10a      	bne.n	800cdc2 <xTaskCheckForTimeOut+0x42>
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <xTaskCheckForTimeOut+0x40>
 800cdc2:	f000 ff5f 	bl	800dc84 <vPortEnterCritical>
 800cdc6:	4b1d      	ldr	r3, [pc, #116]	; (800ce3c <xTaskCheckForTimeOut+0xbc>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	61bb      	str	r3, [r7, #24]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	69ba      	ldr	r2, [r7, #24]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	617b      	str	r3, [r7, #20]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdde:	d102      	bne.n	800cde6 <xTaskCheckForTimeOut+0x66>
 800cde0:	2300      	movs	r3, #0
 800cde2:	61fb      	str	r3, [r7, #28]
 800cde4:	e023      	b.n	800ce2e <xTaskCheckForTimeOut+0xae>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	4b15      	ldr	r3, [pc, #84]	; (800ce40 <xTaskCheckForTimeOut+0xc0>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d007      	beq.n	800ce02 <xTaskCheckForTimeOut+0x82>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	69ba      	ldr	r2, [r7, #24]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d302      	bcc.n	800ce02 <xTaskCheckForTimeOut+0x82>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	61fb      	str	r3, [r7, #28]
 800ce00:	e015      	b.n	800ce2e <xTaskCheckForTimeOut+0xae>
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d20b      	bcs.n	800ce24 <xTaskCheckForTimeOut+0xa4>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	1ad2      	subs	r2, r2, r3
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	601a      	str	r2, [r3, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff ff9b 	bl	800cd54 <vTaskInternalSetTimeOutState>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	61fb      	str	r3, [r7, #28]
 800ce22:	e004      	b.n	800ce2e <xTaskCheckForTimeOut+0xae>
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	61fb      	str	r3, [r7, #28]
 800ce2e:	f000 ff59 	bl	800dce4 <vPortExitCritical>
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	4618      	mov	r0, r3
 800ce36:	3720      	adds	r7, #32
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	200013b0 	.word	0x200013b0
 800ce40:	200013c4 	.word	0x200013c4

0800ce44 <vTaskMissedYield>:
 800ce44:	b480      	push	{r7}
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	4b03      	ldr	r3, [pc, #12]	; (800ce58 <vTaskMissedYield+0x14>)
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	bf00      	nop
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr
 800ce58:	200013c0 	.word	0x200013c0

0800ce5c <prvIdleTask>:
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	f000 f852 	bl	800cf0c <prvCheckTasksWaitingTermination>
 800ce68:	4b06      	ldr	r3, [pc, #24]	; (800ce84 <prvIdleTask+0x28>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d9f9      	bls.n	800ce64 <prvIdleTask+0x8>
 800ce70:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <prvIdleTask+0x2c>)
 800ce72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce76:	601a      	str	r2, [r3, #0]
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	e7f0      	b.n	800ce64 <prvIdleTask+0x8>
 800ce82:	bf00      	nop
 800ce84:	20000edc 	.word	0x20000edc
 800ce88:	e000ed04 	.word	0xe000ed04

0800ce8c <prvInitialiseTaskLists>:
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	2300      	movs	r3, #0
 800ce94:	607b      	str	r3, [r7, #4]
 800ce96:	e00c      	b.n	800ceb2 <prvInitialiseTaskLists+0x26>
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4a12      	ldr	r2, [pc, #72]	; (800ceec <prvInitialiseTaskLists+0x60>)
 800cea4:	4413      	add	r3, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe fb5e 	bl	800b568 <vListInitialise>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	607b      	str	r3, [r7, #4]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b37      	cmp	r3, #55	; 0x37
 800ceb6:	d9ef      	bls.n	800ce98 <prvInitialiseTaskLists+0xc>
 800ceb8:	480d      	ldr	r0, [pc, #52]	; (800cef0 <prvInitialiseTaskLists+0x64>)
 800ceba:	f7fe fb55 	bl	800b568 <vListInitialise>
 800cebe:	480d      	ldr	r0, [pc, #52]	; (800cef4 <prvInitialiseTaskLists+0x68>)
 800cec0:	f7fe fb52 	bl	800b568 <vListInitialise>
 800cec4:	480c      	ldr	r0, [pc, #48]	; (800cef8 <prvInitialiseTaskLists+0x6c>)
 800cec6:	f7fe fb4f 	bl	800b568 <vListInitialise>
 800ceca:	480c      	ldr	r0, [pc, #48]	; (800cefc <prvInitialiseTaskLists+0x70>)
 800cecc:	f7fe fb4c 	bl	800b568 <vListInitialise>
 800ced0:	480b      	ldr	r0, [pc, #44]	; (800cf00 <prvInitialiseTaskLists+0x74>)
 800ced2:	f7fe fb49 	bl	800b568 <vListInitialise>
 800ced6:	4b0b      	ldr	r3, [pc, #44]	; (800cf04 <prvInitialiseTaskLists+0x78>)
 800ced8:	4a05      	ldr	r2, [pc, #20]	; (800cef0 <prvInitialiseTaskLists+0x64>)
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	4b0a      	ldr	r3, [pc, #40]	; (800cf08 <prvInitialiseTaskLists+0x7c>)
 800cede:	4a05      	ldr	r2, [pc, #20]	; (800cef4 <prvInitialiseTaskLists+0x68>)
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20000edc 	.word	0x20000edc
 800cef0:	2000133c 	.word	0x2000133c
 800cef4:	20001350 	.word	0x20001350
 800cef8:	2000136c 	.word	0x2000136c
 800cefc:	20001380 	.word	0x20001380
 800cf00:	20001398 	.word	0x20001398
 800cf04:	20001364 	.word	0x20001364
 800cf08:	20001368 	.word	0x20001368

0800cf0c <prvCheckTasksWaitingTermination>:
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	e019      	b.n	800cf48 <prvCheckTasksWaitingTermination+0x3c>
 800cf14:	f000 feb6 	bl	800dc84 <vPortEnterCritical>
 800cf18:	4b10      	ldr	r3, [pc, #64]	; (800cf5c <prvCheckTasksWaitingTermination+0x50>)
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	607b      	str	r3, [r7, #4]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	3304      	adds	r3, #4
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe fba9 	bl	800b67c <uxListRemove>
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	; (800cf60 <prvCheckTasksWaitingTermination+0x54>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	4a0b      	ldr	r2, [pc, #44]	; (800cf60 <prvCheckTasksWaitingTermination+0x54>)
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	4b0b      	ldr	r3, [pc, #44]	; (800cf64 <prvCheckTasksWaitingTermination+0x58>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	4a0a      	ldr	r2, [pc, #40]	; (800cf64 <prvCheckTasksWaitingTermination+0x58>)
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	f000 fed1 	bl	800dce4 <vPortExitCritical>
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f810 	bl	800cf68 <prvDeleteTCB>
 800cf48:	4b06      	ldr	r3, [pc, #24]	; (800cf64 <prvCheckTasksWaitingTermination+0x58>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1e1      	bne.n	800cf14 <prvCheckTasksWaitingTermination+0x8>
 800cf50:	bf00      	nop
 800cf52:	bf00      	nop
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	20001380 	.word	0x20001380
 800cf60:	200013ac 	.word	0x200013ac
 800cf64:	20001394 	.word	0x20001394

0800cf68 <prvDeleteTCB>:
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d108      	bne.n	800cf8c <prvDeleteTCB+0x24>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f001 f86e 	bl	800e060 <vPortFree>
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f001 f86b 	bl	800e060 <vPortFree>
 800cf8a:	e018      	b.n	800cfbe <prvDeleteTCB+0x56>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d103      	bne.n	800cf9e <prvDeleteTCB+0x36>
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f001 f862 	bl	800e060 <vPortFree>
 800cf9c:	e00f      	b.n	800cfbe <prvDeleteTCB+0x56>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d00a      	beq.n	800cfbe <prvDeleteTCB+0x56>
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	bf00      	nop
 800cfbc:	e7fe      	b.n	800cfbc <prvDeleteTCB+0x54>
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <prvResetNextTaskUnblockTime>:
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <prvResetNextTaskUnblockTime+0x38>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d104      	bne.n	800cfe2 <prvResetNextTaskUnblockTime+0x1a>
 800cfd8:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <prvResetNextTaskUnblockTime+0x3c>)
 800cfda:	f04f 32ff 	mov.w	r2, #4294967295
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	e008      	b.n	800cff4 <prvResetNextTaskUnblockTime+0x2c>
 800cfe2:	4b07      	ldr	r3, [pc, #28]	; (800d000 <prvResetNextTaskUnblockTime+0x38>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	607b      	str	r3, [r7, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	4a04      	ldr	r2, [pc, #16]	; (800d004 <prvResetNextTaskUnblockTime+0x3c>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	20001364 	.word	0x20001364
 800d004:	200013cc 	.word	0x200013cc

0800d008 <xTaskGetSchedulerState>:
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4b0b      	ldr	r3, [pc, #44]	; (800d03c <xTaskGetSchedulerState+0x34>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d102      	bne.n	800d01c <xTaskGetSchedulerState+0x14>
 800d016:	2301      	movs	r3, #1
 800d018:	607b      	str	r3, [r7, #4]
 800d01a:	e008      	b.n	800d02e <xTaskGetSchedulerState+0x26>
 800d01c:	4b08      	ldr	r3, [pc, #32]	; (800d040 <xTaskGetSchedulerState+0x38>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d102      	bne.n	800d02a <xTaskGetSchedulerState+0x22>
 800d024:	2302      	movs	r3, #2
 800d026:	607b      	str	r3, [r7, #4]
 800d028:	e001      	b.n	800d02e <xTaskGetSchedulerState+0x26>
 800d02a:	2300      	movs	r3, #0
 800d02c:	607b      	str	r3, [r7, #4]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	200013b8 	.word	0x200013b8
 800d040:	200013d4 	.word	0x200013d4

0800d044 <xTaskPriorityDisinherit>:
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	613b      	str	r3, [r7, #16]
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d056      	beq.n	800d108 <xTaskPriorityDisinherit+0xc4>
 800d05a:	4b2e      	ldr	r3, [pc, #184]	; (800d114 <xTaskPriorityDisinherit+0xd0>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	429a      	cmp	r2, r3
 800d062:	d00a      	beq.n	800d07a <xTaskPriorityDisinherit+0x36>
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	60fb      	str	r3, [r7, #12]
 800d076:	bf00      	nop
 800d078:	e7fe      	b.n	800d078 <xTaskPriorityDisinherit+0x34>
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10a      	bne.n	800d098 <xTaskPriorityDisinherit+0x54>
 800d082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	60bb      	str	r3, [r7, #8]
 800d094:	bf00      	nop
 800d096:	e7fe      	b.n	800d096 <xTaskPriorityDisinherit+0x52>
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d09c:	1e5a      	subs	r2, r3, #1
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	651a      	str	r2, [r3, #80]	; 0x50
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d02c      	beq.n	800d108 <xTaskPriorityDisinherit+0xc4>
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d128      	bne.n	800d108 <xTaskPriorityDisinherit+0xc4>
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fade 	bl	800b67c <uxListRemove>
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	62da      	str	r2, [r3, #44]	; 0x2c
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	619a      	str	r2, [r3, #24]
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d8:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <xTaskPriorityDisinherit+0xd4>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d903      	bls.n	800d0e8 <xTaskPriorityDisinherit+0xa4>
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e4:	4a0c      	ldr	r2, [pc, #48]	; (800d118 <xTaskPriorityDisinherit+0xd4>)
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4a09      	ldr	r2, [pc, #36]	; (800d11c <xTaskPriorityDisinherit+0xd8>)
 800d0f6:	441a      	add	r2, r3
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	4610      	mov	r0, r2
 800d100:	f7fe fa5f 	bl	800b5c2 <vListInsertEnd>
 800d104:	2301      	movs	r3, #1
 800d106:	617b      	str	r3, [r7, #20]
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	20000ed8 	.word	0x20000ed8
 800d118:	200013b4 	.word	0x200013b4
 800d11c:	20000edc 	.word	0x20000edc

0800d120 <prvAddCurrentTaskToDelayedList>:
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
 800d12a:	4b21      	ldr	r3, [pc, #132]	; (800d1b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	4b20      	ldr	r3, [pc, #128]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe faa0 	bl	800b67c <uxListRemove>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d142:	d10a      	bne.n	800d15a <prvAddCurrentTaskToDelayedList+0x3a>
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d007      	beq.n	800d15a <prvAddCurrentTaskToDelayedList+0x3a>
 800d14a:	4b1a      	ldr	r3, [pc, #104]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3304      	adds	r3, #4
 800d150:	4619      	mov	r1, r3
 800d152:	4819      	ldr	r0, [pc, #100]	; (800d1b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d154:	f7fe fa35 	bl	800b5c2 <vListInsertEnd>
 800d158:	e026      	b.n	800d1a8 <prvAddCurrentTaskToDelayedList+0x88>
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4413      	add	r3, r2
 800d160:	60bb      	str	r3, [r7, #8]
 800d162:	4b14      	ldr	r3, [pc, #80]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d209      	bcs.n	800d186 <prvAddCurrentTaskToDelayedList+0x66>
 800d172:	4b12      	ldr	r3, [pc, #72]	; (800d1bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	4b0f      	ldr	r3, [pc, #60]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3304      	adds	r3, #4
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f7fe fa43 	bl	800b60a <vListInsert>
 800d184:	e010      	b.n	800d1a8 <prvAddCurrentTaskToDelayedList+0x88>
 800d186:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3304      	adds	r3, #4
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f7fe fa39 	bl	800b60a <vListInsert>
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d202      	bcs.n	800d1a8 <prvAddCurrentTaskToDelayedList+0x88>
 800d1a2:	4a08      	ldr	r2, [pc, #32]	; (800d1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	6013      	str	r3, [r2, #0]
 800d1a8:	bf00      	nop
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	200013b0 	.word	0x200013b0
 800d1b4:	20000ed8 	.word	0x20000ed8
 800d1b8:	20001398 	.word	0x20001398
 800d1bc:	20001368 	.word	0x20001368
 800d1c0:	20001364 	.word	0x20001364
 800d1c4:	200013cc 	.word	0x200013cc

0800d1c8 <xTimerCreateTimerTask>:
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af04      	add	r7, sp, #16
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	f000 fba1 	bl	800d918 <prvCheckForValidListAndQueue>
 800d1d6:	4b1c      	ldr	r3, [pc, #112]	; (800d248 <xTimerCreateTimerTask+0x80>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d021      	beq.n	800d222 <xTimerCreateTimerTask+0x5a>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60bb      	str	r3, [r7, #8]
 800d1e6:	1d3a      	adds	r2, r7, #4
 800d1e8:	f107 0108 	add.w	r1, r7, #8
 800d1ec:	f107 030c 	add.w	r3, r7, #12
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fe f99f 	bl	800b534 <vApplicationGetTimerTaskMemory>
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	9202      	str	r2, [sp, #8]
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	2302      	movs	r3, #2
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	2300      	movs	r3, #0
 800d206:	460a      	mov	r2, r1
 800d208:	4910      	ldr	r1, [pc, #64]	; (800d24c <xTimerCreateTimerTask+0x84>)
 800d20a:	4811      	ldr	r0, [pc, #68]	; (800d250 <xTimerCreateTimerTask+0x88>)
 800d20c:	f7ff f806 	bl	800c21c <xTaskCreateStatic>
 800d210:	4603      	mov	r3, r0
 800d212:	4a10      	ldr	r2, [pc, #64]	; (800d254 <xTimerCreateTimerTask+0x8c>)
 800d214:	6013      	str	r3, [r2, #0]
 800d216:	4b0f      	ldr	r3, [pc, #60]	; (800d254 <xTimerCreateTimerTask+0x8c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <xTimerCreateTimerTask+0x5a>
 800d21e:	2301      	movs	r3, #1
 800d220:	617b      	str	r3, [r7, #20]
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <xTimerCreateTimerTask+0x76>
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	613b      	str	r3, [r7, #16]
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xTimerCreateTimerTask+0x74>
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	4618      	mov	r0, r3
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	20001408 	.word	0x20001408
 800d24c:	0800f93c 	.word	0x0800f93c
 800d250:	0800d4c1 	.word	0x0800d4c1
 800d254:	2000140c 	.word	0x2000140c

0800d258 <xTimerCreate>:
 800d258:	b580      	push	{r7, lr}
 800d25a:	b088      	sub	sp, #32
 800d25c:	af02      	add	r7, sp, #8
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	603b      	str	r3, [r7, #0]
 800d266:	202c      	movs	r0, #44	; 0x2c
 800d268:	f000 fe2e 	bl	800dec8 <pvPortMalloc>
 800d26c:	6178      	str	r0, [r7, #20]
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00d      	beq.n	800d290 <xTimerCreate+0x38>
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	6a3b      	ldr	r3, [r7, #32]
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	68b9      	ldr	r1, [r7, #8]
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f000 f843 	bl	800d316 <prvInitialiseNewTimer>
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	4618      	mov	r0, r3
 800d294:	3718      	adds	r7, #24
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <xTimerCreateStatic>:
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b08a      	sub	sp, #40	; 0x28
 800d29e:	af02      	add	r7, sp, #8
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	607a      	str	r2, [r7, #4]
 800d2a6:	603b      	str	r3, [r7, #0]
 800d2a8:	232c      	movs	r3, #44	; 0x2c
 800d2aa:	613b      	str	r3, [r7, #16]
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	2b2c      	cmp	r3, #44	; 0x2c
 800d2b0:	d00a      	beq.n	800d2c8 <xTimerCreateStatic+0x2e>
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	61bb      	str	r3, [r7, #24]
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <xTimerCreateStatic+0x2c>
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10a      	bne.n	800d2e6 <xTimerCreateStatic+0x4c>
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	617b      	str	r3, [r7, #20]
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <xTimerCreateStatic+0x4a>
 800d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e8:	61fb      	str	r3, [r7, #28]
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00d      	beq.n	800d30c <xTimerCreateStatic+0x72>
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	9301      	str	r3, [sp, #4]
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	9300      	str	r3, [sp, #0]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	68b9      	ldr	r1, [r7, #8]
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 f805 	bl	800d316 <prvInitialiseNewTimer>
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	4618      	mov	r0, r3
 800d310:	3720      	adds	r7, #32
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <prvInitialiseNewTimer>:
 800d316:	b580      	push	{r7, lr}
 800d318:	b086      	sub	sp, #24
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	607a      	str	r2, [r7, #4]
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10a      	bne.n	800d340 <prvInitialiseNewTimer+0x2a>
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	617b      	str	r3, [r7, #20]
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <prvInitialiseNewTimer+0x28>
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	2b00      	cmp	r3, #0
 800d344:	d01e      	beq.n	800d384 <prvInitialiseNewTimer+0x6e>
 800d346:	f000 fae7 	bl	800d918 <prvCheckForValidListAndQueue>
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	601a      	str	r2, [r3, #0]
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	619a      	str	r2, [r3, #24]
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d358:	683a      	ldr	r2, [r7, #0]
 800d35a:	61da      	str	r2, [r3, #28]
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	6a3a      	ldr	r2, [r7, #32]
 800d360:	621a      	str	r2, [r3, #32]
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	3304      	adds	r3, #4
 800d366:	4618      	mov	r0, r3
 800d368:	f7fe f91e 	bl	800b5a8 <vListInitialiseItem>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d008      	beq.n	800d384 <prvInitialiseNewTimer+0x6e>
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d378:	f043 0304 	orr.w	r3, r3, #4
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d384:	bf00      	nop
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <xTimerGenericCommand>:
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	; 0x28
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	603b      	str	r3, [r7, #0]
 800d39a:	2300      	movs	r3, #0
 800d39c:	627b      	str	r3, [r7, #36]	; 0x24
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10a      	bne.n	800d3ba <xTimerGenericCommand+0x2e>
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	623b      	str	r3, [r7, #32]
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <xTimerGenericCommand+0x2c>
 800d3ba:	4b1a      	ldr	r3, [pc, #104]	; (800d424 <xTimerGenericCommand+0x98>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d02a      	beq.n	800d418 <xTimerGenericCommand+0x8c>
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	613b      	str	r3, [r7, #16]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	61bb      	str	r3, [r7, #24]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2b05      	cmp	r3, #5
 800d3d2:	dc18      	bgt.n	800d406 <xTimerGenericCommand+0x7a>
 800d3d4:	f7ff fe18 	bl	800d008 <xTaskGetSchedulerState>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d109      	bne.n	800d3f2 <xTimerGenericCommand+0x66>
 800d3de:	4b11      	ldr	r3, [pc, #68]	; (800d424 <xTimerGenericCommand+0x98>)
 800d3e0:	6818      	ldr	r0, [r3, #0]
 800d3e2:	f107 0110 	add.w	r1, r7, #16
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ea:	f7fe faaf 	bl	800b94c <xQueueGenericSend>
 800d3ee:	6278      	str	r0, [r7, #36]	; 0x24
 800d3f0:	e012      	b.n	800d418 <xTimerGenericCommand+0x8c>
 800d3f2:	4b0c      	ldr	r3, [pc, #48]	; (800d424 <xTimerGenericCommand+0x98>)
 800d3f4:	6818      	ldr	r0, [r3, #0]
 800d3f6:	f107 0110 	add.w	r1, r7, #16
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f7fe faa5 	bl	800b94c <xQueueGenericSend>
 800d402:	6278      	str	r0, [r7, #36]	; 0x24
 800d404:	e008      	b.n	800d418 <xTimerGenericCommand+0x8c>
 800d406:	4b07      	ldr	r3, [pc, #28]	; (800d424 <xTimerGenericCommand+0x98>)
 800d408:	6818      	ldr	r0, [r3, #0]
 800d40a:	f107 0110 	add.w	r1, r7, #16
 800d40e:	2300      	movs	r3, #0
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	f7fe fb99 	bl	800bb48 <xQueueGenericSendFromISR>
 800d416:	6278      	str	r0, [r7, #36]	; 0x24
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	4618      	mov	r0, r3
 800d41c:	3728      	adds	r7, #40	; 0x28
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	20001408 	.word	0x20001408

0800d428 <prvProcessExpiredTimer>:
 800d428:	b580      	push	{r7, lr}
 800d42a:	b088      	sub	sp, #32
 800d42c:	af02      	add	r7, sp, #8
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
 800d432:	4b22      	ldr	r3, [pc, #136]	; (800d4bc <prvProcessExpiredTimer+0x94>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	617b      	str	r3, [r7, #20]
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	3304      	adds	r3, #4
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe f91b 	bl	800b67c <uxListRemove>
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d44c:	f003 0304 	and.w	r3, r3, #4
 800d450:	2b00      	cmp	r3, #0
 800d452:	d022      	beq.n	800d49a <prvProcessExpiredTimer+0x72>
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	699a      	ldr	r2, [r3, #24]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	18d1      	adds	r1, r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	6978      	ldr	r0, [r7, #20]
 800d462:	f000 f8d1 	bl	800d608 <prvInsertTimerInActiveList>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d01f      	beq.n	800d4ac <prvProcessExpiredTimer+0x84>
 800d46c:	2300      	movs	r3, #0
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	2300      	movs	r3, #0
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	2100      	movs	r1, #0
 800d476:	6978      	ldr	r0, [r7, #20]
 800d478:	f7ff ff88 	bl	800d38c <xTimerGenericCommand>
 800d47c:	6138      	str	r0, [r7, #16]
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d113      	bne.n	800d4ac <prvProcessExpiredTimer+0x84>
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	60fb      	str	r3, [r7, #12]
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <prvProcessExpiredTimer+0x70>
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4a0:	f023 0301 	bic.w	r3, r3, #1
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	6a1b      	ldr	r3, [r3, #32]
 800d4b0:	6978      	ldr	r0, [r7, #20]
 800d4b2:	4798      	blx	r3
 800d4b4:	bf00      	nop
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	20001400 	.word	0x20001400

0800d4c0 <prvTimerTask>:
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	f107 0308 	add.w	r3, r7, #8
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 f857 	bl	800d580 <prvGetNextExpireTime>
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f000 f803 	bl	800d4e4 <prvProcessTimerOrBlockTask>
 800d4de:	f000 f8d5 	bl	800d68c <prvProcessReceivedCommands>
 800d4e2:	e7f1      	b.n	800d4c8 <prvTimerTask+0x8>

0800d4e4 <prvProcessTimerOrBlockTask>:
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
 800d4ee:	f7ff f9a9 	bl	800c844 <vTaskSuspendAll>
 800d4f2:	f107 0308 	add.w	r3, r7, #8
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 f866 	bl	800d5c8 <prvSampleTimeNow>
 800d4fc:	60f8      	str	r0, [r7, #12]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d130      	bne.n	800d566 <prvProcessTimerOrBlockTask+0x82>
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10a      	bne.n	800d520 <prvProcessTimerOrBlockTask+0x3c>
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d806      	bhi.n	800d520 <prvProcessTimerOrBlockTask+0x3c>
 800d512:	f7ff f9a5 	bl	800c860 <xTaskResumeAll>
 800d516:	68f9      	ldr	r1, [r7, #12]
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7ff ff85 	bl	800d428 <prvProcessExpiredTimer>
 800d51e:	e024      	b.n	800d56a <prvProcessTimerOrBlockTask+0x86>
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d008      	beq.n	800d538 <prvProcessTimerOrBlockTask+0x54>
 800d526:	4b13      	ldr	r3, [pc, #76]	; (800d574 <prvProcessTimerOrBlockTask+0x90>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <prvProcessTimerOrBlockTask+0x50>
 800d530:	2301      	movs	r3, #1
 800d532:	e000      	b.n	800d536 <prvProcessTimerOrBlockTask+0x52>
 800d534:	2300      	movs	r3, #0
 800d536:	603b      	str	r3, [r7, #0]
 800d538:	4b0f      	ldr	r3, [pc, #60]	; (800d578 <prvProcessTimerOrBlockTask+0x94>)
 800d53a:	6818      	ldr	r0, [r3, #0]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	4619      	mov	r1, r3
 800d546:	f7fe fe35 	bl	800c1b4 <vQueueWaitForMessageRestricted>
 800d54a:	f7ff f989 	bl	800c860 <xTaskResumeAll>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d10a      	bne.n	800d56a <prvProcessTimerOrBlockTask+0x86>
 800d554:	4b09      	ldr	r3, [pc, #36]	; (800d57c <prvProcessTimerOrBlockTask+0x98>)
 800d556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	e001      	b.n	800d56a <prvProcessTimerOrBlockTask+0x86>
 800d566:	f7ff f97b 	bl	800c860 <xTaskResumeAll>
 800d56a:	bf00      	nop
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	20001404 	.word	0x20001404
 800d578:	20001408 	.word	0x20001408
 800d57c:	e000ed04 	.word	0xe000ed04

0800d580 <prvGetNextExpireTime>:
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	4b0e      	ldr	r3, [pc, #56]	; (800d5c4 <prvGetNextExpireTime+0x44>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d101      	bne.n	800d596 <prvGetNextExpireTime+0x16>
 800d592:	2201      	movs	r2, #1
 800d594:	e000      	b.n	800d598 <prvGetNextExpireTime+0x18>
 800d596:	2200      	movs	r2, #0
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d105      	bne.n	800d5b0 <prvGetNextExpireTime+0x30>
 800d5a4:	4b07      	ldr	r3, [pc, #28]	; (800d5c4 <prvGetNextExpireTime+0x44>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e001      	b.n	800d5b4 <prvGetNextExpireTime+0x34>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	20001400 	.word	0x20001400

0800d5c8 <prvSampleTimeNow>:
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	f7ff f9e4 	bl	800c99c <xTaskGetTickCount>
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	4b0b      	ldr	r3, [pc, #44]	; (800d604 <prvSampleTimeNow+0x3c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d205      	bcs.n	800d5ec <prvSampleTimeNow+0x24>
 800d5e0:	f000 f936 	bl	800d850 <prvSwitchTimerLists>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	e002      	b.n	800d5f2 <prvSampleTimeNow+0x2a>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	601a      	str	r2, [r3, #0]
 800d5f2:	4a04      	ldr	r2, [pc, #16]	; (800d604 <prvSampleTimeNow+0x3c>)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20001410 	.word	0x20001410

0800d608 <prvInsertTimerInActiveList>:
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
 800d614:	603b      	str	r3, [r7, #0]
 800d616:	2300      	movs	r3, #0
 800d618:	617b      	str	r3, [r7, #20]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	605a      	str	r2, [r3, #4]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	611a      	str	r2, [r3, #16]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d812      	bhi.n	800d654 <prvInsertTimerInActiveList+0x4c>
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	1ad2      	subs	r2, r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d302      	bcc.n	800d642 <prvInsertTimerInActiveList+0x3a>
 800d63c:	2301      	movs	r3, #1
 800d63e:	617b      	str	r3, [r7, #20]
 800d640:	e01b      	b.n	800d67a <prvInsertTimerInActiveList+0x72>
 800d642:	4b10      	ldr	r3, [pc, #64]	; (800d684 <prvInsertTimerInActiveList+0x7c>)
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3304      	adds	r3, #4
 800d64a:	4619      	mov	r1, r3
 800d64c:	4610      	mov	r0, r2
 800d64e:	f7fd ffdc 	bl	800b60a <vListInsert>
 800d652:	e012      	b.n	800d67a <prvInsertTimerInActiveList+0x72>
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d206      	bcs.n	800d66a <prvInsertTimerInActiveList+0x62>
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d302      	bcc.n	800d66a <prvInsertTimerInActiveList+0x62>
 800d664:	2301      	movs	r3, #1
 800d666:	617b      	str	r3, [r7, #20]
 800d668:	e007      	b.n	800d67a <prvInsertTimerInActiveList+0x72>
 800d66a:	4b07      	ldr	r3, [pc, #28]	; (800d688 <prvInsertTimerInActiveList+0x80>)
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3304      	adds	r3, #4
 800d672:	4619      	mov	r1, r3
 800d674:	4610      	mov	r0, r2
 800d676:	f7fd ffc8 	bl	800b60a <vListInsert>
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	20001404 	.word	0x20001404
 800d688:	20001400 	.word	0x20001400

0800d68c <prvProcessReceivedCommands>:
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08e      	sub	sp, #56	; 0x38
 800d690:	af02      	add	r7, sp, #8
 800d692:	e0ca      	b.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	da18      	bge.n	800d6cc <prvProcessReceivedCommands+0x40>
 800d69a:	1d3b      	adds	r3, r7, #4
 800d69c:	3304      	adds	r3, #4
 800d69e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10a      	bne.n	800d6bc <prvProcessReceivedCommands+0x30>
 800d6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6aa:	f383 8811 	msr	BASEPRI, r3
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	61fb      	str	r3, [r7, #28]
 800d6b8:	bf00      	nop
 800d6ba:	e7fe      	b.n	800d6ba <prvProcessReceivedCommands+0x2e>
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6c2:	6850      	ldr	r0, [r2, #4]
 800d6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6c6:	6892      	ldr	r2, [r2, #8]
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f2c0 80aa 	blt.w	800d828 <prvProcessReceivedCommands+0x19c>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d004      	beq.n	800d6ea <prvProcessReceivedCommands+0x5e>
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	3304      	adds	r3, #4
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fd ffc9 	bl	800b67c <uxListRemove>
 800d6ea:	463b      	mov	r3, r7
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff ff6b 	bl	800d5c8 <prvSampleTimeNow>
 800d6f2:	6278      	str	r0, [r7, #36]	; 0x24
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b09      	cmp	r3, #9
 800d6f8:	f200 8097 	bhi.w	800d82a <prvProcessReceivedCommands+0x19e>
 800d6fc:	a201      	add	r2, pc, #4	; (adr r2, 800d704 <prvProcessReceivedCommands+0x78>)
 800d6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d702:	bf00      	nop
 800d704:	0800d72d 	.word	0x0800d72d
 800d708:	0800d72d 	.word	0x0800d72d
 800d70c:	0800d72d 	.word	0x0800d72d
 800d710:	0800d7a1 	.word	0x0800d7a1
 800d714:	0800d7b5 	.word	0x0800d7b5
 800d718:	0800d7ff 	.word	0x0800d7ff
 800d71c:	0800d72d 	.word	0x0800d72d
 800d720:	0800d72d 	.word	0x0800d72d
 800d724:	0800d7a1 	.word	0x0800d7a1
 800d728:	0800d7b5 	.word	0x0800d7b5
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d732:	f043 0301 	orr.w	r3, r3, #1
 800d736:	b2da      	uxtb	r2, r3
 800d738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	18d1      	adds	r1, r2, r3
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d74c:	f7ff ff5c 	bl	800d608 <prvInsertTimerInActiveList>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d069      	beq.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	6a1b      	ldr	r3, [r3, #32]
 800d75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d75c:	4798      	blx	r3
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d764:	f003 0304 	and.w	r3, r3, #4
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d05e      	beq.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	441a      	add	r2, r3
 800d774:	2300      	movs	r3, #0
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	2300      	movs	r3, #0
 800d77a:	2100      	movs	r1, #0
 800d77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d77e:	f7ff fe05 	bl	800d38c <xTimerGenericCommand>
 800d782:	6238      	str	r0, [r7, #32]
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d14f      	bne.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	61bb      	str	r3, [r7, #24]
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <prvProcessReceivedCommands+0x112>
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a6:	f023 0301 	bic.w	r3, r3, #1
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d7b2:	e03a      	b.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7ba:	f043 0301 	orr.w	r3, r3, #1
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d7c6:	68ba      	ldr	r2, [r7, #8]
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	619a      	str	r2, [r3, #24]
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10a      	bne.n	800d7ea <prvProcessReceivedCommands+0x15e>
 800d7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	617b      	str	r3, [r7, #20]
 800d7e6:	bf00      	nop
 800d7e8:	e7fe      	b.n	800d7e8 <prvProcessReceivedCommands+0x15c>
 800d7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ec:	699a      	ldr	r2, [r3, #24]
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f0:	18d1      	adds	r1, r2, r3
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7f8:	f7ff ff06 	bl	800d608 <prvInsertTimerInActiveList>
 800d7fc:	e015      	b.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d804:	f003 0302 	and.w	r3, r3, #2
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d103      	bne.n	800d814 <prvProcessReceivedCommands+0x188>
 800d80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d80e:	f000 fc27 	bl	800e060 <vPortFree>
 800d812:	e00a      	b.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d81a:	f023 0301 	bic.w	r3, r3, #1
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d826:	e000      	b.n	800d82a <prvProcessReceivedCommands+0x19e>
 800d828:	bf00      	nop
 800d82a:	4b08      	ldr	r3, [pc, #32]	; (800d84c <prvProcessReceivedCommands+0x1c0>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	1d39      	adds	r1, r7, #4
 800d830:	2200      	movs	r2, #0
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fa24 	bl	800bc80 <xQueueReceive>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f47f af2a 	bne.w	800d694 <prvProcessReceivedCommands+0x8>
 800d840:	bf00      	nop
 800d842:	bf00      	nop
 800d844:	3730      	adds	r7, #48	; 0x30
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	20001408 	.word	0x20001408

0800d850 <prvSwitchTimerLists>:
 800d850:	b580      	push	{r7, lr}
 800d852:	b088      	sub	sp, #32
 800d854:	af02      	add	r7, sp, #8
 800d856:	e048      	b.n	800d8ea <prvSwitchTimerLists+0x9a>
 800d858:	4b2d      	ldr	r3, [pc, #180]	; (800d910 <prvSwitchTimerLists+0xc0>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	613b      	str	r3, [r7, #16]
 800d862:	4b2b      	ldr	r3, [pc, #172]	; (800d910 <prvSwitchTimerLists+0xc0>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	60fb      	str	r3, [r7, #12]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	3304      	adds	r3, #4
 800d870:	4618      	mov	r0, r3
 800d872:	f7fd ff03 	bl	800b67c <uxListRemove>
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6a1b      	ldr	r3, [r3, #32]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	4798      	blx	r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d884:	f003 0304 	and.w	r3, r3, #4
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d02e      	beq.n	800d8ea <prvSwitchTimerLists+0x9a>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	699b      	ldr	r3, [r3, #24]
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	4413      	add	r3, r2
 800d894:	60bb      	str	r3, [r7, #8]
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d90e      	bls.n	800d8bc <prvSwitchTimerLists+0x6c>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	605a      	str	r2, [r3, #4]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	611a      	str	r2, [r3, #16]
 800d8aa:	4b19      	ldr	r3, [pc, #100]	; (800d910 <prvSwitchTimerLists+0xc0>)
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	f7fd fea8 	bl	800b60a <vListInsert>
 800d8ba:	e016      	b.n	800d8ea <prvSwitchTimerLists+0x9a>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	693a      	ldr	r2, [r7, #16]
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f7ff fd60 	bl	800d38c <xTimerGenericCommand>
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10a      	bne.n	800d8ea <prvSwitchTimerLists+0x9a>
 800d8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	603b      	str	r3, [r7, #0]
 800d8e6:	bf00      	nop
 800d8e8:	e7fe      	b.n	800d8e8 <prvSwitchTimerLists+0x98>
 800d8ea:	4b09      	ldr	r3, [pc, #36]	; (800d910 <prvSwitchTimerLists+0xc0>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1b1      	bne.n	800d858 <prvSwitchTimerLists+0x8>
 800d8f4:	4b06      	ldr	r3, [pc, #24]	; (800d910 <prvSwitchTimerLists+0xc0>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	617b      	str	r3, [r7, #20]
 800d8fa:	4b06      	ldr	r3, [pc, #24]	; (800d914 <prvSwitchTimerLists+0xc4>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a04      	ldr	r2, [pc, #16]	; (800d910 <prvSwitchTimerLists+0xc0>)
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	4a04      	ldr	r2, [pc, #16]	; (800d914 <prvSwitchTimerLists+0xc4>)
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	bf00      	nop
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	20001400 	.word	0x20001400
 800d914:	20001404 	.word	0x20001404

0800d918 <prvCheckForValidListAndQueue>:
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af02      	add	r7, sp, #8
 800d91e:	f000 f9b1 	bl	800dc84 <vPortEnterCritical>
 800d922:	4b15      	ldr	r3, [pc, #84]	; (800d978 <prvCheckForValidListAndQueue+0x60>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d120      	bne.n	800d96c <prvCheckForValidListAndQueue+0x54>
 800d92a:	4814      	ldr	r0, [pc, #80]	; (800d97c <prvCheckForValidListAndQueue+0x64>)
 800d92c:	f7fd fe1c 	bl	800b568 <vListInitialise>
 800d930:	4813      	ldr	r0, [pc, #76]	; (800d980 <prvCheckForValidListAndQueue+0x68>)
 800d932:	f7fd fe19 	bl	800b568 <vListInitialise>
 800d936:	4b13      	ldr	r3, [pc, #76]	; (800d984 <prvCheckForValidListAndQueue+0x6c>)
 800d938:	4a10      	ldr	r2, [pc, #64]	; (800d97c <prvCheckForValidListAndQueue+0x64>)
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	4b12      	ldr	r3, [pc, #72]	; (800d988 <prvCheckForValidListAndQueue+0x70>)
 800d93e:	4a10      	ldr	r2, [pc, #64]	; (800d980 <prvCheckForValidListAndQueue+0x68>)
 800d940:	601a      	str	r2, [r3, #0]
 800d942:	2300      	movs	r3, #0
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	4b11      	ldr	r3, [pc, #68]	; (800d98c <prvCheckForValidListAndQueue+0x74>)
 800d948:	4a11      	ldr	r2, [pc, #68]	; (800d990 <prvCheckForValidListAndQueue+0x78>)
 800d94a:	2110      	movs	r1, #16
 800d94c:	200a      	movs	r0, #10
 800d94e:	f7fd ff27 	bl	800b7a0 <xQueueGenericCreateStatic>
 800d952:	4603      	mov	r3, r0
 800d954:	4a08      	ldr	r2, [pc, #32]	; (800d978 <prvCheckForValidListAndQueue+0x60>)
 800d956:	6013      	str	r3, [r2, #0]
 800d958:	4b07      	ldr	r3, [pc, #28]	; (800d978 <prvCheckForValidListAndQueue+0x60>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d005      	beq.n	800d96c <prvCheckForValidListAndQueue+0x54>
 800d960:	4b05      	ldr	r3, [pc, #20]	; (800d978 <prvCheckForValidListAndQueue+0x60>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	490b      	ldr	r1, [pc, #44]	; (800d994 <prvCheckForValidListAndQueue+0x7c>)
 800d966:	4618      	mov	r0, r3
 800d968:	f7fe fbfa 	bl	800c160 <vQueueAddToRegistry>
 800d96c:	f000 f9ba 	bl	800dce4 <vPortExitCritical>
 800d970:	bf00      	nop
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	20001408 	.word	0x20001408
 800d97c:	200013d8 	.word	0x200013d8
 800d980:	200013ec 	.word	0x200013ec
 800d984:	20001400 	.word	0x20001400
 800d988:	20001404 	.word	0x20001404
 800d98c:	200014b4 	.word	0x200014b4
 800d990:	20001414 	.word	0x20001414
 800d994:	0800f944 	.word	0x0800f944

0800d998 <xTimerIsTimerActive>:
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	613b      	str	r3, [r7, #16]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10a      	bne.n	800d9c0 <xTimerIsTimerActive+0x28>
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <xTimerIsTimerActive+0x26>
 800d9c0:	f000 f960 	bl	800dc84 <vPortEnterCritical>
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d102      	bne.n	800d9d8 <xTimerIsTimerActive+0x40>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	617b      	str	r3, [r7, #20]
 800d9d6:	e001      	b.n	800d9dc <xTimerIsTimerActive+0x44>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	617b      	str	r3, [r7, #20]
 800d9dc:	f000 f982 	bl	800dce4 <vPortExitCritical>
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <pvTimerGetTimerID>:
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b086      	sub	sp, #24
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	617b      	str	r3, [r7, #20]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10a      	bne.n	800da12 <pvTimerGetTimerID+0x28>
 800d9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da00:	f383 8811 	msr	BASEPRI, r3
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	60fb      	str	r3, [r7, #12]
 800da0e:	bf00      	nop
 800da10:	e7fe      	b.n	800da10 <pvTimerGetTimerID+0x26>
 800da12:	f000 f937 	bl	800dc84 <vPortEnterCritical>
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	69db      	ldr	r3, [r3, #28]
 800da1a:	613b      	str	r3, [r7, #16]
 800da1c:	f000 f962 	bl	800dce4 <vPortExitCritical>
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	4618      	mov	r0, r3
 800da24:	3718      	adds	r7, #24
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
	...

0800da2c <pxPortInitialiseStack>:
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	3b04      	subs	r3, #4
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da44:	601a      	str	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3b04      	subs	r3, #4
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f023 0201 	bic.w	r2, r3, #1
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3b04      	subs	r3, #4
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	4a0c      	ldr	r2, [pc, #48]	; (800da90 <pxPortInitialiseStack+0x64>)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	3b14      	subs	r3, #20
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3b04      	subs	r3, #4
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f06f 0202 	mvn.w	r2, #2
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	3b20      	subs	r3, #32
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	0800da95 	.word	0x0800da95

0800da94 <prvTaskExitError>:
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	2300      	movs	r3, #0
 800da9c:	607b      	str	r3, [r7, #4]
 800da9e:	4b12      	ldr	r3, [pc, #72]	; (800dae8 <prvTaskExitError+0x54>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa6:	d00a      	beq.n	800dabe <prvTaskExitError+0x2a>
 800daa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	bf00      	nop
 800dabc:	e7fe      	b.n	800dabc <prvTaskExitError+0x28>
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	60bb      	str	r3, [r7, #8]
 800dad0:	bf00      	nop
 800dad2:	bf00      	nop
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0fc      	beq.n	800dad4 <prvTaskExitError+0x40>
 800dada:	bf00      	nop
 800dadc:	bf00      	nop
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	20000198 	.word	0x20000198
 800daec:	00000000 	.word	0x00000000

0800daf0 <SVC_Handler>:
 800daf0:	4b07      	ldr	r3, [pc, #28]	; (800db10 <pxCurrentTCBConst2>)
 800daf2:	6819      	ldr	r1, [r3, #0]
 800daf4:	6808      	ldr	r0, [r1, #0]
 800daf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafa:	f380 8809 	msr	PSP, r0
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f04f 0000 	mov.w	r0, #0
 800db06:	f380 8811 	msr	BASEPRI, r0
 800db0a:	4770      	bx	lr
 800db0c:	f3af 8000 	nop.w

0800db10 <pxCurrentTCBConst2>:
 800db10:	20000ed8 	.word	0x20000ed8
 800db14:	bf00      	nop
 800db16:	bf00      	nop

0800db18 <prvPortStartFirstTask>:
 800db18:	4808      	ldr	r0, [pc, #32]	; (800db3c <prvPortStartFirstTask+0x24>)
 800db1a:	6800      	ldr	r0, [r0, #0]
 800db1c:	6800      	ldr	r0, [r0, #0]
 800db1e:	f380 8808 	msr	MSP, r0
 800db22:	f04f 0000 	mov.w	r0, #0
 800db26:	f380 8814 	msr	CONTROL, r0
 800db2a:	b662      	cpsie	i
 800db2c:	b661      	cpsie	f
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	df00      	svc	0
 800db38:	bf00      	nop
 800db3a:	bf00      	nop
 800db3c:	e000ed08 	.word	0xe000ed08

0800db40 <xPortStartScheduler>:
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	4b46      	ldr	r3, [pc, #280]	; (800dc60 <xPortStartScheduler+0x120>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a46      	ldr	r2, [pc, #280]	; (800dc64 <xPortStartScheduler+0x124>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d10a      	bne.n	800db66 <xPortStartScheduler+0x26>
 800db50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	613b      	str	r3, [r7, #16]
 800db62:	bf00      	nop
 800db64:	e7fe      	b.n	800db64 <xPortStartScheduler+0x24>
 800db66:	4b3e      	ldr	r3, [pc, #248]	; (800dc60 <xPortStartScheduler+0x120>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a3f      	ldr	r2, [pc, #252]	; (800dc68 <xPortStartScheduler+0x128>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d10a      	bne.n	800db86 <xPortStartScheduler+0x46>
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	60fb      	str	r3, [r7, #12]
 800db82:	bf00      	nop
 800db84:	e7fe      	b.n	800db84 <xPortStartScheduler+0x44>
 800db86:	4b39      	ldr	r3, [pc, #228]	; (800dc6c <xPortStartScheduler+0x12c>)
 800db88:	617b      	str	r3, [r7, #20]
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	607b      	str	r3, [r7, #4]
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	22ff      	movs	r2, #255	; 0xff
 800db96:	701a      	strb	r2, [r3, #0]
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	70fb      	strb	r3, [r7, #3]
 800dba0:	78fb      	ldrb	r3, [r7, #3]
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	4b31      	ldr	r3, [pc, #196]	; (800dc70 <xPortStartScheduler+0x130>)
 800dbac:	701a      	strb	r2, [r3, #0]
 800dbae:	4b31      	ldr	r3, [pc, #196]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbb0:	2207      	movs	r2, #7
 800dbb2:	601a      	str	r2, [r3, #0]
 800dbb4:	e009      	b.n	800dbca <xPortStartScheduler+0x8a>
 800dbb6:	4b2f      	ldr	r3, [pc, #188]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	4a2d      	ldr	r2, [pc, #180]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbbe:	6013      	str	r3, [r2, #0]
 800dbc0:	78fb      	ldrb	r3, [r7, #3]
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	70fb      	strb	r3, [r7, #3]
 800dbca:	78fb      	ldrb	r3, [r7, #3]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbd2:	2b80      	cmp	r3, #128	; 0x80
 800dbd4:	d0ef      	beq.n	800dbb6 <xPortStartScheduler+0x76>
 800dbd6:	4b27      	ldr	r3, [pc, #156]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f1c3 0307 	rsb	r3, r3, #7
 800dbde:	2b04      	cmp	r3, #4
 800dbe0:	d00a      	beq.n	800dbf8 <xPortStartScheduler+0xb8>
 800dbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	60bb      	str	r3, [r7, #8]
 800dbf4:	bf00      	nop
 800dbf6:	e7fe      	b.n	800dbf6 <xPortStartScheduler+0xb6>
 800dbf8:	4b1e      	ldr	r3, [pc, #120]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	021b      	lsls	r3, r3, #8
 800dbfe:	4a1d      	ldr	r2, [pc, #116]	; (800dc74 <xPortStartScheduler+0x134>)
 800dc00:	6013      	str	r3, [r2, #0]
 800dc02:	4b1c      	ldr	r3, [pc, #112]	; (800dc74 <xPortStartScheduler+0x134>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc0a:	4a1a      	ldr	r2, [pc, #104]	; (800dc74 <xPortStartScheduler+0x134>)
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	701a      	strb	r2, [r3, #0]
 800dc16:	4b18      	ldr	r3, [pc, #96]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a17      	ldr	r2, [pc, #92]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc20:	6013      	str	r3, [r2, #0]
 800dc22:	4b15      	ldr	r3, [pc, #84]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a14      	ldr	r2, [pc, #80]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc2c:	6013      	str	r3, [r2, #0]
 800dc2e:	f000 f8dd 	bl	800ddec <vPortSetupTimerInterrupt>
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <xPortStartScheduler+0x13c>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
 800dc38:	f000 f8fc 	bl	800de34 <vPortEnableVFP>
 800dc3c:	4b10      	ldr	r3, [pc, #64]	; (800dc80 <xPortStartScheduler+0x140>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0f      	ldr	r2, [pc, #60]	; (800dc80 <xPortStartScheduler+0x140>)
 800dc42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	f7ff ff66 	bl	800db18 <prvPortStartFirstTask>
 800dc4c:	f7fe ff70 	bl	800cb30 <vTaskSwitchContext>
 800dc50:	f7ff ff20 	bl	800da94 <prvTaskExitError>
 800dc54:	2300      	movs	r3, #0
 800dc56:	4618      	mov	r0, r3
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	e000ed00 	.word	0xe000ed00
 800dc64:	410fc271 	.word	0x410fc271
 800dc68:	410fc270 	.word	0x410fc270
 800dc6c:	e000e400 	.word	0xe000e400
 800dc70:	20001504 	.word	0x20001504
 800dc74:	20001508 	.word	0x20001508
 800dc78:	e000ed20 	.word	0xe000ed20
 800dc7c:	20000198 	.word	0x20000198
 800dc80:	e000ef34 	.word	0xe000ef34

0800dc84 <vPortEnterCritical>:
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	607b      	str	r3, [r7, #4]
 800dc9c:	bf00      	nop
 800dc9e:	4b0f      	ldr	r3, [pc, #60]	; (800dcdc <vPortEnterCritical+0x58>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	4a0d      	ldr	r2, [pc, #52]	; (800dcdc <vPortEnterCritical+0x58>)
 800dca6:	6013      	str	r3, [r2, #0]
 800dca8:	4b0c      	ldr	r3, [pc, #48]	; (800dcdc <vPortEnterCritical+0x58>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d10f      	bne.n	800dcd0 <vPortEnterCritical+0x4c>
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <vPortEnterCritical+0x5c>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00a      	beq.n	800dcd0 <vPortEnterCritical+0x4c>
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	603b      	str	r3, [r7, #0]
 800dccc:	bf00      	nop
 800dcce:	e7fe      	b.n	800dcce <vPortEnterCritical+0x4a>
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	20000198 	.word	0x20000198
 800dce0:	e000ed04 	.word	0xe000ed04

0800dce4 <vPortExitCritical>:
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4b12      	ldr	r3, [pc, #72]	; (800dd34 <vPortExitCritical+0x50>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10a      	bne.n	800dd08 <vPortExitCritical+0x24>
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	607b      	str	r3, [r7, #4]
 800dd04:	bf00      	nop
 800dd06:	e7fe      	b.n	800dd06 <vPortExitCritical+0x22>
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <vPortExitCritical+0x50>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	4a09      	ldr	r2, [pc, #36]	; (800dd34 <vPortExitCritical+0x50>)
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	4b08      	ldr	r3, [pc, #32]	; (800dd34 <vPortExitCritical+0x50>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d105      	bne.n	800dd26 <vPortExitCritical+0x42>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	603b      	str	r3, [r7, #0]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	f383 8811 	msr	BASEPRI, r3
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	20000198 	.word	0x20000198
	...

0800dd40 <PendSV_Handler>:
 800dd40:	f3ef 8009 	mrs	r0, PSP
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <pxCurrentTCBConst>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	f01e 0f10 	tst.w	lr, #16
 800dd50:	bf08      	it	eq
 800dd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5a:	6010      	str	r0, [r2, #0]
 800dd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd64:	f380 8811 	msr	BASEPRI, r0
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f7fe fede 	bl	800cb30 <vTaskSwitchContext>
 800dd74:	f04f 0000 	mov.w	r0, #0
 800dd78:	f380 8811 	msr	BASEPRI, r0
 800dd7c:	bc09      	pop	{r0, r3}
 800dd7e:	6819      	ldr	r1, [r3, #0]
 800dd80:	6808      	ldr	r0, [r1, #0]
 800dd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd86:	f01e 0f10 	tst.w	lr, #16
 800dd8a:	bf08      	it	eq
 800dd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd90:	f380 8809 	msr	PSP, r0
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	f3af 8000 	nop.w

0800dda0 <pxCurrentTCBConst>:
 800dda0:	20000ed8 	.word	0x20000ed8
 800dda4:	bf00      	nop
 800dda6:	bf00      	nop

0800dda8 <xPortSysTickHandler>:
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	607b      	str	r3, [r7, #4]
 800ddc0:	bf00      	nop
 800ddc2:	f7fe fdfb 	bl	800c9bc <xTaskIncrementTick>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d003      	beq.n	800ddd4 <xPortSysTickHandler+0x2c>
 800ddcc:	4b06      	ldr	r3, [pc, #24]	; (800dde8 <xPortSysTickHandler+0x40>)
 800ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	bf00      	nop
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <vPortSetupTimerInterrupt>:
 800ddec:	b480      	push	{r7}
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	4b0b      	ldr	r3, [pc, #44]	; (800de20 <vPortSetupTimerInterrupt+0x34>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	601a      	str	r2, [r3, #0]
 800ddf6:	4b0b      	ldr	r3, [pc, #44]	; (800de24 <vPortSetupTimerInterrupt+0x38>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	4b0a      	ldr	r3, [pc, #40]	; (800de28 <vPortSetupTimerInterrupt+0x3c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a0a      	ldr	r2, [pc, #40]	; (800de2c <vPortSetupTimerInterrupt+0x40>)
 800de02:	fba2 2303 	umull	r2, r3, r2, r3
 800de06:	099b      	lsrs	r3, r3, #6
 800de08:	4a09      	ldr	r2, [pc, #36]	; (800de30 <vPortSetupTimerInterrupt+0x44>)
 800de0a:	3b01      	subs	r3, #1
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	4b04      	ldr	r3, [pc, #16]	; (800de20 <vPortSetupTimerInterrupt+0x34>)
 800de10:	2207      	movs	r2, #7
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	bf00      	nop
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	e000e010 	.word	0xe000e010
 800de24:	e000e018 	.word	0xe000e018
 800de28:	20000158 	.word	0x20000158
 800de2c:	10624dd3 	.word	0x10624dd3
 800de30:	e000e014 	.word	0xe000e014

0800de34 <vPortEnableVFP>:
 800de34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de44 <vPortEnableVFP+0x10>
 800de38:	6801      	ldr	r1, [r0, #0]
 800de3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de3e:	6001      	str	r1, [r0, #0]
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	e000ed88 	.word	0xe000ed88

0800de48 <vPortValidateInterruptPriority>:
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	f3ef 8305 	mrs	r3, IPSR
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b0f      	cmp	r3, #15
 800de58:	d914      	bls.n	800de84 <vPortValidateInterruptPriority+0x3c>
 800de5a:	4a17      	ldr	r2, [pc, #92]	; (800deb8 <vPortValidateInterruptPriority+0x70>)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4413      	add	r3, r2
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	72fb      	strb	r3, [r7, #11]
 800de64:	4b15      	ldr	r3, [pc, #84]	; (800debc <vPortValidateInterruptPriority+0x74>)
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	7afa      	ldrb	r2, [r7, #11]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d20a      	bcs.n	800de84 <vPortValidateInterruptPriority+0x3c>
 800de6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	607b      	str	r3, [r7, #4]
 800de80:	bf00      	nop
 800de82:	e7fe      	b.n	800de82 <vPortValidateInterruptPriority+0x3a>
 800de84:	4b0e      	ldr	r3, [pc, #56]	; (800dec0 <vPortValidateInterruptPriority+0x78>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800de8c:	4b0d      	ldr	r3, [pc, #52]	; (800dec4 <vPortValidateInterruptPriority+0x7c>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	429a      	cmp	r2, r3
 800de92:	d90a      	bls.n	800deaa <vPortValidateInterruptPriority+0x62>
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	603b      	str	r3, [r7, #0]
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <vPortValidateInterruptPriority+0x60>
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	e000e3f0 	.word	0xe000e3f0
 800debc:	20001504 	.word	0x20001504
 800dec0:	e000ed0c 	.word	0xe000ed0c
 800dec4:	20001508 	.word	0x20001508

0800dec8 <pvPortMalloc>:
 800dec8:	b580      	push	{r7, lr}
 800deca:	b08a      	sub	sp, #40	; 0x28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	2300      	movs	r3, #0
 800ded2:	61fb      	str	r3, [r7, #28]
 800ded4:	f7fe fcb6 	bl	800c844 <vTaskSuspendAll>
 800ded8:	4b5b      	ldr	r3, [pc, #364]	; (800e048 <pvPortMalloc+0x180>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <pvPortMalloc+0x1c>
 800dee0:	f000 f920 	bl	800e124 <prvHeapInit>
 800dee4:	4b59      	ldr	r3, [pc, #356]	; (800e04c <pvPortMalloc+0x184>)
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4013      	ands	r3, r2
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 8093 	bne.w	800e018 <pvPortMalloc+0x150>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01d      	beq.n	800df34 <pvPortMalloc+0x6c>
 800def8:	2208      	movs	r2, #8
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4413      	add	r3, r2
 800defe:	607b      	str	r3, [r7, #4]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	2b00      	cmp	r3, #0
 800df08:	d014      	beq.n	800df34 <pvPortMalloc+0x6c>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f023 0307 	bic.w	r3, r3, #7
 800df10:	3308      	adds	r3, #8
 800df12:	607b      	str	r3, [r7, #4]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f003 0307 	and.w	r3, r3, #7
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <pvPortMalloc+0x6c>
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	bf00      	nop
 800df32:	e7fe      	b.n	800df32 <pvPortMalloc+0x6a>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d06e      	beq.n	800e018 <pvPortMalloc+0x150>
 800df3a:	4b45      	ldr	r3, [pc, #276]	; (800e050 <pvPortMalloc+0x188>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	429a      	cmp	r2, r3
 800df42:	d869      	bhi.n	800e018 <pvPortMalloc+0x150>
 800df44:	4b43      	ldr	r3, [pc, #268]	; (800e054 <pvPortMalloc+0x18c>)
 800df46:	623b      	str	r3, [r7, #32]
 800df48:	4b42      	ldr	r3, [pc, #264]	; (800e054 <pvPortMalloc+0x18c>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	627b      	str	r3, [r7, #36]	; 0x24
 800df4e:	e004      	b.n	800df5a <pvPortMalloc+0x92>
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	623b      	str	r3, [r7, #32]
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	627b      	str	r3, [r7, #36]	; 0x24
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	429a      	cmp	r2, r3
 800df62:	d903      	bls.n	800df6c <pvPortMalloc+0xa4>
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1f1      	bne.n	800df50 <pvPortMalloc+0x88>
 800df6c:	4b36      	ldr	r3, [pc, #216]	; (800e048 <pvPortMalloc+0x180>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df72:	429a      	cmp	r2, r3
 800df74:	d050      	beq.n	800e018 <pvPortMalloc+0x150>
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2208      	movs	r2, #8
 800df7c:	4413      	add	r3, r2
 800df7e:	61fb      	str	r3, [r7, #28]
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	1ad2      	subs	r2, r2, r3
 800df90:	2308      	movs	r3, #8
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	429a      	cmp	r2, r3
 800df96:	d91f      	bls.n	800dfd8 <pvPortMalloc+0x110>
 800df98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4413      	add	r3, r2
 800df9e:	61bb      	str	r3, [r7, #24]
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	f003 0307 	and.w	r3, r3, #7
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00a      	beq.n	800dfc0 <pvPortMalloc+0xf8>
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	613b      	str	r3, [r7, #16]
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <pvPortMalloc+0xf6>
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	1ad2      	subs	r2, r2, r3
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	605a      	str	r2, [r3, #4]
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	605a      	str	r2, [r3, #4]
 800dfd2:	69b8      	ldr	r0, [r7, #24]
 800dfd4:	f000 f908 	bl	800e1e8 <prvInsertBlockIntoFreeList>
 800dfd8:	4b1d      	ldr	r3, [pc, #116]	; (800e050 <pvPortMalloc+0x188>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	4a1b      	ldr	r2, [pc, #108]	; (800e050 <pvPortMalloc+0x188>)
 800dfe4:	6013      	str	r3, [r2, #0]
 800dfe6:	4b1a      	ldr	r3, [pc, #104]	; (800e050 <pvPortMalloc+0x188>)
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	4b1b      	ldr	r3, [pc, #108]	; (800e058 <pvPortMalloc+0x190>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d203      	bcs.n	800dffa <pvPortMalloc+0x132>
 800dff2:	4b17      	ldr	r3, [pc, #92]	; (800e050 <pvPortMalloc+0x188>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a18      	ldr	r2, [pc, #96]	; (800e058 <pvPortMalloc+0x190>)
 800dff8:	6013      	str	r3, [r2, #0]
 800dffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	4b13      	ldr	r3, [pc, #76]	; (800e04c <pvPortMalloc+0x184>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	431a      	orrs	r2, r3
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	605a      	str	r2, [r3, #4]
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	2200      	movs	r2, #0
 800e00c:	601a      	str	r2, [r3, #0]
 800e00e:	4b13      	ldr	r3, [pc, #76]	; (800e05c <pvPortMalloc+0x194>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3301      	adds	r3, #1
 800e014:	4a11      	ldr	r2, [pc, #68]	; (800e05c <pvPortMalloc+0x194>)
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	f7fe fc22 	bl	800c860 <xTaskResumeAll>
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	f003 0307 	and.w	r3, r3, #7
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00a      	beq.n	800e03c <pvPortMalloc+0x174>
 800e026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	60fb      	str	r3, [r7, #12]
 800e038:	bf00      	nop
 800e03a:	e7fe      	b.n	800e03a <pvPortMalloc+0x172>
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	4618      	mov	r0, r3
 800e040:	3728      	adds	r7, #40	; 0x28
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	20004fac 	.word	0x20004fac
 800e04c:	20004fc0 	.word	0x20004fc0
 800e050:	20004fb0 	.word	0x20004fb0
 800e054:	20004fa4 	.word	0x20004fa4
 800e058:	20004fb4 	.word	0x20004fb4
 800e05c:	20004fb8 	.word	0x20004fb8

0800e060 <vPortFree>:
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	617b      	str	r3, [r7, #20]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d04d      	beq.n	800e10e <vPortFree+0xae>
 800e072:	2308      	movs	r3, #8
 800e074:	425b      	negs	r3, r3
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	4413      	add	r3, r2
 800e07a:	617b      	str	r3, [r7, #20]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	613b      	str	r3, [r7, #16]
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	4b24      	ldr	r3, [pc, #144]	; (800e118 <vPortFree+0xb8>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4013      	ands	r3, r2
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <vPortFree+0x44>
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	bf00      	nop
 800e0a2:	e7fe      	b.n	800e0a2 <vPortFree+0x42>
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00a      	beq.n	800e0c2 <vPortFree+0x62>
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	60bb      	str	r3, [r7, #8]
 800e0be:	bf00      	nop
 800e0c0:	e7fe      	b.n	800e0c0 <vPortFree+0x60>
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	4b14      	ldr	r3, [pc, #80]	; (800e118 <vPortFree+0xb8>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4013      	ands	r3, r2
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01e      	beq.n	800e10e <vPortFree+0xae>
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d11a      	bne.n	800e10e <vPortFree+0xae>
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	4b0e      	ldr	r3, [pc, #56]	; (800e118 <vPortFree+0xb8>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	43db      	mvns	r3, r3
 800e0e2:	401a      	ands	r2, r3
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	605a      	str	r2, [r3, #4]
 800e0e8:	f7fe fbac 	bl	800c844 <vTaskSuspendAll>
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	685a      	ldr	r2, [r3, #4]
 800e0f0:	4b0a      	ldr	r3, [pc, #40]	; (800e11c <vPortFree+0xbc>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	4a09      	ldr	r2, [pc, #36]	; (800e11c <vPortFree+0xbc>)
 800e0f8:	6013      	str	r3, [r2, #0]
 800e0fa:	6938      	ldr	r0, [r7, #16]
 800e0fc:	f000 f874 	bl	800e1e8 <prvInsertBlockIntoFreeList>
 800e100:	4b07      	ldr	r3, [pc, #28]	; (800e120 <vPortFree+0xc0>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	3301      	adds	r3, #1
 800e106:	4a06      	ldr	r2, [pc, #24]	; (800e120 <vPortFree+0xc0>)
 800e108:	6013      	str	r3, [r2, #0]
 800e10a:	f7fe fba9 	bl	800c860 <xTaskResumeAll>
 800e10e:	bf00      	nop
 800e110:	3718      	adds	r7, #24
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	20004fc0 	.word	0x20004fc0
 800e11c:	20004fb0 	.word	0x20004fb0
 800e120:	20004fbc 	.word	0x20004fbc

0800e124 <prvHeapInit>:
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800e12e:	60bb      	str	r3, [r7, #8]
 800e130:	4b27      	ldr	r3, [pc, #156]	; (800e1d0 <prvHeapInit+0xac>)
 800e132:	60fb      	str	r3, [r7, #12]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00c      	beq.n	800e158 <prvHeapInit+0x34>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3307      	adds	r3, #7
 800e142:	60fb      	str	r3, [r7, #12]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f023 0307 	bic.w	r3, r3, #7
 800e14a:	60fb      	str	r3, [r7, #12]
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	4a1f      	ldr	r2, [pc, #124]	; (800e1d0 <prvHeapInit+0xac>)
 800e154:	4413      	add	r3, r2
 800e156:	60bb      	str	r3, [r7, #8]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	607b      	str	r3, [r7, #4]
 800e15c:	4a1d      	ldr	r2, [pc, #116]	; (800e1d4 <prvHeapInit+0xb0>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6013      	str	r3, [r2, #0]
 800e162:	4b1c      	ldr	r3, [pc, #112]	; (800e1d4 <prvHeapInit+0xb0>)
 800e164:	2200      	movs	r2, #0
 800e166:	605a      	str	r2, [r3, #4]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4413      	add	r3, r2
 800e16e:	60fb      	str	r3, [r7, #12]
 800e170:	2208      	movs	r2, #8
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	1a9b      	subs	r3, r3, r2
 800e176:	60fb      	str	r3, [r7, #12]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f023 0307 	bic.w	r3, r3, #7
 800e17e:	60fb      	str	r3, [r7, #12]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4a15      	ldr	r2, [pc, #84]	; (800e1d8 <prvHeapInit+0xb4>)
 800e184:	6013      	str	r3, [r2, #0]
 800e186:	4b14      	ldr	r3, [pc, #80]	; (800e1d8 <prvHeapInit+0xb4>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2200      	movs	r2, #0
 800e18c:	605a      	str	r2, [r3, #4]
 800e18e:	4b12      	ldr	r3, [pc, #72]	; (800e1d8 <prvHeapInit+0xb4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2200      	movs	r2, #0
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	1ad2      	subs	r2, r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	605a      	str	r2, [r3, #4]
 800e1a4:	4b0c      	ldr	r3, [pc, #48]	; (800e1d8 <prvHeapInit+0xb4>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	601a      	str	r2, [r3, #0]
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	4a0a      	ldr	r2, [pc, #40]	; (800e1dc <prvHeapInit+0xb8>)
 800e1b2:	6013      	str	r3, [r2, #0]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	4a09      	ldr	r2, [pc, #36]	; (800e1e0 <prvHeapInit+0xbc>)
 800e1ba:	6013      	str	r3, [r2, #0]
 800e1bc:	4b09      	ldr	r3, [pc, #36]	; (800e1e4 <prvHeapInit+0xc0>)
 800e1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	bf00      	nop
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	2000150c 	.word	0x2000150c
 800e1d4:	20004fa4 	.word	0x20004fa4
 800e1d8:	20004fac 	.word	0x20004fac
 800e1dc:	20004fb4 	.word	0x20004fb4
 800e1e0:	20004fb0 	.word	0x20004fb0
 800e1e4:	20004fc0 	.word	0x20004fc0

0800e1e8 <prvInsertBlockIntoFreeList>:
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	4b28      	ldr	r3, [pc, #160]	; (800e294 <prvInsertBlockIntoFreeList+0xac>)
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e002      	b.n	800e1fc <prvInsertBlockIntoFreeList+0x14>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	429a      	cmp	r2, r3
 800e204:	d8f7      	bhi.n	800e1f6 <prvInsertBlockIntoFreeList+0xe>
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	60bb      	str	r3, [r7, #8]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	4413      	add	r3, r2
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	429a      	cmp	r2, r3
 800e216:	d108      	bne.n	800e22a <prvInsertBlockIntoFreeList+0x42>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	441a      	add	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	605a      	str	r2, [r3, #4]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	607b      	str	r3, [r7, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	60bb      	str	r3, [r7, #8]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	441a      	add	r2, r3
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d118      	bne.n	800e270 <prvInsertBlockIntoFreeList+0x88>
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	4b15      	ldr	r3, [pc, #84]	; (800e298 <prvInsertBlockIntoFreeList+0xb0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	429a      	cmp	r2, r3
 800e248:	d00d      	beq.n	800e266 <prvInsertBlockIntoFreeList+0x7e>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	441a      	add	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	605a      	str	r2, [r3, #4]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	e008      	b.n	800e278 <prvInsertBlockIntoFreeList+0x90>
 800e266:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <prvInsertBlockIntoFreeList+0xb0>)
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	e003      	b.n	800e278 <prvInsertBlockIntoFreeList+0x90>
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d002      	beq.n	800e286 <prvInsertBlockIntoFreeList+0x9e>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	bf00      	nop
 800e288:	3714      	adds	r7, #20
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	20004fa4 	.word	0x20004fa4
 800e298:	20004fac 	.word	0x20004fac

0800e29c <__errno>:
 800e29c:	4b01      	ldr	r3, [pc, #4]	; (800e2a4 <__errno+0x8>)
 800e29e:	6818      	ldr	r0, [r3, #0]
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	2000019c 	.word	0x2000019c

0800e2a8 <__libc_init_array>:
 800e2a8:	b570      	push	{r4, r5, r6, lr}
 800e2aa:	4d0d      	ldr	r5, [pc, #52]	; (800e2e0 <__libc_init_array+0x38>)
 800e2ac:	4c0d      	ldr	r4, [pc, #52]	; (800e2e4 <__libc_init_array+0x3c>)
 800e2ae:	1b64      	subs	r4, r4, r5
 800e2b0:	10a4      	asrs	r4, r4, #2
 800e2b2:	2600      	movs	r6, #0
 800e2b4:	42a6      	cmp	r6, r4
 800e2b6:	d109      	bne.n	800e2cc <__libc_init_array+0x24>
 800e2b8:	4d0b      	ldr	r5, [pc, #44]	; (800e2e8 <__libc_init_array+0x40>)
 800e2ba:	4c0c      	ldr	r4, [pc, #48]	; (800e2ec <__libc_init_array+0x44>)
 800e2bc:	f000 f9bc 	bl	800e638 <_init>
 800e2c0:	1b64      	subs	r4, r4, r5
 800e2c2:	10a4      	asrs	r4, r4, #2
 800e2c4:	2600      	movs	r6, #0
 800e2c6:	42a6      	cmp	r6, r4
 800e2c8:	d105      	bne.n	800e2d6 <__libc_init_array+0x2e>
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2d0:	4798      	blx	r3
 800e2d2:	3601      	adds	r6, #1
 800e2d4:	e7ee      	b.n	800e2b4 <__libc_init_array+0xc>
 800e2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2da:	4798      	blx	r3
 800e2dc:	3601      	adds	r6, #1
 800e2de:	e7f2      	b.n	800e2c6 <__libc_init_array+0x1e>
 800e2e0:	0800fc5c 	.word	0x0800fc5c
 800e2e4:	0800fc5c 	.word	0x0800fc5c
 800e2e8:	0800fc5c 	.word	0x0800fc5c
 800e2ec:	0800fc60 	.word	0x0800fc60

0800e2f0 <malloc>:
 800e2f0:	4b02      	ldr	r3, [pc, #8]	; (800e2fc <malloc+0xc>)
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	6818      	ldr	r0, [r3, #0]
 800e2f6:	f000 b871 	b.w	800e3dc <_malloc_r>
 800e2fa:	bf00      	nop
 800e2fc:	2000019c 	.word	0x2000019c

0800e300 <free>:
 800e300:	4b02      	ldr	r3, [pc, #8]	; (800e30c <free+0xc>)
 800e302:	4601      	mov	r1, r0
 800e304:	6818      	ldr	r0, [r3, #0]
 800e306:	f000 b819 	b.w	800e33c <_free_r>
 800e30a:	bf00      	nop
 800e30c:	2000019c 	.word	0x2000019c

0800e310 <memcpy>:
 800e310:	440a      	add	r2, r1
 800e312:	4291      	cmp	r1, r2
 800e314:	f100 33ff 	add.w	r3, r0, #4294967295
 800e318:	d100      	bne.n	800e31c <memcpy+0xc>
 800e31a:	4770      	bx	lr
 800e31c:	b510      	push	{r4, lr}
 800e31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e322:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e326:	4291      	cmp	r1, r2
 800e328:	d1f9      	bne.n	800e31e <memcpy+0xe>
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <memset>:
 800e32c:	4402      	add	r2, r0
 800e32e:	4603      	mov	r3, r0
 800e330:	4293      	cmp	r3, r2
 800e332:	d100      	bne.n	800e336 <memset+0xa>
 800e334:	4770      	bx	lr
 800e336:	f803 1b01 	strb.w	r1, [r3], #1
 800e33a:	e7f9      	b.n	800e330 <memset+0x4>

0800e33c <_free_r>:
 800e33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e33e:	2900      	cmp	r1, #0
 800e340:	d048      	beq.n	800e3d4 <_free_r+0x98>
 800e342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e346:	9001      	str	r0, [sp, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f1a1 0404 	sub.w	r4, r1, #4
 800e34e:	bfb8      	it	lt
 800e350:	18e4      	addlt	r4, r4, r3
 800e352:	f000 f963 	bl	800e61c <__malloc_lock>
 800e356:	4a20      	ldr	r2, [pc, #128]	; (800e3d8 <_free_r+0x9c>)
 800e358:	9801      	ldr	r0, [sp, #4]
 800e35a:	6813      	ldr	r3, [r2, #0]
 800e35c:	4615      	mov	r5, r2
 800e35e:	b933      	cbnz	r3, 800e36e <_free_r+0x32>
 800e360:	6063      	str	r3, [r4, #4]
 800e362:	6014      	str	r4, [r2, #0]
 800e364:	b003      	add	sp, #12
 800e366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e36a:	f000 b95d 	b.w	800e628 <__malloc_unlock>
 800e36e:	42a3      	cmp	r3, r4
 800e370:	d90b      	bls.n	800e38a <_free_r+0x4e>
 800e372:	6821      	ldr	r1, [r4, #0]
 800e374:	1862      	adds	r2, r4, r1
 800e376:	4293      	cmp	r3, r2
 800e378:	bf04      	itt	eq
 800e37a:	681a      	ldreq	r2, [r3, #0]
 800e37c:	685b      	ldreq	r3, [r3, #4]
 800e37e:	6063      	str	r3, [r4, #4]
 800e380:	bf04      	itt	eq
 800e382:	1852      	addeq	r2, r2, r1
 800e384:	6022      	streq	r2, [r4, #0]
 800e386:	602c      	str	r4, [r5, #0]
 800e388:	e7ec      	b.n	800e364 <_free_r+0x28>
 800e38a:	461a      	mov	r2, r3
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	b10b      	cbz	r3, 800e394 <_free_r+0x58>
 800e390:	42a3      	cmp	r3, r4
 800e392:	d9fa      	bls.n	800e38a <_free_r+0x4e>
 800e394:	6811      	ldr	r1, [r2, #0]
 800e396:	1855      	adds	r5, r2, r1
 800e398:	42a5      	cmp	r5, r4
 800e39a:	d10b      	bne.n	800e3b4 <_free_r+0x78>
 800e39c:	6824      	ldr	r4, [r4, #0]
 800e39e:	4421      	add	r1, r4
 800e3a0:	1854      	adds	r4, r2, r1
 800e3a2:	42a3      	cmp	r3, r4
 800e3a4:	6011      	str	r1, [r2, #0]
 800e3a6:	d1dd      	bne.n	800e364 <_free_r+0x28>
 800e3a8:	681c      	ldr	r4, [r3, #0]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	6053      	str	r3, [r2, #4]
 800e3ae:	4421      	add	r1, r4
 800e3b0:	6011      	str	r1, [r2, #0]
 800e3b2:	e7d7      	b.n	800e364 <_free_r+0x28>
 800e3b4:	d902      	bls.n	800e3bc <_free_r+0x80>
 800e3b6:	230c      	movs	r3, #12
 800e3b8:	6003      	str	r3, [r0, #0]
 800e3ba:	e7d3      	b.n	800e364 <_free_r+0x28>
 800e3bc:	6825      	ldr	r5, [r4, #0]
 800e3be:	1961      	adds	r1, r4, r5
 800e3c0:	428b      	cmp	r3, r1
 800e3c2:	bf04      	itt	eq
 800e3c4:	6819      	ldreq	r1, [r3, #0]
 800e3c6:	685b      	ldreq	r3, [r3, #4]
 800e3c8:	6063      	str	r3, [r4, #4]
 800e3ca:	bf04      	itt	eq
 800e3cc:	1949      	addeq	r1, r1, r5
 800e3ce:	6021      	streq	r1, [r4, #0]
 800e3d0:	6054      	str	r4, [r2, #4]
 800e3d2:	e7c7      	b.n	800e364 <_free_r+0x28>
 800e3d4:	b003      	add	sp, #12
 800e3d6:	bd30      	pop	{r4, r5, pc}
 800e3d8:	20004fc4 	.word	0x20004fc4

0800e3dc <_malloc_r>:
 800e3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3de:	1ccd      	adds	r5, r1, #3
 800e3e0:	f025 0503 	bic.w	r5, r5, #3
 800e3e4:	3508      	adds	r5, #8
 800e3e6:	2d0c      	cmp	r5, #12
 800e3e8:	bf38      	it	cc
 800e3ea:	250c      	movcc	r5, #12
 800e3ec:	2d00      	cmp	r5, #0
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	db01      	blt.n	800e3f6 <_malloc_r+0x1a>
 800e3f2:	42a9      	cmp	r1, r5
 800e3f4:	d903      	bls.n	800e3fe <_malloc_r+0x22>
 800e3f6:	230c      	movs	r3, #12
 800e3f8:	6033      	str	r3, [r6, #0]
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3fe:	f000 f90d 	bl	800e61c <__malloc_lock>
 800e402:	4921      	ldr	r1, [pc, #132]	; (800e488 <_malloc_r+0xac>)
 800e404:	680a      	ldr	r2, [r1, #0]
 800e406:	4614      	mov	r4, r2
 800e408:	b99c      	cbnz	r4, 800e432 <_malloc_r+0x56>
 800e40a:	4f20      	ldr	r7, [pc, #128]	; (800e48c <_malloc_r+0xb0>)
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	b923      	cbnz	r3, 800e41a <_malloc_r+0x3e>
 800e410:	4621      	mov	r1, r4
 800e412:	4630      	mov	r0, r6
 800e414:	f000 f83c 	bl	800e490 <_sbrk_r>
 800e418:	6038      	str	r0, [r7, #0]
 800e41a:	4629      	mov	r1, r5
 800e41c:	4630      	mov	r0, r6
 800e41e:	f000 f837 	bl	800e490 <_sbrk_r>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d123      	bne.n	800e46e <_malloc_r+0x92>
 800e426:	230c      	movs	r3, #12
 800e428:	6033      	str	r3, [r6, #0]
 800e42a:	4630      	mov	r0, r6
 800e42c:	f000 f8fc 	bl	800e628 <__malloc_unlock>
 800e430:	e7e3      	b.n	800e3fa <_malloc_r+0x1e>
 800e432:	6823      	ldr	r3, [r4, #0]
 800e434:	1b5b      	subs	r3, r3, r5
 800e436:	d417      	bmi.n	800e468 <_malloc_r+0x8c>
 800e438:	2b0b      	cmp	r3, #11
 800e43a:	d903      	bls.n	800e444 <_malloc_r+0x68>
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	441c      	add	r4, r3
 800e440:	6025      	str	r5, [r4, #0]
 800e442:	e004      	b.n	800e44e <_malloc_r+0x72>
 800e444:	6863      	ldr	r3, [r4, #4]
 800e446:	42a2      	cmp	r2, r4
 800e448:	bf0c      	ite	eq
 800e44a:	600b      	streq	r3, [r1, #0]
 800e44c:	6053      	strne	r3, [r2, #4]
 800e44e:	4630      	mov	r0, r6
 800e450:	f000 f8ea 	bl	800e628 <__malloc_unlock>
 800e454:	f104 000b 	add.w	r0, r4, #11
 800e458:	1d23      	adds	r3, r4, #4
 800e45a:	f020 0007 	bic.w	r0, r0, #7
 800e45e:	1ac2      	subs	r2, r0, r3
 800e460:	d0cc      	beq.n	800e3fc <_malloc_r+0x20>
 800e462:	1a1b      	subs	r3, r3, r0
 800e464:	50a3      	str	r3, [r4, r2]
 800e466:	e7c9      	b.n	800e3fc <_malloc_r+0x20>
 800e468:	4622      	mov	r2, r4
 800e46a:	6864      	ldr	r4, [r4, #4]
 800e46c:	e7cc      	b.n	800e408 <_malloc_r+0x2c>
 800e46e:	1cc4      	adds	r4, r0, #3
 800e470:	f024 0403 	bic.w	r4, r4, #3
 800e474:	42a0      	cmp	r0, r4
 800e476:	d0e3      	beq.n	800e440 <_malloc_r+0x64>
 800e478:	1a21      	subs	r1, r4, r0
 800e47a:	4630      	mov	r0, r6
 800e47c:	f000 f808 	bl	800e490 <_sbrk_r>
 800e480:	3001      	adds	r0, #1
 800e482:	d1dd      	bne.n	800e440 <_malloc_r+0x64>
 800e484:	e7cf      	b.n	800e426 <_malloc_r+0x4a>
 800e486:	bf00      	nop
 800e488:	20004fc4 	.word	0x20004fc4
 800e48c:	20004fc8 	.word	0x20004fc8

0800e490 <_sbrk_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4d06      	ldr	r5, [pc, #24]	; (800e4ac <_sbrk_r+0x1c>)
 800e494:	2300      	movs	r3, #0
 800e496:	4604      	mov	r4, r0
 800e498:	4608      	mov	r0, r1
 800e49a:	602b      	str	r3, [r5, #0]
 800e49c:	f7f7 fbc6 	bl	8005c2c <_sbrk>
 800e4a0:	1c43      	adds	r3, r0, #1
 800e4a2:	d102      	bne.n	800e4aa <_sbrk_r+0x1a>
 800e4a4:	682b      	ldr	r3, [r5, #0]
 800e4a6:	b103      	cbz	r3, 800e4aa <_sbrk_r+0x1a>
 800e4a8:	6023      	str	r3, [r4, #0]
 800e4aa:	bd38      	pop	{r3, r4, r5, pc}
 800e4ac:	20005118 	.word	0x20005118

0800e4b0 <strcasecmp>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	4d0c      	ldr	r5, [pc, #48]	; (800e4e4 <strcasecmp+0x34>)
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	462e      	mov	r6, r5
 800e4b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e4bc:	5d5a      	ldrb	r2, [r3, r5]
 800e4be:	f002 0203 	and.w	r2, r2, #3
 800e4c2:	2a01      	cmp	r2, #1
 800e4c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4c8:	5cb0      	ldrb	r0, [r6, r2]
 800e4ca:	f000 0003 	and.w	r0, r0, #3
 800e4ce:	bf08      	it	eq
 800e4d0:	3320      	addeq	r3, #32
 800e4d2:	2801      	cmp	r0, #1
 800e4d4:	bf08      	it	eq
 800e4d6:	3220      	addeq	r2, #32
 800e4d8:	1a98      	subs	r0, r3, r2
 800e4da:	d101      	bne.n	800e4e0 <strcasecmp+0x30>
 800e4dc:	2a00      	cmp	r2, #0
 800e4de:	d1eb      	bne.n	800e4b8 <strcasecmp+0x8>
 800e4e0:	bd70      	pop	{r4, r5, r6, pc}
 800e4e2:	bf00      	nop
 800e4e4:	0800fb51 	.word	0x0800fb51

0800e4e8 <strncpy>:
 800e4e8:	b510      	push	{r4, lr}
 800e4ea:	3901      	subs	r1, #1
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	b132      	cbz	r2, 800e4fe <strncpy+0x16>
 800e4f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e4f4:	f803 4b01 	strb.w	r4, [r3], #1
 800e4f8:	3a01      	subs	r2, #1
 800e4fa:	2c00      	cmp	r4, #0
 800e4fc:	d1f7      	bne.n	800e4ee <strncpy+0x6>
 800e4fe:	441a      	add	r2, r3
 800e500:	2100      	movs	r1, #0
 800e502:	4293      	cmp	r3, r2
 800e504:	d100      	bne.n	800e508 <strncpy+0x20>
 800e506:	bd10      	pop	{r4, pc}
 800e508:	f803 1b01 	strb.w	r1, [r3], #1
 800e50c:	e7f9      	b.n	800e502 <strncpy+0x1a>
	...

0800e510 <_strtoul_l.isra.0>:
 800e510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e514:	4e3b      	ldr	r6, [pc, #236]	; (800e604 <_strtoul_l.isra.0+0xf4>)
 800e516:	4686      	mov	lr, r0
 800e518:	468c      	mov	ip, r1
 800e51a:	4660      	mov	r0, ip
 800e51c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e520:	5da5      	ldrb	r5, [r4, r6]
 800e522:	f015 0508 	ands.w	r5, r5, #8
 800e526:	d1f8      	bne.n	800e51a <_strtoul_l.isra.0+0xa>
 800e528:	2c2d      	cmp	r4, #45	; 0x2d
 800e52a:	d134      	bne.n	800e596 <_strtoul_l.isra.0+0x86>
 800e52c:	f89c 4000 	ldrb.w	r4, [ip]
 800e530:	f04f 0801 	mov.w	r8, #1
 800e534:	f100 0c02 	add.w	ip, r0, #2
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d05e      	beq.n	800e5fa <_strtoul_l.isra.0+0xea>
 800e53c:	2b10      	cmp	r3, #16
 800e53e:	d10c      	bne.n	800e55a <_strtoul_l.isra.0+0x4a>
 800e540:	2c30      	cmp	r4, #48	; 0x30
 800e542:	d10a      	bne.n	800e55a <_strtoul_l.isra.0+0x4a>
 800e544:	f89c 0000 	ldrb.w	r0, [ip]
 800e548:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e54c:	2858      	cmp	r0, #88	; 0x58
 800e54e:	d14f      	bne.n	800e5f0 <_strtoul_l.isra.0+0xe0>
 800e550:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800e554:	2310      	movs	r3, #16
 800e556:	f10c 0c02 	add.w	ip, ip, #2
 800e55a:	f04f 37ff 	mov.w	r7, #4294967295
 800e55e:	2500      	movs	r5, #0
 800e560:	fbb7 f7f3 	udiv	r7, r7, r3
 800e564:	fb03 f907 	mul.w	r9, r3, r7
 800e568:	ea6f 0909 	mvn.w	r9, r9
 800e56c:	4628      	mov	r0, r5
 800e56e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800e572:	2e09      	cmp	r6, #9
 800e574:	d818      	bhi.n	800e5a8 <_strtoul_l.isra.0+0x98>
 800e576:	4634      	mov	r4, r6
 800e578:	42a3      	cmp	r3, r4
 800e57a:	dd24      	ble.n	800e5c6 <_strtoul_l.isra.0+0xb6>
 800e57c:	2d00      	cmp	r5, #0
 800e57e:	db1f      	blt.n	800e5c0 <_strtoul_l.isra.0+0xb0>
 800e580:	4287      	cmp	r7, r0
 800e582:	d31d      	bcc.n	800e5c0 <_strtoul_l.isra.0+0xb0>
 800e584:	d101      	bne.n	800e58a <_strtoul_l.isra.0+0x7a>
 800e586:	45a1      	cmp	r9, r4
 800e588:	db1a      	blt.n	800e5c0 <_strtoul_l.isra.0+0xb0>
 800e58a:	fb00 4003 	mla	r0, r0, r3, r4
 800e58e:	2501      	movs	r5, #1
 800e590:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e594:	e7eb      	b.n	800e56e <_strtoul_l.isra.0+0x5e>
 800e596:	2c2b      	cmp	r4, #43	; 0x2b
 800e598:	bf08      	it	eq
 800e59a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800e59e:	46a8      	mov	r8, r5
 800e5a0:	bf08      	it	eq
 800e5a2:	f100 0c02 	addeq.w	ip, r0, #2
 800e5a6:	e7c7      	b.n	800e538 <_strtoul_l.isra.0+0x28>
 800e5a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800e5ac:	2e19      	cmp	r6, #25
 800e5ae:	d801      	bhi.n	800e5b4 <_strtoul_l.isra.0+0xa4>
 800e5b0:	3c37      	subs	r4, #55	; 0x37
 800e5b2:	e7e1      	b.n	800e578 <_strtoul_l.isra.0+0x68>
 800e5b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800e5b8:	2e19      	cmp	r6, #25
 800e5ba:	d804      	bhi.n	800e5c6 <_strtoul_l.isra.0+0xb6>
 800e5bc:	3c57      	subs	r4, #87	; 0x57
 800e5be:	e7db      	b.n	800e578 <_strtoul_l.isra.0+0x68>
 800e5c0:	f04f 35ff 	mov.w	r5, #4294967295
 800e5c4:	e7e4      	b.n	800e590 <_strtoul_l.isra.0+0x80>
 800e5c6:	2d00      	cmp	r5, #0
 800e5c8:	da07      	bge.n	800e5da <_strtoul_l.isra.0+0xca>
 800e5ca:	2322      	movs	r3, #34	; 0x22
 800e5cc:	f8ce 3000 	str.w	r3, [lr]
 800e5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d4:	b942      	cbnz	r2, 800e5e8 <_strtoul_l.isra.0+0xd8>
 800e5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5da:	f1b8 0f00 	cmp.w	r8, #0
 800e5de:	d000      	beq.n	800e5e2 <_strtoul_l.isra.0+0xd2>
 800e5e0:	4240      	negs	r0, r0
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	d0f7      	beq.n	800e5d6 <_strtoul_l.isra.0+0xc6>
 800e5e6:	b10d      	cbz	r5, 800e5ec <_strtoul_l.isra.0+0xdc>
 800e5e8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e5ec:	6011      	str	r1, [r2, #0]
 800e5ee:	e7f2      	b.n	800e5d6 <_strtoul_l.isra.0+0xc6>
 800e5f0:	2430      	movs	r4, #48	; 0x30
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1b1      	bne.n	800e55a <_strtoul_l.isra.0+0x4a>
 800e5f6:	2308      	movs	r3, #8
 800e5f8:	e7af      	b.n	800e55a <_strtoul_l.isra.0+0x4a>
 800e5fa:	2c30      	cmp	r4, #48	; 0x30
 800e5fc:	d0a2      	beq.n	800e544 <_strtoul_l.isra.0+0x34>
 800e5fe:	230a      	movs	r3, #10
 800e600:	e7ab      	b.n	800e55a <_strtoul_l.isra.0+0x4a>
 800e602:	bf00      	nop
 800e604:	0800fb51 	.word	0x0800fb51

0800e608 <strtoul>:
 800e608:	4613      	mov	r3, r2
 800e60a:	460a      	mov	r2, r1
 800e60c:	4601      	mov	r1, r0
 800e60e:	4802      	ldr	r0, [pc, #8]	; (800e618 <strtoul+0x10>)
 800e610:	6800      	ldr	r0, [r0, #0]
 800e612:	f7ff bf7d 	b.w	800e510 <_strtoul_l.isra.0>
 800e616:	bf00      	nop
 800e618:	2000019c 	.word	0x2000019c

0800e61c <__malloc_lock>:
 800e61c:	4801      	ldr	r0, [pc, #4]	; (800e624 <__malloc_lock+0x8>)
 800e61e:	f000 b809 	b.w	800e634 <__retarget_lock_acquire_recursive>
 800e622:	bf00      	nop
 800e624:	20005120 	.word	0x20005120

0800e628 <__malloc_unlock>:
 800e628:	4801      	ldr	r0, [pc, #4]	; (800e630 <__malloc_unlock+0x8>)
 800e62a:	f000 b804 	b.w	800e636 <__retarget_lock_release_recursive>
 800e62e:	bf00      	nop
 800e630:	20005120 	.word	0x20005120

0800e634 <__retarget_lock_acquire_recursive>:
 800e634:	4770      	bx	lr

0800e636 <__retarget_lock_release_recursive>:
 800e636:	4770      	bx	lr

0800e638 <_init>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	bf00      	nop
 800e63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63e:	bc08      	pop	{r3}
 800e640:	469e      	mov	lr, r3
 800e642:	4770      	bx	lr

0800e644 <_fini>:
 800e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e646:	bf00      	nop
 800e648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e64a:	bc08      	pop	{r3}
 800e64c:	469e      	mov	lr, r3
 800e64e:	4770      	bx	lr
